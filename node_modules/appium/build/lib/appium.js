"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AppiumDriver = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _config = require("./config");

var _appiumBaseDriver = require("appium-base-driver");

var _appiumFakeDriver = require("appium-fake-driver");

var _appiumAndroidDriver = require("appium-android-driver");

var _appiumIosDriver = require("appium-ios-driver");

var _appiumUiautomator2Driver = require("appium-uiautomator2-driver");

var _appiumSelendroidDriver = require("appium-selendroid-driver");

var _appiumXcuitestDriver = require("appium-xcuitest-driver");

var _appiumYouiengineDriver = require("appium-youiengine-driver");

var _appiumWindowsDriver = require("appium-windows-driver");

var _appiumMacDriver = require("appium-mac-driver");

var _appiumEspressoDriver = require("appium-espresso-driver");

var _appiumTizenDriver = require("appium-tizen-driver");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _utils = require("./utils");

var _semver = _interopRequireDefault(require("semver"));

const PLATFORMS = {
  FAKE: 'fake',
  ANDROID: 'android',
  IOS: 'ios',
  WINDOWS: 'windows',
  MAC: 'mac',
  TIZEN: 'tizen'
};
const AUTOMATION_NAMES = {
  APPIUM: 'Appium',
  SELENDROID: 'Selendroid',
  UIAUTOMATOR2: 'UiAutomator2',
  UIAUTOMATOR1: 'UiAutomator1',
  XCUITEST: 'XCUITest',
  YOUIENGINE: 'YouiEngine',
  ESPRESSO: 'Espresso',
  TIZEN: 'Tizen',
  FAKE: 'Fake',
  INSTRUMENTS: 'Instruments'
};
const DRIVER_MAP = {
  SelendroidDriver: {
    driverClass: _appiumSelendroidDriver.SelendroidDriver,
    automationName: AUTOMATION_NAMES.SELENDROID,
    version: (0, _utils.getPackageVersion)('appium-selendroid-driver')
  },
  AndroidUiautomator2Driver: {
    driverClass: _appiumUiautomator2Driver.AndroidUiautomator2Driver,
    automationName: AUTOMATION_NAMES.UIAUTOMATOR2,
    version: (0, _utils.getPackageVersion)('appium-uiautomator2-driver')
  },
  XCUITestDriver: {
    driverClass: _appiumXcuitestDriver.XCUITestDriver,
    automationName: AUTOMATION_NAMES.XCUITEST,
    version: (0, _utils.getPackageVersion)('appium-xcuitest-driver')
  },
  YouiEngineDriver: {
    driverClass: _appiumYouiengineDriver.YouiEngineDriver,
    automationName: AUTOMATION_NAMES.YOUIENGINE,
    version: (0, _utils.getPackageVersion)('appium-youiengine-driver')
  },
  FakeDriver: {
    driverClass: _appiumFakeDriver.FakeDriver,
    version: (0, _utils.getPackageVersion)('appium-fake-driver')
  },
  AndroidDriver: {
    driverClass: _appiumAndroidDriver.AndroidDriver,
    automationName: AUTOMATION_NAMES.UIAUTOMATOR1,
    version: (0, _utils.getPackageVersion)('appium-android-driver')
  },
  IosDriver: {
    driverClass: _appiumIosDriver.IosDriver,
    automationName: AUTOMATION_NAMES.INSTRUMENTS,
    version: (0, _utils.getPackageVersion)('appium-ios-driver')
  },
  WindowsDriver: {
    driverClass: _appiumWindowsDriver.WindowsDriver,
    version: (0, _utils.getPackageVersion)('appium-windows-driver')
  },
  MacDriver: {
    driverClass: _appiumMacDriver.MacDriver,
    version: (0, _utils.getPackageVersion)('appium-mac-driver')
  },
  EspressoDriver: {
    driverClass: _appiumEspressoDriver.EspressoDriver,
    automationName: AUTOMATION_NAMES.ESPRESSO,
    version: (0, _utils.getPackageVersion)('appium-espresso-driver')
  },
  TizenDriver: {
    driverClass: _appiumTizenDriver.TizenDriver,
    automationName: AUTOMATION_NAMES.TIZEN,
    version: (0, _utils.getPackageVersion)('appium-tizen-driver')
  }
};
const PLATFORMS_MAP = {
  [PLATFORMS.FAKE]: () => _appiumFakeDriver.FakeDriver,
  [PLATFORMS.ANDROID]: caps => {
    const platformVersion = _semver.default.valid(_semver.default.coerce(caps.platformVersion));

    _logger.default.warn(`DeprecationWarning: 'automationName' capability was not provided. ` + `Future versions of Appium will require 'automationName' capability to be set for Android sessions.`);

    _logger.default.info(`Setting automation to '${AUTOMATION_NAMES.UIAUTOMATOR1}'. `);

    if (platformVersion && _semver.default.satisfies(platformVersion, '>=6.0.0')) {
      _logger.default.warn(`Consider setting 'automationName' capability to '${AUTOMATION_NAMES.UIAUTOMATOR2}' ` + 'on Android >= 6, since UIAutomator1 framework ' + 'is not maintained anymore by the OS vendor.');
    }

    return _appiumAndroidDriver.AndroidDriver;
  },
  [PLATFORMS.IOS]: caps => {
    const platformVersion = _semver.default.valid(_semver.default.coerce(caps.platformVersion));

    _logger.default.warn(`DeprecationWarning: 'automationName' capability was not provided. ` + `Future versions of Appium will require 'automationName' capability to be set for iOS sessions.`);

    if (platformVersion && _semver.default.satisfies(platformVersion, '>=10.0.0')) {
      _logger.default.info("Requested iOS support with version >= 10, " + `using '${AUTOMATION_NAMES.XCUITEST}' ` + "driver instead of UIAutomation-based driver, since the " + "latter is unsupported on iOS 10 and up.");

      return _appiumXcuitestDriver.XCUITestDriver;
    }

    return _appiumIosDriver.IosDriver;
  },
  [PLATFORMS.WINDOWS]: () => _appiumWindowsDriver.WindowsDriver,
  [PLATFORMS.MAC]: () => _appiumMacDriver.MacDriver,
  [PLATFORMS.TIZEN]: () => _appiumTizenDriver.TizenDriver
};
const desiredCapabilityConstraints = {
  automationName: {
    presence: false,
    isString: true,
    inclusionCaseInsensitive: _lodash.default.values(AUTOMATION_NAMES)
  },
  platformName: {
    presence: true,
    isString: true,
    inclusionCaseInsensitive: _lodash.default.keys(PLATFORMS_MAP)
  }
};
const sessionsListGuard = new _asyncLock.default();
const pendingDriversGuard = new _asyncLock.default();

class AppiumDriver extends _appiumBaseDriver.BaseDriver {
  constructor(args) {
    super();
    this.desiredCapConstraints = desiredCapabilityConstraints;
    this.newCommandTimeoutMs = 0;
    this.args = Object.assign({}, args);
    this.sessions = {};
    this.pendingDrivers = {};
    (0, _config.updateBuildInfo)();
  }

  get isCommandsQueueEnabled() {
    return false;
  }

  sessionExists(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession && dstSession.sessionId !== null;
  }

  driverForSession(sessionId) {
    return this.sessions[sessionId];
  }

  getDriverForCaps(caps) {
    if (!_lodash.default.isString(caps.platformName)) {
      throw new Error("You must include a platformName capability");
    }

    const platformName = caps.platformName.toLowerCase();

    if (_lodash.default.isString(caps.automationName)) {
      for (const _ref of _lodash.default.values(DRIVER_MAP)) {
        const {
          automationName,
          driverClass
        } = _ref;

        if (_lodash.default.toLower(automationName) === caps.automationName.toLowerCase()) {
          return driverClass;
        }
      }
    }

    const driverSelector = PLATFORMS_MAP[platformName];

    if (driverSelector) {
      return driverSelector(caps);
    }

    const msg = _lodash.default.isString(caps.automationName) ? `Could not find a driver for automationName '${caps.automationName}' and platformName ` + `'${caps.platformName}'.` : `Could not find a driver for platformName '${caps.platformName}'.`;
    throw new Error(`${msg} Please check your desired capabilities.`);
  }

  getDriverVersion(driver) {
    const {
      version
    } = DRIVER_MAP[driver.name] || {};

    if (version) {
      return version;
    }

    _logger.default.warn(`Unable to get version of driver '${driver.name}'`);
  }

  async getStatus() {
    return {
      build: _lodash.default.clone((0, _config.getBuildInfo)())
    };
  }

  async getSessions() {
    const sessions = await sessionsListGuard.acquire(AppiumDriver.name, () => this.sessions);
    return _lodash.default.toPairs(sessions).map(([id, driver]) => {
      return {
        id,
        capabilities: driver.caps
      };
    });
  }

  printNewSessionAnnouncement(driver, caps) {
    const driverVersion = this.getDriverVersion(driver);
    const introString = driverVersion ? `Creating new ${driver.name} (v${driverVersion}) session` : `Creating new ${driver.name} session`;

    _logger.default.info(introString);

    _logger.default.info('Capabilities:');

    (0, _utils.inspectObject)(caps);
  }

  async createSession(jsonwpCaps, reqCaps, w3cCapabilities) {
    const {
      defaultCapabilities
    } = this.args;
    let protocol;
    let innerSessionId, dCaps;

    try {
      const parsedCaps = (0, _utils.parseCapsForInnerDriver)(jsonwpCaps, w3cCapabilities, this.desiredCapConstraints, defaultCapabilities);
      let {
        desiredCaps,
        processedJsonwpCapabilities,
        processedW3CCapabilities,
        error
      } = parsedCaps;
      protocol = parsedCaps.protocol;

      if (error) {
        throw error;
      }

      const InnerDriver = this.getDriverForCaps(desiredCaps);
      this.printNewSessionAnnouncement(InnerDriver, desiredCaps);

      if (this.args.sessionOverride) {
        const sessionIdsToDelete = await sessionsListGuard.acquire(AppiumDriver.name, () => _lodash.default.keys(this.sessions));

        if (sessionIdsToDelete.length) {
          _logger.default.info(`Session override is on. Deleting other ${sessionIdsToDelete.length} active session${sessionIdsToDelete.length ? '' : 's'}.`);

          try {
            await _bluebird.default.map(sessionIdsToDelete, id => this.deleteSession(id));
          } catch (ign) {}
        }
      }

      let runningDriversData, otherPendingDriversData;
      const d = new InnerDriver(this.args);

      if (this.args.relaxedSecurityEnabled) {
        _logger.default.info(`Applying relaxed security to '${InnerDriver.name}' as per server command line argument`);

        d.relaxedSecurityEnabled = true;
      }

      d.server = this.server;

      try {
        runningDriversData = await this.curSessionDataForDriver(InnerDriver);
      } catch (e) {
        throw new _appiumBaseDriver.errors.SessionNotCreatedError(e.message);
      }

      await pendingDriversGuard.acquire(AppiumDriver.name, () => {
        this.pendingDrivers[InnerDriver.name] = this.pendingDrivers[InnerDriver.name] || [];
        otherPendingDriversData = this.pendingDrivers[InnerDriver.name].map(drv => drv.driverData);
        this.pendingDrivers[InnerDriver.name].push(d);
      });

      try {
        [innerSessionId, dCaps] = await d.createSession(processedJsonwpCapabilities, reqCaps, processedW3CCapabilities, [...runningDriversData, ...otherPendingDriversData]);
        protocol = d.protocol;
        await sessionsListGuard.acquire(AppiumDriver.name, () => {
          this.sessions[innerSessionId] = d;
        });
      } finally {
        await pendingDriversGuard.acquire(AppiumDriver.name, () => {
          _lodash.default.pull(this.pendingDrivers[InnerDriver.name], d);
        });
      }

      this.attachUnexpectedShutdownHandler(d, innerSessionId);

      _logger.default.info(`New ${InnerDriver.name} session created successfully, session ` + `${innerSessionId} added to master session list`);

      d.startNewCommandTimeout();
    } catch (error) {
      return {
        protocol,
        error
      };
    }

    return {
      protocol,
      value: [innerSessionId, dCaps, protocol]
    };
  }

  async attachUnexpectedShutdownHandler(driver, innerSessionId) {
    try {
      await driver.onUnexpectedShutdown;
      throw new Error('Unexpected shutdown');
    } catch (e) {
      if (e instanceof _bluebird.default.CancellationError) {
        return;
      }

      _logger.default.warn(`Closing session, cause was '${e.message}'`);

      _logger.default.info(`Removing session ${innerSessionId} from our master session list`);

      await sessionsListGuard.acquire(AppiumDriver.name, () => {
        delete this.sessions[innerSessionId];
      });
    }
  }

  async curSessionDataForDriver(InnerDriver) {
    const sessions = await sessionsListGuard.acquire(AppiumDriver.name, () => this.sessions);

    const data = _lodash.default.values(sessions).filter(s => s.constructor.name === InnerDriver.name).map(s => s.driverData);

    for (let datum of data) {
      if (!datum) {
        throw new Error(`Problem getting session data for driver type ` + `${InnerDriver.name}; does it implement 'get ` + `driverData'?`);
      }
    }

    return data;
  }

  async deleteSession(sessionId) {
    let protocol;

    try {
      let otherSessionsData = null;
      let dstSession = null;
      await sessionsListGuard.acquire(AppiumDriver.name, () => {
        if (!this.sessions[sessionId]) {
          return;
        }

        const curConstructorName = this.sessions[sessionId].constructor.name;
        otherSessionsData = _lodash.default.toPairs(this.sessions).filter(([key, value]) => value.constructor.name === curConstructorName && key !== sessionId).map(([, value]) => value.driverData);
        dstSession = this.sessions[sessionId];
        protocol = dstSession.protocol;

        _logger.default.info(`Removing session ${sessionId} from our master session list`);

        delete this.sessions[sessionId];
      });
      return {
        protocol,
        value: await dstSession.deleteSession(sessionId, otherSessionsData)
      };
    } catch (e) {
      _logger.default.error(`Had trouble ending session ${sessionId}: ${e.message}`);

      return {
        protocol,
        error: e
      };
    }
  }

  async executeCommand(cmd, ...args) {
    if (cmd === 'getStatus') {
      return await this.getStatus();
    }

    if (isAppiumDriverCommand(cmd)) {
      return await super.executeCommand(cmd, ...args);
    }

    const sessionId = _lodash.default.last(args);

    const dstSession = await sessionsListGuard.acquire(AppiumDriver.name, () => this.sessions[sessionId]);

    if (!dstSession) {
      throw new Error(`The session with id '${sessionId}' does not exist`);
    }

    let res = {
      protocol: dstSession.protocol
    };

    try {
      res.value = await dstSession.executeCommand(cmd, ...args);
    } catch (e) {
      res.error = e;
    }

    return res;
  }

  proxyActive(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession && _lodash.default.isFunction(dstSession.proxyActive) && dstSession.proxyActive(sessionId);
  }

  getProxyAvoidList(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession ? dstSession.getProxyAvoidList() : [];
  }

  canProxy(sessionId) {
    const dstSession = this.sessions[sessionId];
    return dstSession && dstSession.canProxy(sessionId);
  }

}

exports.AppiumDriver = AppiumDriver;

function isAppiumDriverCommand(cmd) {
  return !(0, _appiumBaseDriver.isSessionCommand)(cmd) || cmd === "deleteSession";
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
