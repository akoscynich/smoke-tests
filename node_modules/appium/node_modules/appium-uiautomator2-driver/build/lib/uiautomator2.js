"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.INSTRUMENTATION_TARGET = exports.UiAutomator2Server = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _appiumUiautomator2Server = require("appium-uiautomator2-server");

var _appiumSupport = require("appium-support");

var _bluebird = _interopRequireDefault(require("bluebird"));

const REQD_PARAMS = ['adb', 'tmpDir', 'host', 'systemPort', 'devicePort', 'disableWindowAnimation'];
const SERVER_LAUNCH_TIMEOUT = 30000;
const SERVER_INSTALL_RETRIES = 20;
const SERVICES_LAUNCH_TIMEOUT = 30000;
const SERVER_PACKAGE_ID = 'io.appium.uiautomator2.server';
const SERVER_TEST_PACKAGE_ID = `${SERVER_PACKAGE_ID}.test`;
const INSTRUMENTATION_TARGET = `${SERVER_TEST_PACKAGE_ID}/androidx.test.runner.AndroidJUnitRunner`;
exports.INSTRUMENTATION_TARGET = INSTRUMENTATION_TARGET;

const instrumentationLogger = _appiumSupport.logger.getLogger('Instrumentation');

class UiAutomator2Server {
  constructor(opts = {}) {
    for (let req of REQD_PARAMS) {
      if (!opts || !_appiumSupport.util.hasValue(opts[req])) {
        throw new Error(`Option '${req}' is required!`);
      }

      this[req] = opts[req];
    }

    this.jwproxy = new _appiumBaseDriver.JWProxy({
      server: this.host,
      port: this.systemPort
    });
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
  }

  async installServerApk(installTimeout = SERVER_INSTALL_RETRIES * 1000) {
    const packagesInfo = [{
      appPath: _appiumUiautomator2Server.SERVER_APK_PATH,
      appId: SERVER_PACKAGE_ID
    }, {
      appPath: _appiumUiautomator2Server.TEST_APK_PATH,
      appId: SERVER_TEST_PACKAGE_ID
    }];
    let shouldUninstallServerPackages = false;
    let shouldInstallServerPackages = false;

    for (const _ref of packagesInfo) {
      const {
        appId,
        appPath
      } = _ref;

      if (appId === SERVER_TEST_PACKAGE_ID) {
        if (!(await this.adb.checkApkCert(appPath, appId))) {
          await this.adb.sign(appPath);
          shouldUninstallServerPackages = shouldUninstallServerPackages || (await this.adb.isAppInstalled(appId));
          shouldInstallServerPackages = true;
        }

        continue;
      }

      const appState = await this.adb.getApplicationInstallState(appPath, appId);

      _logger.default.debug(`${appId} installation state: ${appState}`);

      if (await this.adb.checkApkCert(appPath, appId)) {
        shouldUninstallServerPackages = shouldUninstallServerPackages || [this.adb.APP_INSTALL_STATE.OLDER_VERSION_INSTALLED, this.adb.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED].includes(appState);
      } else {
        await this.adb.sign(appPath);
        shouldUninstallServerPackages = shouldUninstallServerPackages || ![this.adb.APP_INSTALL_STATE.NOT_INSTALLED].includes(appState);
      }

      shouldInstallServerPackages = shouldInstallServerPackages || shouldUninstallServerPackages || [this.adb.APP_INSTALL_STATE.NOT_INSTALLED].includes(appState);
    }

    _logger.default.info(`Server packages are ${shouldInstallServerPackages ? '' : 'not '}going to be (re)installed`);

    if (shouldInstallServerPackages && shouldUninstallServerPackages) {
      _logger.default.info('Full packages reinstall is going to be performed');
    }

    for (const _ref2 of packagesInfo) {
      const {
        appId,
        appPath
      } = _ref2;

      if (shouldUninstallServerPackages) {
        try {
          await this.adb.uninstallApk(appId);
        } catch (err) {
          _logger.default.warn(`Error uninstalling '${appId}': ${err.message}`);
        }
      }

      if (shouldInstallServerPackages) {
        await this.adb.install(appPath, {
          replace: false,
          timeout: installTimeout
        });
      }
    }

    await this.verifyServicesAvailability();
  }

  async verifyServicesAvailability() {
    _logger.default.debug(`Waiting up to ${SERVICES_LAUNCH_TIMEOUT}ms for services to be available`);

    let isPmServiceAvailable = false;
    let pmOutput = '';
    let pmError = null;

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        if (!isPmServiceAvailable) {
          pmError = null;
          pmOutput = '';

          try {
            pmOutput = await this.adb.shell(['pm', 'list', 'instrumentation']);
          } catch (e) {
            pmError = e;
          }

          if (pmOutput.includes('Could not access the Package Manager')) {
            pmError = new Error(`Problem running Package Manager: ${pmOutput}`);
            pmOutput = '';
          } else if (pmOutput.includes(INSTRUMENTATION_TARGET)) {
            pmOutput = '';

            _logger.default.debug(`Instrumentation target '${INSTRUMENTATION_TARGET}' is available`);

            isPmServiceAvailable = true;
          } else if (!pmError) {
            pmError = new Error('The instrumentation target is not listed by Package Manager');
          }
        }

        return isPmServiceAvailable;
      }, {
        waitMs: SERVICES_LAUNCH_TIMEOUT,
        intervalMs: 1000
      });
    } catch (err) {
      _logger.default.error(`Unable to find instrumentation target '${INSTRUMENTATION_TARGET}': ${(pmError || {}).message}`);

      if (pmOutput) {
        _logger.default.debug('Available targets:');

        for (const line of pmOutput.split('\n')) {
          _logger.default.debug(`    ${line.replace('instrumentation:', '')}`);
        }
      }
    }
  }

  async startSession(caps) {
    await this.cleanupAutomationLeftovers();

    if (caps.skipServerInstallation) {
      _logger.default.info(`'skipServerInstallation' is set. Attempting to use UIAutomator2 server from the device`);
    } else {
      _logger.default.info(`Starting UIAutomator2 server ${_appiumUiautomator2Server.version}`);

      _logger.default.info(`Using UIAutomator2 server from '${_appiumUiautomator2Server.SERVER_APK_PATH}' and test from '${_appiumUiautomator2Server.TEST_APK_PATH}'`);
    }

    const timeout = caps.uiautomator2ServerLaunchTimeout || SERVER_LAUNCH_TIMEOUT;
    const initStarted = process.hrtime();
    let retries = 0;
    const maxRetries = 2;
    const delayBetweenRetries = 3000;

    while (retries < maxRetries) {
      _logger.default.info(`Waiting up to ${timeout}ms for UiAutomator2 to be online...`);

      let didProcessExit = false;

      try {
        await this.startInstrumentationProcess(() => {
          didProcessExit = true;
        });
      } catch (e) {
        didProcessExit = true;
      }

      if (!didProcessExit) {
        try {
          await (0, _asyncbox.waitForCondition)(async () => {
            try {
              await this.jwproxy.command('/status', 'GET');
              return true;
            } catch (err) {
              if (didProcessExit) {
                return true;
              }

              return false;
            }
          }, {
            waitMs: timeout,
            intervalMs: 1000
          });
        } catch (err) {
          _logger.default.errorAndThrow(`The instrumentation process cannot be initialized within ${timeout}ms timeout. ` + 'Make sure the application under test does not crash and investigate the logcat output. ' + `You could also try to increase the value of 'uiautomator2ServerLaunchTimeout' capability. `);
        }
      }

      if (!didProcessExit) {
        break;
      }

      retries++;

      if (retries >= maxRetries) {
        _logger.default.errorAndThrow('The instrumentation process cannot be initialized. ' + 'Make sure the application under test does not crash and investigate the logcat output.');
      }

      _logger.default.warn(`The instrumentation process has been unexpectedly terminated. ` + `Retrying UiAutomator2 startup (#${retries} of ${maxRetries - 1})`);

      await this.cleanupAutomationLeftovers(true);
      await _bluebird.default.delay(delayBetweenRetries);
    }

    const [seconds, nanoseconds] = process.hrtime(initStarted);

    _logger.default.debug(`The initialization of the instrumentation process took ` + `${Math.ceil(seconds * 1000 + nanoseconds / 1000000)}ms`);

    await this.jwproxy.command('/session', 'POST', {
      desiredCapabilities: caps
    });
  }

  async startInstrumentationProcess(onExit = null) {
    const cmd = ['am', 'instrument', '-w'];

    if (this.disableWindowAnimation) {
      cmd.push('--no-window-animation');
    }

    cmd.push(INSTRUMENTATION_TARGET);
    const instrumentationProcess = this.adb.createSubProcess(['shell', ...cmd]);
    instrumentationProcess.on('output', (stdout, stderr) => {
      const output = _lodash.default.trim(stdout || stderr);

      if (output) {
        instrumentationLogger.debug(output);
      }
    });
    instrumentationProcess.on('exit', code => {
      instrumentationLogger.debug(`The process has exited with code ${code}`);

      if (_lodash.default.isFunction(onExit)) {
        onExit();
      }
    });
    await instrumentationProcess.start(3000);
  }

  async deleteSession() {
    _logger.default.debug('Deleting UiAutomator2 server session');

    try {
      await this.jwproxy.command('/', 'DELETE');
    } catch (err) {
      _logger.default.warn(`Did not get confirmation UiAutomator2 deleteSession worked; ` + `Error was: ${err}`);
    }
  }

  async cleanupAutomationLeftovers(strictCleanup = false) {
    _logger.default.debug(`Performing ${strictCleanup ? 'strict' : 'shallow'} cleanup of automation leftovers`);

    try {
      await this.adb.forceStop(SERVER_TEST_PACKAGE_ID);
    } catch (ignore) {}

    if (!strictCleanup) {
      return;
    }

    try {
      await this.adb.killProcessesByName('uiautomator');
    } catch (ignore) {}
  }

}

exports.UiAutomator2Server = UiAutomator2Server;
var _default = UiAutomator2Server;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91aWF1dG9tYXRvcjIuanMiXSwibmFtZXMiOlsiUkVRRF9QQVJBTVMiLCJTRVJWRVJfTEFVTkNIX1RJTUVPVVQiLCJTRVJWRVJfSU5TVEFMTF9SRVRSSUVTIiwiU0VSVklDRVNfTEFVTkNIX1RJTUVPVVQiLCJTRVJWRVJfUEFDS0FHRV9JRCIsIlNFUlZFUl9URVNUX1BBQ0tBR0VfSUQiLCJJTlNUUlVNRU5UQVRJT05fVEFSR0VUIiwiaW5zdHJ1bWVudGF0aW9uTG9nZ2VyIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiVWlBdXRvbWF0b3IyU2VydmVyIiwiY29uc3RydWN0b3IiLCJvcHRzIiwicmVxIiwidXRpbCIsImhhc1ZhbHVlIiwiRXJyb3IiLCJqd3Byb3h5IiwiSldQcm94eSIsInNlcnZlciIsImhvc3QiLCJwb3J0Iiwic3lzdGVtUG9ydCIsInByb3h5UmVxUmVzIiwiYmluZCIsImluc3RhbGxTZXJ2ZXJBcGsiLCJpbnN0YWxsVGltZW91dCIsInBhY2thZ2VzSW5mbyIsImFwcFBhdGgiLCJhcGtQYXRoIiwiYXBwSWQiLCJ0ZXN0QXBrUGF0aCIsInNob3VsZFVuaW5zdGFsbFNlcnZlclBhY2thZ2VzIiwic2hvdWxkSW5zdGFsbFNlcnZlclBhY2thZ2VzIiwiYWRiIiwiY2hlY2tBcGtDZXJ0Iiwic2lnbiIsImlzQXBwSW5zdGFsbGVkIiwiYXBwU3RhdGUiLCJnZXRBcHBsaWNhdGlvbkluc3RhbGxTdGF0ZSIsImxvZyIsImRlYnVnIiwiQVBQX0lOU1RBTExfU1RBVEUiLCJPTERFUl9WRVJTSU9OX0lOU1RBTExFRCIsIk5FV0VSX1ZFUlNJT05fSU5TVEFMTEVEIiwiaW5jbHVkZXMiLCJOT1RfSU5TVEFMTEVEIiwiaW5mbyIsInVuaW5zdGFsbEFwayIsImVyciIsIndhcm4iLCJtZXNzYWdlIiwiaW5zdGFsbCIsInJlcGxhY2UiLCJ0aW1lb3V0IiwidmVyaWZ5U2VydmljZXNBdmFpbGFiaWxpdHkiLCJpc1BtU2VydmljZUF2YWlsYWJsZSIsInBtT3V0cHV0IiwicG1FcnJvciIsInNoZWxsIiwiZSIsIndhaXRNcyIsImludGVydmFsTXMiLCJlcnJvciIsImxpbmUiLCJzcGxpdCIsInN0YXJ0U2Vzc2lvbiIsImNhcHMiLCJjbGVhbnVwQXV0b21hdGlvbkxlZnRvdmVycyIsInNraXBTZXJ2ZXJJbnN0YWxsYXRpb24iLCJzZXJ2ZXJWZXJzaW9uIiwidWlhdXRvbWF0b3IyU2VydmVyTGF1bmNoVGltZW91dCIsImluaXRTdGFydGVkIiwicHJvY2VzcyIsImhydGltZSIsInJldHJpZXMiLCJtYXhSZXRyaWVzIiwiZGVsYXlCZXR3ZWVuUmV0cmllcyIsImRpZFByb2Nlc3NFeGl0Iiwic3RhcnRJbnN0cnVtZW50YXRpb25Qcm9jZXNzIiwiY29tbWFuZCIsImVycm9yQW5kVGhyb3ciLCJCIiwiZGVsYXkiLCJzZWNvbmRzIiwibmFub3NlY29uZHMiLCJNYXRoIiwiY2VpbCIsImRlc2lyZWRDYXBhYmlsaXRpZXMiLCJvbkV4aXQiLCJjbWQiLCJkaXNhYmxlV2luZG93QW5pbWF0aW9uIiwicHVzaCIsImluc3RydW1lbnRhdGlvblByb2Nlc3MiLCJjcmVhdGVTdWJQcm9jZXNzIiwib24iLCJzdGRvdXQiLCJzdGRlcnIiLCJvdXRwdXQiLCJfIiwidHJpbSIsImNvZGUiLCJpc0Z1bmN0aW9uIiwic3RhcnQiLCJkZWxldGVTZXNzaW9uIiwic3RyaWN0Q2xlYW51cCIsImZvcmNlU3RvcCIsImlnbm9yZSIsImtpbGxQcm9jZXNzZXNCeU5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsV0FBVyxHQUFHLENBQUMsS0FBRCxFQUFRLFFBQVIsRUFBa0IsTUFBbEIsRUFBMEIsWUFBMUIsRUFBd0MsWUFBeEMsRUFBc0Qsd0JBQXRELENBQXBCO0FBQ0EsTUFBTUMscUJBQXFCLEdBQUcsS0FBOUI7QUFDQSxNQUFNQyxzQkFBc0IsR0FBRyxFQUEvQjtBQUNBLE1BQU1DLHVCQUF1QixHQUFHLEtB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QUFBLHFCQUFxQixDQUFDa0MsS0FBdEIsQ0FBNkIsb0NBQW1DNEQsSUFBSyxFQUFyRTs7QUFDQSxVQUFJRixnQkFBRUcsVUFBRixDQUFhYixNQUFiLENBQUosRUFBMEI7QUFDeEJBLFFBQUFBLE1BQU07QUFDUDtBQUNGLEtBTEQ7QUFNQSxVQUFNSSxzQkFBc0IsQ0FBQ1UsS0FBdkIsQ0FBNkIsSUFBN0IsQ0FBTjtBQUNEOztBQUVELFFBQU1DLGFBQU4sR0FBdUI7QUFDckJoRSxvQkFBSUMsS0FBSixDQUFVLHNDQUFWOztBQUdBLFFBQUk7QUFDRixZQUFNLEtBQUt4QixPQUFMLENBQWErRCxPQUFiLENBQXFCLEdBQXJCLEVBQTBCLFFBQTFCLENBQU47QUFDRCxLQUZELENBRUUsT0FBTy9CLEdBQVAsRUFBWTtBQUNaVCxzQkFBSVUsSUFBSixDQUFVLDhEQUFELEdBQ0osY0FBYUQsR0FBSSxFQUR0QjtBQUVEO0FBQ0Y7O0FBRUQsUUFBTW1CLDBCQUFOLENBQWtDcUMsYUFBYSxHQUFHLEtBQWxELEVBQXlEO0FBQ3ZEakUsb0JBQUlDLEtBQUosQ0FBVyxjQUFhZ0UsYUFBYSxHQUFHLFFBQUgsR0FBYyxTQUFVLGtDQUE3RDs7QUFDQSxRQUFJO0FBQ0YsWUFBTSxLQUFLdkUsR0FBTCxDQUFTd0UsU0FBVCxDQUFtQnJHLHNCQUFuQixDQUFOO0FBQ0QsS0FGRCxDQUVFLE9BQU9zRyxNQUFQLEVBQWUsQ0FBRTs7QUFDbkIsUUFBSSxDQUFDRixhQUFMLEVBQW9CO0FBQ2xCO0FBQ0Q7O0FBRUQsUUFBSTtBQUNGLFlBQU0sS0FBS3ZFLEdBQUwsQ0FBUzBFLG1CQUFULENBQTZCLGFBQTdCLENBQU47QUFDRCxLQUZELENBRUUsT0FBT0QsTUFBUCxFQUFlLENBQUU7QUFDcEI7O0FBOU9zQjs7O2VBa1BWakcsa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgSldQcm94eSB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgeyB3YWl0Rm9yQ29uZGl0aW9uIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBTRVJWRVJfQVBLX1BBVEggYXMgYXBrUGF0aCwgVEVTVF9BUEtfUEFUSCBhcyB0ZXN0QXBrUGF0aCwgdmVyc2lvbiBhcyBzZXJ2ZXJWZXJzaW9uIH0gZnJvbSAnYXBwaXVtLXVpYXV0b21hdG9yMi1zZXJ2ZXInO1xuaW1wb3J0IHsgdXRpbCwgbG9nZ2VyIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuXG5cbmNvbnN0IFJFUURfUEFSQU1TID0gWydhZGInLCAndG1wRGlyJywgJ2hvc3QnLCAnc3lzdGVtUG9ydCcsICdkZXZpY2VQb3J0JywgJ2Rpc2FibGVXaW5kb3dBbmltYXRpb24nXTtcbmNvbnN0IFNFUlZFUl9MQVVOQ0hfVElNRU9VVCA9IDMwMDAwO1xuY29uc3QgU0VSVkVSX0lOU1RBTExfUkVUUklFUyA9IDIwO1xuY29uc3QgU0VSVklDRVNfTEFVTkNIX1RJTUVPVVQgPSAzMDAwMDtcbmNvbnN0IFNFUlZFUl9QQUNLQUdFX0lEID0gJ2lvLmFwcGl1bS51aWF1dG9tYXRvcjIuc2VydmVyJztcbmNvbnN0IFNFUlZFUl9URVNUX1BBQ0tBR0VfSUQgPSBgJHtTRVJWRVJfUEFDS0FHRV9JRH0udGVzdGA7XG5jb25zdCBJTlNUUlVNRU5UQVRJT05fVEFSR0VUID0gYCR7U0VSVkVSX1RFU1RfUEFDS0FHRV9JRH0vYW5kcm9pZHgudGVzdC5ydW5uZXIuQW5kcm9pZEpVbml0UnVubmVyYDtcbmNvbnN0IGluc3RydW1lbnRhdGlvbkxvZ2dlciA9IGxvZ2dlci5nZXRMb2dnZXIoJ0luc3RydW1lbnRhdGlvbicpO1xuXG5jbGFzcyBVaUF1dG9tYXRvcjJTZXJ2ZXIge1xuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9KSB7XG4gICAgZm9yIChsZXQgcmVxIG9mIFJFUURfUEFSQU1TKSB7XG4gICAgICBpZiAoIW9wdHMgfHwgIXV0aWwuaGFzVmFsdWUob3B0c1tyZXFdKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE9wdGlvbiAnJHtyZXF9JyBpcyByZXF1aXJlZCFgKTtcbiAgICAgIH1cbiAgICAgIHRoaXNbcmVxXSA9IG9wdHNbcmVxXTtcbiAgICB9XG4gICAgdGhpcy5qd3Byb3h5ID0gbmV3IEpXUHJveHkoe3NlcnZlcjogdGhpcy5ob3N0LCBwb3J0OiB0aGlzLnN5c3RlbVBvcnR9KTtcbiAgICB0aGlzLnByb3h5UmVxUmVzID0gdGhpcy5qd3Byb3h5LnByb3h5UmVxUmVzLmJpbmQodGhpcy5qd3Byb3h5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnN0YWxscyB0aGUgYXBrcyBvbiB0byB0aGUgZGV2aWNlIG9yIGVtdWxhdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5zdGFsbFRpbWVvdXQgLSBJbnN0YWxsYXRpb24gdGltZW91dFxuICAgKi9cbiAgYXN5bmMgaW5zdGFsbFNlcnZlckFwayAoaW5zdGFsbFRpbWVvdXQgPSBTRVJWRVJfSU5TVEFMTF9SRVRSSUVTICogMTAwMCkge1xuICAgIGNvbnN0IHBhY2thZ2VzSW5mbyA9IFtcbiAgICAgIHtcbiAgICAgICAgYXBwUGF0aDogYXBrUGF0aCxcbiAgICAgICAgYXBwSWQ6IFNFUlZFUl9QQUNLQUdFX0lELFxuICAgICAgfSwge1xuICAgICAgICBhcHBQYXRoOiB0ZXN0QXBrUGF0aCxcbiAgICAgICAgYXBwSWQ6IFNFUlZFUl9URVNUX1BBQ0tBR0VfSUQsXG4gICAgICB9LFxuICAgIF07XG4gICAgbGV0IHNob3VsZFVuaW5zdGFsbFNlcnZlclBhY2thZ2VzID0gZmFsc2U7XG4gICAgbGV0IHNob3VsZEluc3RhbGxTZXJ2ZXJQYWNrYWdlcyA9IGZhbHNlO1xuICAgIGZvciAoY29uc3Qge2FwcElkLCBhcHBQYXRofSBvZiBwYWNrYWdlc0luZm8pIHtcbiAgICAgIGlmIChhcHBJZCA9PT0gU0VSVkVSX1RFU1RfUEFDS0FHRV9JRCkge1xuICAgICAgICAvLyBUaGVyZSBpcyBubyBwb2ludCBpbiBnZXR0aW5nIHRoZSBzdGF0ZSBmb3IgdGVzdCBzZXJ2ZXIsXG4gICAgICAgIC8vIHNpbmNlIGl0IGRvZXMgbm90IGNvbnRhaW4gdmVyc2lvbiBpbmZvXG4gICAgICAgIGlmICghYXdhaXQgdGhpcy5hZGIuY2hlY2tBcGtDZXJ0KGFwcFBhdGgsIGFwcElkKSkge1xuICAgICAgICAgIGF3YWl0IHRoaXMuYWRiLnNpZ24oYXBwUGF0aCk7XG4gICAgICAgICAgc2hvdWxkVW5pbnN0YWxsU2VydmVyUGFja2FnZXMgPSBzaG91bGRVbmluc3RhbGxTZXJ2ZXJQYWNrYWdlc1xuICAgICAgICAgICAgfHwgYXdhaXQgdGhpcy5hZGIuaXNBcHBJbnN0YWxsZWQoYXBwSWQpO1xuICAgICAgICAgIHNob3VsZEluc3RhbGxTZXJ2ZXJQYWNrYWdlcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFwcFN0YXRlID0gYXdhaXQgdGhpcy5hZGIuZ2V0QXBwbGljYXRpb25JbnN0YWxsU3RhdGUoYXBwUGF0aCwgYXBwSWQpO1xuICAgICAgbG9nLmRlYnVnKGAke2FwcElkfSBpbnN0YWxsYXRpb24gc3RhdGU6ICR7YXBwU3RhdGV9YCk7XG4gICAgICBpZiAoYXdhaXQgdGhpcy5hZGIuY2hlY2tBcGtDZXJ0KGFwcFBhdGgsIGFwcElkKSkge1xuICAgICAgICBzaG91bGRVbmluc3RhbGxTZXJ2ZXJQYWNrYWdlcyA9IHNob3VsZFVuaW5zdGFsbFNlcnZlclBhY2thZ2VzIHx8IFtcbiAgICAgICAgICB0aGlzLmFkYi5BUFBfSU5TVEFMTF9TVEFURS5PTERFUl9WRVJTSU9OX0lOU1RBTExFRCxcbiAgICAgICAgICB0aGlzLmFkYi5BUFBfSU5TVEFMTF9TVEFURS5ORVdFUl9WRVJTSU9OX0lOU1RBTExFRCxcbiAgICAgICAgXS5pbmNsdWRlcyhhcHBTdGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCB0aGlzLmFkYi5zaWduKGFwcFBhdGgpO1xuICAgICAgICBzaG91bGRVbmluc3RhbGxTZXJ2ZXJQYWNrYWdlcyA9IHNob3VsZFVuaW5zdGFsbFNlcnZlclBhY2thZ2VzIHx8ICFbXG4gICAgICAgICAgdGhpcy5hZGIuQVBQX0lOU1RBTExfU1RBVEUuTk9UX0lOU1RBTExFRCxcbiAgICAgICAgXS5pbmNsdWRlcyhhcHBTdGF0ZSk7XG4gICAgICB9XG4gICAgICBzaG91bGRJbnN0YWxsU2VydmVyUGFja2FnZXMgPSBzaG91bGRJbnN0YWxsU2VydmVyUGFja2FnZXMgfHwgc2hvdWxkVW5pbnN0YWxsU2VydmVyUGFja2FnZXMgfHwgW1xuICAgICAgICB0aGlzLmFkYi5BUFBfSU5TVEFMTF9TVEFURS5OT1RfSU5TVEFMTEVELFxuICAgICAgXS5pbmNsdWRlcyhhcHBTdGF0ZSk7XG4gICAgfVxuICAgIGxvZy5pbmZvKGBTZXJ2ZXIgcGFja2FnZXMgYXJlICR7c2hvdWxkSW5zdGFsbFNlcnZlclBhY2thZ2VzID8gJycgOiAnbm90ICd9Z29pbmcgdG8gYmUgKHJlKWluc3RhbGxlZGApO1xuICAgIGlmIChzaG91bGRJbnN0YWxsU2VydmVyUGFja2FnZXMgJiYgc2hvdWxkVW5pbnN0YWxsU2VydmVyUGFja2FnZXMpIHtcbiAgICAgIGxvZy5pbmZvKCdGdWxsIHBhY2thZ2VzIHJlaW5zdGFsbCBpcyBnb2luZyB0byBiZSBwZXJmb3JtZWQnKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCB7YXBwSWQsIGFwcFBhdGh9IG9mIHBhY2thZ2VzSW5mbykge1xuICAgICAgaWYgKHNob3VsZFVuaW5zdGFsbFNlcnZlclBhY2thZ2VzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5hZGIudW5pbnN0YWxsQXBrKGFwcElkKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgbG9nLndhcm4oYEVycm9yIHVuaW5zdGFsbGluZyAnJHthcHBJZH0nOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2hvdWxkSW5zdGFsbFNlcnZlclBhY2thZ2VzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYWRiLmluc3RhbGwoYXBwUGF0aCwge1xuICAgICAgICAgIHJlcGxhY2U6IGZhbHNlLFxuICAgICAgICAgIHRpbWVvdXQ6IGluc3RhbGxUaW1lb3V0LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLnZlcmlmeVNlcnZpY2VzQXZhaWxhYmlsaXR5KCk7XG4gIH1cblxuICBhc3luYyB2ZXJpZnlTZXJ2aWNlc0F2YWlsYWJpbGl0eSAoKSB7XG4gICAgbG9nLmRlYnVnKGBXYWl0aW5nIHVwIHRvICR7U0VSVklDRVNfTEFVTkNIX1RJTUVPVVR9bXMgZm9yIHNlcnZpY2VzIHRvIGJlIGF2YWlsYWJsZWApO1xuICAgIGxldCBpc1BtU2VydmljZUF2YWlsYWJsZSA9IGZhbHNlO1xuICAgIGxldCBwbU91dHB1dCA9ICcnO1xuICAgIGxldCBwbUVycm9yID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgd2FpdEZvckNvbmRpdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICghaXNQbVNlcnZpY2VBdmFpbGFibGUpIHtcbiAgICAgICAgICBwbUVycm9yID0gbnVsbDtcbiAgICAgICAgICBwbU91dHB1dCA9ICcnO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwbU91dHB1dCA9IGF3YWl0IHRoaXMuYWRiLnNoZWxsKFsncG0nLCAnbGlzdCcsICdpbnN0cnVtZW50YXRpb24nXSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcG1FcnJvciA9IGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwbU91dHB1dC5pbmNsdWRlcygnQ291bGQgbm90IGFjY2VzcyB0aGUgUGFja2FnZSBNYW5hZ2VyJykpIHtcbiAgICAgICAgICAgIHBtRXJyb3IgPSBuZXcgRXJyb3IoYFByb2JsZW0gcnVubmluZyBQYWNrYWdlIE1hbmFnZXI6ICR7cG1PdXRwdXR9YCk7XG4gICAgICAgICAgICBwbU91dHB1dCA9ICcnOyAvLyByZW1vdmUgb3V0cHV0LCBzbyBpdCBpcyBub3QgcHJpbnRlZCBiZWxvd1xuICAgICAgICAgIH0gZWxzZSBpZiAocG1PdXRwdXQuaW5jbHVkZXMoSU5TVFJVTUVOVEFUSU9OX1RBUkdFVCkpIHtcbiAgICAgICAgICAgIHBtT3V0cHV0ID0gJyc7IC8vIHJlbW92ZSBvdXRwdXQsIHNvIGl0IGlzIG5vdCBwcmludGVkIGJlbG93XG4gICAgICAgICAgICBsb2cuZGVidWcoYEluc3RydW1lbnRhdGlvbiB0YXJnZXQgJyR7SU5TVFJVTUVOVEFUSU9OX1RBUkdFVH0nIGlzIGF2YWlsYWJsZWApO1xuICAgICAgICAgICAgaXNQbVNlcnZpY2VBdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXBtRXJyb3IpIHtcbiAgICAgICAgICAgIHBtRXJyb3IgPSBuZXcgRXJyb3IoJ1RoZSBpbnN0cnVtZW50YXRpb24gdGFyZ2V0IGlzIG5vdCBsaXN0ZWQgYnkgUGFja2FnZSBNYW5hZ2VyJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc1BtU2VydmljZUF2YWlsYWJsZTtcbiAgICAgIH0sIHtcbiAgICAgICAgd2FpdE1zOiBTRVJWSUNFU19MQVVOQ0hfVElNRU9VVCxcbiAgICAgICAgaW50ZXJ2YWxNczogMTAwMCxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLmVycm9yKGBVbmFibGUgdG8gZmluZCBpbnN0cnVtZW50YXRpb24gdGFyZ2V0ICcke0lOU1RSVU1FTlRBVElPTl9UQVJHRVR9JzogJHsocG1FcnJvciB8fCB7fSkubWVzc2FnZX1gKTtcbiAgICAgIGlmIChwbU91dHB1dCkge1xuICAgICAgICBsb2cuZGVidWcoJ0F2YWlsYWJsZSB0YXJnZXRzOicpO1xuICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgcG1PdXRwdXQuc3BsaXQoJ1xcbicpKSB7XG4gICAgICAgICAgbG9nLmRlYnVnKGAgICAgJHtsaW5lLnJlcGxhY2UoJ2luc3RydW1lbnRhdGlvbjonLCAnJyl9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhc3luYyBzdGFydFNlc3Npb24gKGNhcHMpIHtcbiAgICBhd2FpdCB0aGlzLmNsZWFudXBBdXRvbWF0aW9uTGVmdG92ZXJzKCk7XG4gICAgaWYgKGNhcHMuc2tpcFNlcnZlckluc3RhbGxhdGlvbikge1xuICAgICAgbG9nLmluZm8oYCdza2lwU2VydmVySW5zdGFsbGF0aW9uJyBpcyBzZXQuIEF0dGVtcHRpbmcgdG8gdXNlIFVJQXV0b21hdG9yMiBzZXJ2ZXIgZnJvbSB0aGUgZGV2aWNlYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy5pbmZvKGBTdGFydGluZyBVSUF1dG9tYXRvcjIgc2VydmVyICR7c2VydmVyVmVyc2lvbn1gKTtcbiAgICAgIGxvZy5pbmZvKGBVc2luZyBVSUF1dG9tYXRvcjIgc2VydmVyIGZyb20gJyR7YXBrUGF0aH0nIGFuZCB0ZXN0IGZyb20gJyR7dGVzdEFwa1BhdGh9J2ApO1xuICAgIH1cblxuICAgIGNvbnN0IHRpbWVvdXQgPSBjYXBzLnVpYXV0b21hdG9yMlNlcnZlckxhdW5jaFRpbWVvdXQgfHwgU0VSVkVSX0xBVU5DSF9USU1FT1VUO1xuICAgIGNvbnN0IGluaXRTdGFydGVkID0gcHJvY2Vzcy5ocnRpbWUoKTtcbiAgICBsZXQgcmV0cmllcyA9IDA7XG4gICAgY29uc3QgbWF4UmV0cmllcyA9IDI7XG4gICAgY29uc3QgZGVsYXlCZXR3ZWVuUmV0cmllcyA9IDMwMDA7XG4gICAgd2hpbGUgKHJldHJpZXMgPCBtYXhSZXRyaWVzKSB7XG4gICAgICBsb2cuaW5mbyhgV2FpdGluZyB1cCB0byAke3RpbWVvdXR9bXMgZm9yIFVpQXV0b21hdG9yMiB0byBiZSBvbmxpbmUuLi5gKTtcbiAgICAgIGxldCBkaWRQcm9jZXNzRXhpdCA9IGZhbHNlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5zdGFydEluc3RydW1lbnRhdGlvblByb2Nlc3MoKCkgPT4ge1xuICAgICAgICAgIGRpZFByb2Nlc3NFeGl0ID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGRpZFByb2Nlc3NFeGl0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICghZGlkUHJvY2Vzc0V4aXQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCB3YWl0Rm9yQ29uZGl0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMuandwcm94eS5jb21tYW5kKCcvc3RhdHVzJywgJ0dFVCcpO1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICBpZiAoZGlkUHJvY2Vzc0V4aXQpIHtcbiAgICAgICAgICAgICAgICAvLyBzaG9ydCBjaXJjdWl0IHRvIHJldHJ5IG9yIGZhaWwgZmFzdFxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICB3YWl0TXM6IHRpbWVvdXQsXG4gICAgICAgICAgICBpbnRlcnZhbE1zOiAxMDAwLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgVGhlIGluc3RydW1lbnRhdGlvbiBwcm9jZXNzIGNhbm5vdCBiZSBpbml0aWFsaXplZCB3aXRoaW4gJHt0aW1lb3V0fW1zIHRpbWVvdXQuIGBcbiAgICAgICAgICAgICsgJ01ha2Ugc3VyZSB0aGUgYXBwbGljYXRpb24gdW5kZXIgdGVzdCBkb2VzIG5vdCBjcmFzaCBhbmQgaW52ZXN0aWdhdGUgdGhlIGxvZ2NhdCBvdXRwdXQuICdcbiAgICAgICAgICAgICsgYFlvdSBjb3VsZCBhbHNvIHRyeSB0byBpbmNyZWFzZSB0aGUgdmFsdWUgb2YgJ3VpYXV0b21hdG9yMlNlcnZlckxhdW5jaFRpbWVvdXQnIGNhcGFiaWxpdHkuIGApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWRpZFByb2Nlc3NFeGl0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXRyaWVzKys7XG4gICAgICBpZiAocmV0cmllcyA+PSBtYXhSZXRyaWVzKSB7XG4gICAgICAgIGxvZy5lcnJvckFuZFRocm93KCdUaGUgaW5zdHJ1bWVudGF0aW9uIHByb2Nlc3MgY2Fubm90IGJlIGluaXRpYWxpemVkLiAnXG4gICAgICAgICAgKyAnTWFrZSBzdXJlIHRoZSBhcHBsaWNhdGlvbiB1bmRlciB0ZXN0IGRvZXMgbm90IGNyYXNoIGFuZCBpbnZlc3RpZ2F0ZSB0aGUgbG9nY2F0IG91dHB1dC4nKTtcbiAgICAgIH1cbiAgICAgIGxvZy53YXJuKGBUaGUgaW5zdHJ1bWVudGF0aW9uIHByb2Nlc3MgaGFzIGJlZW4gdW5leHBlY3RlZGx5IHRlcm1pbmF0ZWQuIGBcbiAgICAgICAgKyBgUmV0cnlpbmcgVWlBdXRvbWF0b3IyIHN0YXJ0dXAgKCMke3JldHJpZXN9IG9mICR7bWF4UmV0cmllcyAtIDF9KWApO1xuICAgICAgYXdhaXQgdGhpcy5jbGVhbnVwQXV0b21hdGlvbkxlZnRvdmVycyh0cnVlKTtcbiAgICAgIGF3YWl0IEIuZGVsYXkoZGVsYXlCZXR3ZWVuUmV0cmllcyk7XG4gICAgfVxuXG4gICAgY29uc3QgW3NlY29uZHMsIG5hbm9zZWNvbmRzXSA9IHByb2Nlc3MuaHJ0aW1lKGluaXRTdGFydGVkKTtcbiAgICBsb2cuZGVidWcoYFRoZSBpbml0aWFsaXphdGlvbiBvZiB0aGUgaW5zdHJ1bWVudGF0aW9uIHByb2Nlc3MgdG9vayBgXG4gICAgICArIGAke01hdGguY2VpbChzZWNvbmRzICogMTAwMCArIG5hbm9zZWNvbmRzIC8gMTAwMDAwMCl9bXNgKTtcbiAgICBhd2FpdCB0aGlzLmp3cHJveHkuY29tbWFuZCgnL3Nlc3Npb24nLCAnUE9TVCcsIHtkZXNpcmVkQ2FwYWJpbGl0aWVzOiBjYXBzfSk7XG4gIH1cblxuICBhc3luYyBzdGFydEluc3RydW1lbnRhdGlvblByb2Nlc3MgKG9uRXhpdCA9IG51bGwpIHtcbiAgICBjb25zdCBjbWQgPSBbJ2FtJywgJ2luc3RydW1lbnQnLCAnLXcnXTtcbiAgICBpZiAodGhpcy5kaXNhYmxlV2luZG93QW5pbWF0aW9uKSB7XG4gICAgICBjbWQucHVzaCgnLS1uby13aW5kb3ctYW5pbWF0aW9uJyk7XG4gICAgfVxuICAgIGNtZC5wdXNoKElOU1RSVU1FTlRBVElPTl9UQVJHRVQpO1xuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvblByb2Nlc3MgPSB0aGlzLmFkYi5jcmVhdGVTdWJQcm9jZXNzKFsnc2hlbGwnLCAuLi5jbWRdKTtcbiAgICBpbnN0cnVtZW50YXRpb25Qcm9jZXNzLm9uKCdvdXRwdXQnLCAoc3Rkb3V0LCBzdGRlcnIpID0+IHtcbiAgICAgIGNvbnN0IG91dHB1dCA9IF8udHJpbShzdGRvdXQgfHwgc3RkZXJyKTtcbiAgICAgIGlmIChvdXRwdXQpIHtcbiAgICAgICAgaW5zdHJ1bWVudGF0aW9uTG9nZ2VyLmRlYnVnKG91dHB1dCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaW5zdHJ1bWVudGF0aW9uUHJvY2Vzcy5vbignZXhpdCcsIChjb2RlKSA9PiB7XG4gICAgICBpbnN0cnVtZW50YXRpb25Mb2dnZXIuZGVidWcoYFRoZSBwcm9jZXNzIGhhcyBleGl0ZWQgd2l0aCBjb2RlICR7Y29kZX1gKTtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24ob25FeGl0KSkge1xuICAgICAgICBvbkV4aXQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBhd2FpdCBpbnN0cnVtZW50YXRpb25Qcm9jZXNzLnN0YXJ0KDMwMDApO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlU2Vzc2lvbiAoKSB7XG4gICAgbG9nLmRlYnVnKCdEZWxldGluZyBVaUF1dG9tYXRvcjIgc2VydmVyIHNlc3Npb24nKTtcbiAgICAvLyByZWx5IG9uIGp3cHJveHkncyBpbnRlbGxpZ2VuY2UgdG8ga25vdyB3aGF0IHdlJ3JlIHRhbGtpbmcgYWJvdXQgYW5kXG4gICAgLy8gZGVsZXRlIHRoZSBjdXJyZW50IHNlc3Npb25cbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5qd3Byb3h5LmNvbW1hbmQoJy8nLCAnREVMRVRFJyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cud2FybihgRGlkIG5vdCBnZXQgY29uZmlybWF0aW9uIFVpQXV0b21hdG9yMiBkZWxldGVTZXNzaW9uIHdvcmtlZDsgYCArXG4gICAgICAgICAgYEVycm9yIHdhczogJHtlcnJ9YCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY2xlYW51cEF1dG9tYXRpb25MZWZ0b3ZlcnMgKHN0cmljdENsZWFudXAgPSBmYWxzZSkge1xuICAgIGxvZy5kZWJ1ZyhgUGVyZm9ybWluZyAke3N0cmljdENsZWFudXAgPyAnc3RyaWN0JyA6ICdzaGFsbG93J30gY2xlYW51cCBvZiBhdXRvbWF0aW9uIGxlZnRvdmVyc2ApO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmFkYi5mb3JjZVN0b3AoU0VSVkVSX1RFU1RfUEFDS0FHRV9JRCk7XG4gICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuICAgIGlmICghc3RyaWN0Q2xlYW51cCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS9pc3N1ZXMvMTA3NDlcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5hZGIua2lsbFByb2Nlc3Nlc0J5TmFtZSgndWlhdXRvbWF0b3InKTtcbiAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gIH1cbn1cblxuZXhwb3J0IHsgVWlBdXRvbWF0b3IyU2VydmVyLCBJTlNUUlVNRU5UQVRJT05fVEFSR0VUIH07XG5leHBvcnQgZGVmYXVsdCBVaUF1dG9tYXRvcjJTZXJ2ZXI7XG4iXSwiZmlsZSI6ImxpYi91aWF1dG9tYXRvcjIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
