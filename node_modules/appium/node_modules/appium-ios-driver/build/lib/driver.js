"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.defaultServerCaps = exports.IosDriver = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var utils = _interopRequireWildcard(require("./utils"));

var _logger = _interopRequireDefault(require("./logger"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _appiumIosSimulator = require("appium-ios-simulator");

var _uiauto = require("./uiauto/uiauto");

var _instruments = require("./instruments");

var _asyncbox = require("asyncbox");

var _index = _interopRequireDefault(require("./commands/index"));

var _desiredCaps = require("./desired-caps");

var _nodeIdevice = _interopRequireDefault(require("node-idevice"));

var _safari = require("./commands/safari");

var _safariLauncher = require("./safari-launcher");

var _settings = require("./settings");

var _device = require("./device");

var _iwdp = require("./iwdp");

let iDevice = function (...args) {
  let device = (0, _nodeIdevice.default)(...args);
  let promisified = {};

  for (let m of ['install', 'installAndWait', 'remove', 'isInstalled']) {
    promisified[m] = _bluebird.default.promisify(device[m].bind(device));
  }

  return promisified;
};

const defaultServerCaps = {
  webStorageEnabled: false,
  locationContextEnabled: false,
  browserName: '',
  platform: 'MAC',
  javascriptEnabled: true,
  databaseEnabled: false,
  takesScreenshot: true,
  networkConnectionEnabled: false
};
exports.defaultServerCaps = defaultServerCaps;
const LOG_LOCATIONS = [_path.default.resolve('/', 'Library', 'Caches', 'com.apple.dt.instruments')];

if (process.env.HOME) {
  LOG_LOCATIONS.push(_path.default.resolve(process.env.HOME, 'Library', 'Logs', 'CoreSimulator'));
}

class IosDriver extends _appiumBaseDriver.BaseDriver {
  resetIos() {
    this.appExt = '.app';
    this.xcodeVersion = null;
    this.iosSdkVersion = null;
    this.logs = {};
    this.instruments = null;
    this.uiAutoClient = null;

    this.onInstrumentsDie = function () {};

    this.stopping = false;
    this.cbForCurrentCmd = null;
    this.remote = null;
    this.curContext = null;
    this.curWebFrames = [];
    this.selectingNewPage = false;
    this.windowHandleCache = [];
    this.webElementIds = [];
    this.implicitWaitMs = 0;
    this.asynclibWaitMs = 0;
    this.pageLoadMs = 6000;
    this.asynclibResponseCb = null;
    this.returnedFromExecuteAtom = {};
    this.executedAtomsCounter = 0;
    this.curCoords = null;
    this.curWebCoords = null;
    this.landscapeWebCoordsOffset = 0;
    this.keepAppToRetainPrefs = false;
    this.ready = false;
    this.asyncWaitMs = 0;
    this.settings = new _appiumBaseDriver.DeviceSettings({}, _lodash.default.noop);
    this.locatorStrategies = ['xpath', 'id', 'class name', '-ios uiautomation', 'accessibility id'];
    this.webLocatorStrategies = ['link text', 'css selector', 'tag name', 'partial link text'];
  }

  constructor(opts, shouldValidateCaps) {
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.desiredCapConstraints;
    this.resetIos();
    this.getDevicePixelRatio = _lodash.default.memoize(this.getDevicePixelRatio);
  }

  validateLocatorStrategy(strategy) {
    super.validateLocatorStrategy(strategy, this.isWebContext());
  }

  async start() {
    if (this.isRealDevice()) {
      await this.startRealDevice();
    } else {
      await this.startSimulator();
    }

    this.ready = true;
  }

  async createSession(...args) {
    let [sessionId, caps] = await super.createSession(...args);
    this.xcodeVersion = await utils.getAndCheckXcodeVersion(this.opts);

    _logger.default.debug(`Xcode version set to ${this.xcodeVersion.versionString}`);

    if (this.xcodeVersion.major >= 8) {
      let msg = `Appium's IosDriver does not support Xcode version ${this.xcodeVersion.versionString}. ` + 'Apple has deprecated UIAutomation. Use the "XCUITest" automationName capability instead.';

      _logger.default.errorAndThrow(new _appiumBaseDriver.errors.SessionNotCreatedError(msg));
    }

    this.caps = Object.assign({}, defaultServerCaps, this.caps);
    this.caps.desired = caps;
    await utils.detectUdid(this.opts);
    await utils.prepareIosOpts(this.opts);
    this.realDevice = null;
    this.useRobot = this.opts.useRobot;
    this.safari = this.opts.safari;
    this.opts.curOrientation = this.opts.initialOrientation;
    this.sock = _path.default.resolve(this.opts.tmpDir || '/tmp', 'instruments_sock');

    try {
      await this.configureApp();
    } catch (err) {
      _logger.default.error(`Bad app: '${this.opts.app}'. App paths need to ` + `be absolute, or relative to the appium server ` + `install dir, or a URL to compressed file, or a ` + `special app name.`);

      throw err;
    }

    await this.start();
    this.startNewCommandTimeout('createSession');
    return [sessionId, this.caps];
  }

  async stop() {
    this.ready = false;

    if (this.uiAutoClient) {
      await this.uiAutoClient.shutdown();
    }

    if (this.instruments) {
      try {
        await this.instruments.shutdown();
      } catch (err) {
        _logger.default.error(`Instruments didn't shut down. ${err}`);
      }
    }

    if (this.caps && this.caps.customSSLCert && !this.isRealDevice()) {
      _logger.default.debug(`Uninstalling ssl certificate for udid '${this.sim.udid}'`);

      await (0, _appiumIosSimulator.uninstallSSLCert)(this.caps.customSSLCert, this.sim.udid);
    }

    if (this.opts.enableAsyncExecuteFromHttps && !this.isRealDevice()) {
      await this.stopHttpsAsyncServer();
    }

    this.uiAutoClient = null;
    this.instruments = null;
    this.realDevice = null;
    this.curCoords = null;
    this.opts.curOrientation = null;

    if (!_lodash.default.isEmpty(this.logs)) {
      await this.logs.syslog.stopCapture();
      this.logs = {};
    }

    if (this.remote) {
      await this.stopRemote();
    }

    await this.stopIWDP();
  }

  async deleteSession() {
    _logger.default.debug('Deleting ios session');

    await this.stop();

    if (this.opts.clearSystemFiles) {
      await utils.clearLogs(LOG_LOCATIONS);
    } else {
      _logger.default.debug('Not clearing log files. Use `clearSystemFiles` capability to turn on.');
    }

    if (this.isRealDevice()) {
      await (0, _device.runRealDeviceReset)(this.realDevice, this.opts);
    } else {
      await (0, _device.runSimulatorReset)(this.sim, this.opts, this.keepAppToRetainPrefs);
    }

    await super.deleteSession();
  }

  async getSession() {
    let caps = await super.getSession();
    const viewportRect = await this.getViewportRect();
    const pixelRatio = await this.getDevicePixelRatio();
    const statBarHeight = await this.getStatusBarHeight();
    caps.viewportRect = viewportRect;
    caps.pixelRatio = pixelRatio;
    caps.statBarHeight = statBarHeight;
    return caps;
  }

  async executeCommand(cmd, ...args) {
    _logger.default.debug(`Executing iOS command '${cmd}'`);

    if (cmd === 'receiveAsyncResponse') {
      return await this.receiveAsyncResponse(...args);
    } else if (this.ready || _lodash.default.includes(['launchApp'], cmd)) {
      return await super.executeCommand(cmd, ...args);
    }

    throw new _appiumBaseDriver.errors.NoSuchDriverError(`Driver is not ready, cannot execute ${cmd}.`);
  }

  async configureApp() {
    try {
      if (!this.opts.bundleId && utils.appIsPackageOrBundle(this.opts.app)) {
        this.opts.bundleId = this.opts.app;
      }

      if (this.opts.app && this.opts.app.toLowerCase() === 'settings') {
        if (parseFloat(this.opts.platformVersion) >= 8) {
          _logger.default.debug('We are on iOS8+ so not copying preferences app');

          this.opts.bundleId = 'com.apple.Preferences';
          this.opts.app = null;
        }
      } else if (this.opts.app && this.opts.app.toLowerCase() === 'calendar') {
        if (parseFloat(this.opts.platformVersion) >= 8) {
          _logger.default.debug('We are on iOS8+ so not copying calendar app');

          this.opts.bundleId = 'com.apple.mobilecal';
          this.opts.app = null;
        }
      } else if (this.isSafari()) {
        if (!this.isRealDevice()) {
          if (parseFloat(this.opts.platformVersion) >= 8) {
            _logger.default.debug('We are on iOS8+ so not copying Safari app');

            this.opts.bundleId = _safari.SAFARI_BUNDLE;
            this.opts.app = null;
          }
        } else {
          if (!(await this.realDevice.isInstalled(this.opts.bundleId))) {
            if (await (0, _safariLauncher.needsInstall)()) {
              _logger.default.debug('SafariLauncher not found, building...');

              await (0, _safariLauncher.install)();
            }

            this.opts.bundleId = _safariLauncher.SAFARI_LAUNCHER_BUNDLE;
          }
        }
      } else if (this.opts.bundleId && utils.appIsPackageOrBundle(this.opts.bundleId) && (this.opts.app === '' || utils.appIsPackageOrBundle(this.opts.app))) {
        _logger.default.debug('App is an iOS bundle, will attempt to run as pre-existing');
      } else {
        this.opts.app = await this.helpers.configureApp(this.opts.app, '.app');
      }
    } catch (err) {
      _logger.default.error(err);

      throw new Error(`Bad app: ${this.opts.app}. App paths need to be absolute, or relative to the appium ` + 'server install dir, or a URL to compressed file, or a special app name.');
    }
  }

  async startSimulator() {
    await utils.removeInstrumentsSocket(this.sock);

    if (!this.xcodeVersion) {
      _logger.default.debug('Setting Xcode version');

      this.xcodeVersion = await utils.getAndCheckXcodeVersion(this.opts);

      _logger.default.debug(`Xcode version set to ${this.xcodeVersion.versionString}`);
    }

    _logger.default.debug('Setting iOS SDK Version');

    this.iosSdkVersion = await utils.getAndCheckIosSdkVersion();

    _logger.default.debug(`iOS SDK Version set to ${this.iosSdkVersion}`);

    let timeout = _lodash.default.isObject(this.opts.launchTimeout) ? this.opts.launchTimeout.global : this.opts.launchTimeout;
    let availableDevices = await (0, _asyncbox.retry)(3, _instruments.instrumentsUtils.getAvailableDevices, timeout);
    let iosSimUdid = await (0, _device.checkSimulatorAvailable)(this.opts, this.iosSdkVersion, availableDevices);
    this.sim = await (0, _appiumIosSimulator.getSimulator)(iosSimUdid, this.xcodeVersion.versionString);
    await (0, _device.moveBuiltInApp)(this.sim);
    this.opts.localizableStrings = await utils.parseLocalizableStrings(this.opts);
    await utils.setBundleIdFromApp(this.opts);
    await this.createInstruments();
    {
      this.shouldPrelaunchSimulator = utils.shouldPrelaunchSimulator(this.opts, this.iosSdkVersion);
      let dString = await (0, _device.getAdjustedDeviceName)(this.opts);

      if (this.caps.app) {
        await utils.setDeviceTypeInInfoPlist(this.opts.app, dString);
      }
    }
    await (0, _device.runSimulatorReset)(this.sim, this.opts, this.keepAppToRetainPrefs);

    if (this.caps.customSSLCert && !this.isRealDevice()) {
      await (0, _appiumIosSimulator.installSSLCert)(this.caps.customSSLCert, this.sim.udid);
    }

    if (this.opts.enableAsyncExecuteFromHttps && !this.isRealDevice()) {
      await this.startHttpsAsyncServer();
    }

    await (0, _device.isolateSimulatorDevice)(this.sim, this.opts);
    this.localConfig = await (0, _settings.setLocaleAndPreferences)(this.sim, this.opts, this.isSafari(), _device.endSimulator);
    await this.setUpLogCapture();
    await this.prelaunchSimulator();
    await this.startInstruments();
    await this.onInstrumentsLaunch();
    await this.configureBootstrap();
    await this.setBundleId();
    await this.setInitialOrientation();
    await this.initAutoWebview();
    await this.waitForAppLaunched();
  }

  async startRealDevice() {
    await utils.removeInstrumentsSocket(this.sock);
    this.opts.localizableStrings = await utils.parseLocalizableStrings(this.opts);
    await utils.setBundleIdFromApp(this.opts);
    await this.createInstruments();
    await (0, _device.runRealDeviceReset)(this.realDevice, this.opts);
    await this.setUpLogCapture();
    await this.installToRealDevice();
    await this.startInstruments();
    await this.onInstrumentsLaunch();
    await this.configureBootstrap();
    await this.setBundleId();
    await this.setInitialOrientation();
    await this.initAutoWebview();
    await this.waitForAppLaunched();
  }

  async installToRealDevice() {
    if (this.opts.autoLaunch === false) {
      return;
    }

    if (this.opts.app) {
      let ext = this.opts.app.substring(this.opts.app.length - 3).toLowerCase();

      if (ext === 'ipa') {
        this.opts.ipa = this.opts.app;
      }
    }

    if (this.opts.udid) {
      if (await this.realDevice.isInstalled(this.opts.bundleId)) {
        _logger.default.debug('App is installed.');

        if (this.opts.fullReset) {
          _logger.default.debug('fullReset requested. Forcing app install.');
        } else {
          _logger.default.debug('fullReset not requested. No need to install.');

          return;
        }
      } else {
        _logger.default.debug('App is not installed. Will try to install.');
      }

      if (this.opts.ipa && this.opts.bundleId) {
        await this.installIpa();

        _logger.default.debug('App installed.');
      } else if (this.opts.ipa) {
        let msg = 'You specified a UDID and ipa but did not include the bundle id';

        _logger.default.warn(msg);

        throw new _appiumBaseDriver.errors.UnknownError(msg);
      } else if (this.opts.app) {
        await this.realDevice.install(this.opts.app);

        _logger.default.debug('App installed.');
      } else {
        _logger.default.debug('Real device specified but no ipa or app path, assuming bundle ID is ' + 'on device');
      }
    } else {
      _logger.default.debug('No device id or app, not installing to real device.');
    }
  }

  getIDeviceObj() {
    let idiPath = _path.default.resolve(__dirname, '../../../build/', 'libimobiledevice-macosx/ideviceinstaller');

    _logger.default.debug(`Creating iDevice object with udid ${this.opts.udid}`);

    try {
      return iDevice(this.opts.udid);
    } catch (e1) {
      _logger.default.debug(`Couldn't find ideviceinstaller, trying built-in at ${idiPath}`);

      try {
        return iDevice(this.opts.udid, {
          cmd: idiPath
        });
      } catch (e2) {
        let msg = 'Could not initialize ideviceinstaller; make sure it is ' + 'installed and works on your system';

        _logger.default.error(msg);

        throw new Error(msg);
      }
    }
  }

  async installIpa() {
    _logger.default.debug(`Installing ipa found at ${this.opts.ipa}`);

    if (await this.realDevice.isInstalled(this.opts.bundleId)) {
      _logger.default.debug('Bundle found on device, removing before reinstalling.');

      await this.realDevice.remove(this.opts.bundleId);
    } else {
      _logger.default.debug('Nothing found on device, going ahead and installing.');
    }

    await this.realDevice.installAndWait(this.opts.ipa, this.opts.bundleId);
  }

  validateDesiredCaps(caps) {
    let res = super.validateDesiredCaps(caps);
    if (!res) return res;
    return (0, _desiredCaps.desiredCapValidation)(caps);
  }

  async prelaunchSimulator() {
    if (!this.shouldPrelaunchSimulator) {
      _logger.default.debug('Not pre-launching simulator');

      return;
    }

    await (0, _device.endSimulator)(this.sim);
  }

  async onInstrumentsLaunch() {
    _logger.default.debug('Instruments launched. Starting poll loop for new commands.');

    if (this.opts.origAppPath) {
      _logger.default.debug('Copying app back to its original place');

      return await _appiumSupport.fs.copyFile(this.opts.app, this.opts.origAppPath);
    }
  }

  async setBundleId() {
    if (this.opts.bundleId) {
      return;
    } else {
      let bId = await this.uiAutoClient.sendCommand('au.bundleId()');

      _logger.default.debug(`Bundle ID for open app is ${bId.value}`);

      this.opts.bundleId = bId.value;
    }
  }

  async startIWDP() {
    if (this.opts.startIWDP) {
      this.iwdpServer = new _iwdp.IWDP({
        webkitDebugProxyPort: this.opts.webkitDebugProxyPort,
        udid: this.opts.udid,
        logStdout: !!this.opts.showIWDPLog
      });
      await this.iwdpServer.start();
    }
  }

  async stopIWDP() {
    if (this.iwdpServer) {
      await this.iwdpServer.stop();
      delete this.iwdpServer;
    }
  }

  async setInitialOrientation() {
    if (_lodash.default.isString(this.opts.initialOrientation) && _lodash.default.includes(['LANDSCAPE', 'PORTRAIT'], this.opts.initialOrientation.toUpperCase())) {
      _logger.default.debug(`Setting initial orientation to ${this.opts.initialOrientation}`);

      let command = `au.setScreenOrientation('${this.opts.initialOrientation.toUpperCase()}')`;

      try {
        await this.uiAutoClient.sendCommand(command);
        this.opts.curOrientation = this.opts.initialOrientation;
      } catch (err) {
        _logger.default.warn(`Setting initial orientation failed with: ${err}`);
      }
    }
  }

  isRealDevice() {
    return !!this.opts.udid;
  }

  isSafari() {
    return this.opts.safari;
  }

  async waitForAppLaunched() {
    let condFn;

    if (this.opts.waitForAppScript) {
      _logger.default.debug(`Using custom script to wait for app start: ${this.opts.waitForAppScript}`);

      condFn = async () => {
        let res;

        try {
          res = await this.uiAutoClient.sendCommand(`try{\n${this.opts.waitForAppScript}` + `\n} catch(err) { $.log("waitForAppScript err: " + error); false; };`);
        } catch (err) {
          _logger.default.debug(`Cannot eval waitForAppScript script, err: ${err}`);

          return false;
        }

        if (typeof res !== 'boolean') {
          _logger.default.debug('Unexpected return type in waitForAppScript script');

          return false;
        }

        return res;
      };
    } else if (this.isSafari()) {
      if (this.isRealDevice()) {
        await this.clickButtonToLaunchSafari();
      }

      _logger.default.debug('Waiting for initial webview');

      await this.navToInitialWebview();

      condFn = async () => true;
    } else {
      _logger.default.debug('Waiting for app source to contain elements');

      condFn = async () => {
        try {
          let source = await this.getSourceForElementForXML();
          source = JSON.parse(source || '{}');
          let appEls = (source.UIAApplication || {})['>'];
          return appEls && appEls.length > 0 && !IosDriver.isSpringBoard(source.UIAApplication);
        } catch (e) {
          _logger.default.warn(`Couldn't extract app element from source, error was: ${e}`);

          return false;
        }
      };
    }

    try {
      await (0, _asyncbox.waitForCondition)(condFn, {
        logger: _logger.default,
        waitMs: 10000,
        intervalMs: 500
      });
    } catch (err) {
      if (err.message && err.message.match(/Condition unmet/)) {
        _logger.default.warn('Initial spin timed out, continuing but the app might not be ready.');

        _logger.default.debug(`Initial spin error was: ${err}`);
      } else {
        throw err;
      }
    }
  }

  static isSpringBoard(uiAppObj) {
    return _lodash.default.propertyOf(uiAppObj['@'])('name') === 'SpringBoard';
  }

  async createInstruments() {
    _logger.default.debug('Creating instruments');

    this.uiAutoClient = new _uiauto.UIAutoClient(this.sock);
    this.instruments = await this.makeInstruments();
    this.instruments.onShutdown.catch(async () => {
      await this.startUnexpectedShutdown(new _appiumBaseDriver.errors.UnknownError('Abnormal Instruments termination!'));
    }).done();
  }

  shouldIgnoreInstrumentsExit() {
    return this.safari && this.isRealDevice();
  }

  async makeInstruments() {
    let bootstrapPath = await (0, _uiauto.prepareBootstrap)({
      sock: this.sock,
      interKeyDelay: this.opts.interKeyDelay,
      justLoopInfinitely: false,
      autoAcceptAlerts: this.opts.autoAcceptAlerts,
      autoDismissAlerts: this.opts.autoDismissAlerts,
      sendKeyStrategy: this.opts.sendKeyStrategy || (this.isRealDevice() ? 'grouped' : 'oneByOne')
    });
    let instruments = new _instruments.Instruments({
      app: (!this.isRealDevice() ? this.opts.app : null) || this.opts.bundleId,
      udid: this.opts.udid,
      processArguments: this.opts.processArguments,
      ignoreStartupExit: this.shouldIgnoreInstrumentsExit(),
      bootstrap: bootstrapPath,
      template: this.opts.automationTraceTemplatePath,
      instrumentsPath: this.opts.instrumentsPath,
      withoutDelay: this.opts.withoutDelay,
      platformVersion: this.opts.platformVersion,
      webSocket: this.opts.webSocket,
      launchTimeout: this.opts.launchTimeout,
      flakeyRetries: this.opts.backendRetries,
      realDevice: this.isRealDevice(),
      simulatorSdkAndDevice: this.iosSdkVersion >= 7.1 ? await (0, _device.getAdjustedDeviceName)(this.opts) : null,
      tmpDir: _path.default.resolve(this.opts.tmpDir || '/tmp', 'appium-instruments'),
      traceDir: this.opts.traceDir,
      locale: this.opts.locale,
      language: this.opts.language
    });
    return instruments;
  }

  async startInstruments() {
    _logger.default.debug('Starting UIAutoClient, and launching Instruments.');

    await _bluebird.default.all([this.uiAutoClient.start().then(() => {
      this.instruments.registerLaunch();
    }), this.instruments.launch()]);
  }

  async configureBootstrap() {
    _logger.default.debug('Setting bootstrap config keys/values');

    let isVerbose = true;
    let cmd = 'target = $.target();\n';
    cmd += 'au = $;\n';
    cmd += `$.isVerbose = ${isVerbose};\n`;
    await this.uiAutoClient.sendCommand(cmd);
  }

  async getSourceForElementForXML(ctx) {
    let source;

    if (!ctx) {
      source = await this.uiAutoClient.sendCommand('au.mainApp().getTreeForXML()');
    } else {
      source = await this.uiAutoClient.sendCommand(`au.getElement('${ctx}').getTreeForXML()`);
    }

    if (source) {
      return JSON.stringify(source);
    } else {
      throw new Error(`Bad response from getTreeForXML. res was ${JSON.stringify(source)}`);
    }
  }

  async setUpLogCapture() {
    if (this.caps.skipLogCapture) {
      _logger.default.info("'skipLogCapture' is set. Skipping the collection of system logs and crash reports.");

      return;
    }

    if (this.isRealDevice()) {
      await this.startLogCapture();
    } else {
      await this.startLogCapture(this.sim);
    }
  }

  get realDevice() {
    this._realDevice = this._realDevice || this.getIDeviceObj();
    return this._realDevice;
  }

  set realDevice(rd) {
    this._realDevice = rd;
  }

}

exports.IosDriver = IosDriver;

for (let [cmd, fn] of _lodash.default.toPairs(_index.default)) {
  IosDriver.prototype[cmd] = fn;
}

var _default = IosDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
