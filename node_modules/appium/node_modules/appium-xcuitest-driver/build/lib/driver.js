"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XCUITestDriver = exports.default = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

var _url = _interopRequireDefault(require("url"));

var _nodeSimctl = require("node-simctl");

var _webdriveragent = _interopRequireDefault(require("./wda/webdriveragent"));

var _logger = _interopRequireDefault(require("./logger"));

var _simulatorManagement = require("./simulator-management");

var _appiumIosSimulator = require("appium-ios-simulator");

var _asyncbox = require("asyncbox");

var _appiumIosDriver = require("appium-ios-driver");

var _desiredCaps = _interopRequireDefault(require("./desired-caps"));

var _index = _interopRequireDefault(require("./commands/index"));

var _utils = require("./utils");

var _realDeviceManagement = require("./real-device-management");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _asyncLock = _interopRequireDefault(require("async-lock"));

const SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';
const WDA_SIM_STARTUP_RETRIES = 2;
const WDA_REAL_DEV_STARTUP_RETRIES = 1;
const WDA_REAL_DEV_TUTORIAL_URL = 'https://github.com/appium/appium-xcuitest-driver/blob/master/docs/real-device-config.md';
const WDA_STARTUP_RETRY_INTERVAL = 10000;
const DEFAULT_SETTINGS = {
  nativeWebTap: false,
  useJSONSource: false,
  shouldUseCompactResponses: true,
  elementResponseAttributes: 'type,label',
  mjpegServerScreenshotQuality: 25,
  mjpegServerFramerate: 10,
  screenshotQuality: 1
};
const SHARED_RESOURCES_GUARD = new _asyncLock.default();
const NO_PROXY_NATIVE_LIST = [['DELETE', /window/], ['GET', /^\/session\/[^\/]+$/], ['GET', /alert_text/], ['GET', /alert\/[^\/]+/], ['GET', /appium/], ['GET', /attribute/], ['GET', /context/], ['GET', /location/], ['GET', /log/], ['GET', /screenshot/], ['GET', /size/], ['GET', /source/], ['GET', /url/], ['GET', /window/], ['POST', /accept_alert/], ['POST', /actions$/], ['POST', /alert_text/], ['POST', /alert\/[^\/]+/], ['POST', /appium/], ['POST', /appium\/device\/is_locked/], ['POST', /appium\/device\/lock/], ['POST', /appium\/device\/unlock/], ['POST', /back/], ['POST', /clear/], ['POST', /context/], ['POST', /dismiss_alert/], ['POST', /element$/], ['POST', /elements$/], ['POST', /execute/], ['POST', /keys/], ['POST', /log/], ['POST', /moveto/], ['POST', /receive_async_response/], ['POST', /session\/[^\/]+\/location/], ['POST', /shake/], ['POST', /timeouts/], ['POST', /touch/], ['POST', /url/], ['POST', /value/], ['POST', /window/]];
const NO_PROXY_WEB_LIST = [['DELETE', /cookie/], ['GET', /attribute/], ['GET', /cookie/], ['GET', /element/], ['GET', /text/], ['GET', /title/], ['POST', /clear/], ['POST', /click/], ['POST', /cookie/], ['POST', /element/], ['POST', /forward/], ['POST', /frame/], ['POST', /keys/], ['POST', /refresh/]].concat(NO_PROXY_NATIVE_LIST);
const MEMOIZED_FUNCTIONS = ['getWindowSizeNative', 'getWindowSizeWeb', 'getStatusBarHeight', 'getDevicePixelRatio', 'getScreenInfo', 'getSafariIsIphone', 'getSafariIsIphoneX'];

class XCUITestDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.default;
    this.locatorStrategies = ['xpath', 'id', 'name', 'class name', '-ios predicate string', '-ios class chain', 'accessibility id'];
    this.webLocatorStrategies = ['link text', 'css selector', 'tag name', 'link text', 'partial link text'];
    this.resetIos();
    this.settings = new _appiumBaseDriver.DeviceSettings(DEFAULT_SETTINGS, this.onSettingsUpdate.bind(this));

    for (const fn of MEMOIZED_FUNCTIONS) {
      this[fn] = _lodash.default.memoize(this[fn]);
    }
  }

  async onSettingsUpdate(key, value) {
    if (key !== 'nativeWebTap') {
      return await this.proxyCommand('/appium/settings', 'POST', {
        settings: {
          [key]: value
        }
      });
    }

    this.opts.nativeWebTap = !!value;
  }

  resetIos() {
    this.opts = this.opts || {};
    this.wda = null;
    this.opts.device = null;
    this.jwpProxyActive = false;
    this.proxyReqRes = null;
    this.jwpProxyAvoid = [];
    this.safari = false;
    this.cachedWdaStatus = null;
    this.curWebFrames = [];
    this.webElementIds = [];
    this._currentUrl = null;
    this.curContext = null;
    this.xcodeVersion = {};
    this.iosSdkVersion = null;
    this.contexts = [];
    this.implicitWaitMs = 0;
    this.asynclibWaitMs = 0;
    this.pageLoadMs = 6000;
    this.landscapeWebCoordsOffset = 0;
  }

  get driverData() {
    return {};
  }

  async getStatus() {
    if (typeof this.driverInfo === 'undefined') {
      this.driverInfo = await (0, _utils.getDriverInfo)();
    }

    let status = {
      build: {
        version: this.driverInfo.version
      }
    };

    if (this.cachedWdaStatus) {
      status.wda = this.cachedWdaStatus;
    }

    return status;
  }

  async createSession(...args) {
    this.lifecycleData = {};

    try {
      let [sessionId, caps] = await super.createSession(...args);
      this.opts.sessionId = sessionId;
      await this.start();
      caps = Object.assign({}, _appiumIosDriver.defaultServerCaps, caps);
      caps.udid = this.opts.udid;

      if (_lodash.default.has(this.opts, 'nativeWebTap')) {
        await this.updateSettings({
          nativeWebTap: this.opts.nativeWebTap
        });
      }

      if (_lodash.default.has(this.opts, 'useJSONSource')) {
        await this.updateSettings({
          useJSONSource: this.opts.useJSONSource
        });
      }

      let wdaSettings = {
        elementResponseAttributes: DEFAULT_SETTINGS.elementResponseAttributes,
        shouldUseCompactResponses: DEFAULT_SETTINGS.shouldUseCompactResponses
      };

      if (_lodash.default.has(this.opts, 'elementResponseAttributes')) {
        wdaSettings.elementResponseAttributes = this.opts.elementResponseAttributes;
      }

      if (_lodash.default.has(this.opts, 'shouldUseCompactResponses')) {
        wdaSettings.shouldUseCompactResponses = this.opts.shouldUseCompactResponses;
      }

      if (_lodash.default.has(this.opts, 'mjpegServerScreenshotQuality')) {
        wdaSettings.mjpegServerScreenshotQuality = this.opts.mjpegServerScreenshotQuality;
      }

      if (_lodash.default.has(this.opts, 'mjpegServerFramerate')) {
        wdaSettings.mjpegServerFramerate = this.opts.mjpegServerFramerate;
      }

      if (this.opts.screenshotQuality) {
        _logger.default.info(`Setting the quality of phone screenshot: '${this.opts.screenshotQuality}'`);

        wdaSettings.screenshotQuality = this.opts.screenshotQuality;
      }

      await this.updateSettings(wdaSettings);

      if (this.opts.mjpegScreenshotUrl) {
        _logger.default.info(`Starting MJPEG stream reading URL: '${this.opts.mjpegScreenshotUrl}'`);

        this.mjpegStream = new _appiumSupport.mjpeg.MJpegStream(this.opts.mjpegScreenshotUrl);
        await this.mjpegStream.start();
      }

      return [sessionId, caps];
    } catch (e) {
      _logger.default.error(e);

      await this.deleteSession();
      throw e;
    }
  }

  async start() {
    this.opts.noReset = !!this.opts.noReset;
    this.opts.fullReset = !!this.opts.fullReset;
    await (0, _utils.printUser)();

    if (this.opts.platformVersion && parseFloat(this.opts.platformVersion) < 9.3) {
      throw Error(`Platform version must be 9.3 or above. '${this.opts.platformVersion}' is not supported.`);
    }

    const {
      device,
      udid,
      realDevice
    } = await this.determineDevice();

    _logger.default.info(`Determining device to run tests on: udid: '${udid}', real device: ${realDevice}`);

    this.opts.device = device;
    this.opts.udid = udid;
    this.opts.realDevice = realDevice;

    if (_lodash.default.isEmpty(this.xcodeVersion) && (!this.opts.webDriverAgentUrl || !this.opts.realDevice)) {
      this.xcodeVersion = await (0, _utils.getAndCheckXcodeVersion)();
      const tools = !this.xcodeVersion.toolsVersion ? '' : `(tools v${this.xcodeVersion.toolsVersion})`;

      _logger.default.debug(`Xcode version set to '${this.xcodeVersion.versionString}' ${tools}`);

      this.iosSdkVersion = await (0, _utils.getAndCheckIosSdkVersion)();

      _logger.default.debug(`iOS SDK Version set to '${this.iosSdkVersion}'`);
    }

    this.logEvent('xcodeDetailsRetrieved');

    if (this.opts.enableAsyncExecuteFromHttps && !this.isRealDevice()) {
      await (0, _simulatorManagement.shutdownSimulator)(this.opts.device);
      await this.startHttpsAsyncServer();
    }

    if (!this.opts.platformVersion) {
      if (this.opts.device && _lodash.default.isFunction(this.opts.device.getPlatformVersion)) {
        this.opts.platformVersion = await this.opts.device.getPlatformVersion();

        _logger.default.info(`No platformVersion specified. Using device version: '${this.opts.platformVersion}'`);
      } else {}
    }

    if (!this.opts.webDriverAgentUrl && this.iosSdkVersion) {
      if (parseFloat(this.opts.platformVersion) > parseFloat(this.iosSdkVersion)) {
        let msg = `Xcode ${this.xcodeVersion.versionString} has a maximum SDK version of ${this.iosSdkVersion}. ` + `It does not support iOS version ${this.opts.platformVersion}`;

        _logger.default.errorAndThrow(msg);
      }
    } else {
      _logger.default.debug('Xcode version will not be validated against iOS SDK version.');
    }

    if ((this.opts.browserName || '').toLowerCase() === 'safari') {
      _logger.default.info('Safari test requested');

      this.safari = true;
      this.opts.app = undefined;
      this.opts.processArguments = this.opts.processArguments || {};
      this.opts.bundleId = SAFARI_BUNDLE_ID;
      this._currentUrl = this.opts.safariInitialUrl || (this.isRealDevice() ? 'http://appium.io' : `http://${this.opts.address}:${this.opts.port}/welcome`);
      this.opts.processArguments.args = ['-u', this._currentUrl];
    } else {
      await this.configureApp();
    }

    this.logEvent('appConfigured');

    if (this.opts.app) {
      await (0, _utils.checkAppPresent)(this.opts.app);
    }

    if (!this.opts.bundleId) {
      this.opts.bundleId = await _appiumIosDriver.appUtils.extractBundleId(this.opts.app);
    }

    await this.runReset();

    const startLogCapture = async () => {
      const result = await this.startLogCapture();

      if (result) {
        this.logEvent('logCaptureStarted');
      }

      return result;
    };

    const isLogCaptureStarted = await startLogCapture();

    _logger.default.info(`Setting up ${this.isRealDevice() ? 'real device' : 'simulator'}`);

    if (this.isSimulator()) {
      if (this.opts.shutdownOtherSimulators) {
        if (!this.relaxedSecurityEnabled) {
          _logger.default.errorAndThrow(`Appium server must have relaxed security flag set in order ` + `for 'shutdownOtherSimulators' capability to work`);
        }

        await (0, _simulatorManagement.shutdownOtherSimulators)(this.opts.device);
      }

      if (_appiumSupport.util.hasValue(this.opts.reduceMotion)) {
        await this.opts.device.setReduceMotion(this.opts.reduceMotion);
      }

      this.localConfig = await _appiumIosDriver.settings.setLocaleAndPreferences(this.opts.device, this.opts, this.isSafari(), async sim => {
        await (0, _simulatorManagement.shutdownSimulator)(sim);
        await _appiumIosDriver.settings.setLocaleAndPreferences(sim, this.opts, this.isSafari());
      });
      await this.startSim();

      if (this.opts.customSSLCert) {
        if (await (0, _appiumIosSimulator.hasSSLCert)(this.opts.customSSLCert, this.opts.udid)) {
          _logger.default.info(`SSL cert '${_lodash.default.truncate(this.opts.customSSLCert, {
            length: 20
          })}' already installed`);
        } else {
          _logger.default.info(`Installing ssl cert '${_lodash.default.truncate(this.opts.customSSLCert, {
            length: 20
          })}'`);

          await (0, _simulatorManagement.shutdownSimulator)(this.opts.device);
          await (0, _appiumIosSimulator.installSSLCert)(this.opts.customSSLCert, this.opts.udid);

          _logger.default.info(`Restarting Simulator so that SSL certificate installation takes effect`);

          await this.startSim();
          this.logEvent('customCertInstalled');
        }
      }

      this.logEvent('simStarted');

      if (!isLogCaptureStarted) {
        await startLogCapture();
      }
    }

    if (this.opts.app) {
      await this.installAUT();
      this.logEvent('appInstalled');
    }

    if (!this.opts.app && this.opts.bundleId && !this.safari) {
      if (!(await this.opts.device.isAppInstalled(this.opts.bundleId))) {
        _logger.default.errorAndThrow(`App with bundle identifier '${this.opts.bundleId}' unknown`);
      }
    }

    if (this.opts.permissions) {
      if (this.isSimulator()) {
        _logger.default.debug('Setting the requested permissions before WDA is started');

        for (const [bundleId, permissionsMapping] of _lodash.default.toPairs(JSON.parse(this.opts.permissions))) {
          await this.opts.device.setPermissions(bundleId, permissionsMapping);
        }
      } else {
        _logger.default.warn('Setting permissions is only supported on Simulator. ' + 'The "permissions" capability will be ignored.');
      }
    }

    await SHARED_RESOURCES_GUARD.acquire(XCUITestDriver.name, async () => await this.startWda(this.opts.sessionId, realDevice));
    await this.setInitialOrientation(this.opts.orientation);
    this.logEvent('orientationSet');

    if (this.isRealDevice() && this.opts.startIWDP) {
      try {
        await this.startIWDP();

        _logger.default.debug(`Started ios_webkit_debug proxy server at: ${this.iwdpServer.endpoint}`);
      } catch (err) {
        _logger.default.errorAndThrow(`Could not start ios_webkit_debug_proxy server: ${err.message}`);
      }
    }

    if (this.isSafari() || this.opts.autoWebview) {
      _logger.default.debug('Waiting for initial webview');

      await this.navToInitialWebview();
      this.logEvent('initialWebviewNavigated');
    }

    if (!this.isRealDevice()) {
      if (this.opts.calendarAccessAuthorized) {
        await this.opts.device.enableCalendarAccess(this.opts.bundleId);
      } else if (this.opts.calendarAccessAuthorized === false) {
        await this.opts.device.disableCalendarAccess(this.opts.bundleId);
      }
    }
  }

  async startWda(sessionId, realDevice) {
    this.wda = new _webdriveragent.default(this.xcodeVersion, this.opts);
    await this.wda.cleanupObsoleteProcesses();

    if (this.opts.useNewWDA) {
      _logger.default.debug(`Capability 'useNewWDA' set to true, so uninstalling WDA before proceeding`);

      await this.wda.quitAndUninstall();
      this.logEvent('wdaUninstalled');
    } else if (!_appiumSupport.util.hasValue(this.wda.webDriverAgentUrl)) {
      await this.wda.setupCaching(this.opts.updatedWDABundleId);
    }

    const quitAndUninstall = async msg => {
      _logger.default.debug(msg);

      if (this.opts.webDriverAgentUrl) {
        _logger.default.debug('Not quitting and unsinstalling WebDriverAgent as webDriverAgentUrl is provided');

        throw new Error(msg);
      }

      _logger.default.warn('Quitting and uninstalling WebDriverAgent, then retrying');

      await this.wda.quitAndUninstall();
      throw new Error(msg);
    };

    const startupRetries = this.opts.wdaStartupRetries || (this.isRealDevice() ? WDA_REAL_DEV_STARTUP_RETRIES : WDA_SIM_STARTUP_RETRIES);
    const startupRetryInterval = this.opts.wdaStartupRetryInterval || WDA_STARTUP_RETRY_INTERVAL;

    _logger.default.debug(`Trying to start WebDriverAgent ${startupRetries} times with ${startupRetryInterval}ms interval`);

    await (0, _asyncbox.retryInterval)(startupRetries, startupRetryInterval, async () => {
      this.logEvent('wdaStartAttempted');

      try {
        const retries = this.xcodeVersion.major >= 10 ? 2 : 1;
        this.cachedWdaStatus = await (0, _asyncbox.retry)(retries, this.wda.launch.bind(this.wda), sessionId, realDevice);
      } catch (err) {
        this.logEvent('wdaStartFailed');
        let errorMsg = `Unable to launch WebDriverAgent because of xcodebuild failure: "${err.message}".`;

        if (this.isRealDevice()) {
          errorMsg += ` Make sure you follow the tutorial at ${WDA_REAL_DEV_TUTORIAL_URL}. ` + `Try to remove the WebDriverAgentRunner application from the device if it is installed ` + `and reboot the device.`;
        }

        await quitAndUninstall(errorMsg);
      }

      this.proxyReqRes = this.wda.proxyReqRes.bind(this.wda);
      this.jwpProxyActive = true;

      try {
        await (0, _asyncbox.retryInterval)(15, 1000, async () => {
          this.logEvent('wdaSessionAttempted');

          _logger.default.debug('Sending createSession command to WDA');

          try {
            this.cachedWdaStatus = this.cachedWdaStatus || (await this.proxyCommand('/status', 'GET'));
            await this.startWdaSession(this.opts.bundleId, this.opts.processArguments);
          } catch (err) {
            _logger.default.debug(`Failed to create WDA session (${err.message}). Retrying...`);

            throw err;
          }
        });
        this.logEvent('wdaSessionStarted');
      } catch (err) {
        let errorMsg = `Unable to start WebDriverAgent session because of xcodebuild failure: ${err.message}`;

        if (this.isRealDevice()) {
          errorMsg += ` Make sure you follow the tutorial at ${WDA_REAL_DEV_TUTORIAL_URL}. ` + `Try to remove the WebDriverAgentRunner application from the device if it is installed ` + `and reboot the device.`;
        }

        await quitAndUninstall(errorMsg);
      }

      if (!_appiumSupport.util.hasValue(this.opts.preventWDAAttachments)) {
        this.opts.preventWDAAttachments = this.xcodeVersion.major < 9;

        if (this.opts.preventWDAAttachments) {
          _logger.default.info('Enabled WDA attachments prevention by default to save the disk space. ' + `Set 'preventWDAAttachments' capability to false if this is an undesired behavior.`);
        }
      }

      if (this.opts.preventWDAAttachments) {
        await (0, _utils.adjustWDAAttachmentsPermissions)(this.wda, this.opts.preventWDAAttachments ? '555' : '755');
        this.logEvent('wdaPermsAdjusted');
      }

      if (this.opts.clearSystemFiles) {
        await (0, _utils.markSystemFilesForCleanup)(this.wda);
      }

      this.wda.fullyStarted = true;
      this.logEvent('wdaStarted');
    });
  }

  async runReset(opts = null) {
    this.logEvent('resetStarted');

    if (this.isRealDevice()) {
      await (0, _realDeviceManagement.runRealDeviceReset)(this.opts.device, opts || this.opts);
    } else {
      await (0, _simulatorManagement.runSimulatorReset)(this.opts.device, opts || this.opts);
    }

    this.logEvent('resetComplete');
  }

  async deleteSession() {
    await (0, _utils.removeAllSessionWebSocketHandlers)(this.server, this.sessionId);
    await SHARED_RESOURCES_GUARD.acquire(XCUITestDriver.name, async () => {
      await this.stop();

      if (this.opts.preventWDAAttachments) {
        await (0, _utils.adjustWDAAttachmentsPermissions)(this.wda, '755');
      }

      if (this.opts.clearSystemFiles) {
        if (this.isAppTemporary) {
          await _appiumSupport.fs.rimraf(this.opts.app);
        }

        await (0, _utils.clearSystemFiles)(this.wda, !!this.opts.showXcodeLog);
      } else {
        _logger.default.debug('Not clearing log files. Use `clearSystemFiles` capability to turn on.');
      }
    });

    if (this.isWebContext()) {
      _logger.default.debug('In a web session. Removing remote debugger');

      await this.stopRemote();
    }

    if (this.opts.resetOnSessionStartOnly === false) {
      await this.runReset();
    }

    if (this.isSimulator() && !this.opts.noReset && !!this.opts.device) {
      if (this.lifecycleData.createSim) {
        _logger.default.debug(`Deleting simulator created for this run (udid: '${this.opts.udid}')`);

        await (0, _simulatorManagement.shutdownSimulator)(this.opts.device);
        await this.opts.device.delete();
      }
    }

    if (!_lodash.default.isEmpty(this.logs)) {
      await this.logs.syslog.stopCapture();
      this.logs = {};
    }

    if (this.iwdpServer) {
      await this.stopIWDP();
    }

    if (this.opts.enableAsyncExecuteFromHttps && !this.isRealDevice()) {
      await this.stopHttpsAsyncServer();
    }

    if (this.mjpegStream) {
      _logger.default.info('Closing MJPEG stream');

      this.mjpegStream.stop();
    }

    this.resetIos();
    await super.deleteSession();
  }

  async stop() {
    this.jwpProxyActive = false;
    this.proxyReqRes = null;

    if (this.wda && this.wda.fullyStarted) {
      if (this.wda.jwproxy) {
        try {
          await this.proxyCommand(`/session/${this.sessionId}`, 'DELETE');
        } catch (err) {
          _logger.default.debug(`Unable to DELETE session on WDA: '${err.message}'. Continuing shutdown.`);
        }
      }

      if (this.wda && !this.wda.webDriverAgentUrl && this.opts.useNewWDA) {
        await this.wda.quit();
      }
    }
  }

  async executeCommand(cmd, ...args) {
    _logger.default.debug(`Executing command '${cmd}'`);

    if (cmd === 'receiveAsyncResponse') {
      return await this.receiveAsyncResponse(...args);
    }

    if (cmd === 'getStatus') {
      return await this.getStatus();
    }

    return await super.executeCommand(cmd, ...args);
  }

  async configureApp() {
    function appIsPackageOrBundle(app) {
      return /^([a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+)+$/.test(app);
    }

    if (!this.opts.bundleId && appIsPackageOrBundle(this.opts.app)) {
      this.opts.bundleId = this.opts.app;
      this.opts.app = '';
    }

    if (this.opts.bundleId && appIsPackageOrBundle(this.opts.bundleId) && (this.opts.app === '' || appIsPackageOrBundle(this.opts.app))) {
      _logger.default.debug('App is an iOS bundle, will attempt to run as pre-existing');

      return;
    }

    if (this.opts.app && this.opts.app.toLowerCase() === 'settings') {
      this.opts.bundleId = 'com.apple.Preferences';
      this.opts.app = null;
      return;
    } else if (this.opts.app && this.opts.app.toLowerCase() === 'calendar') {
      this.opts.bundleId = 'com.apple.mobilecal';
      this.opts.app = null;
      return;
    }

    const originalAppPath = this.opts.app;

    try {
      this.opts.app = await this.helpers.configureApp(this.opts.app, '.app');
    } catch (err) {
      _logger.default.error(err);

      throw new Error(`Bad app: ${this.opts.app}. App paths need to be absolute or an URL to a compressed file`);
    }

    this.isAppTemporary = this.opts.app && (await _appiumSupport.fs.exists(this.opts.app)) && !(await _appiumSupport.util.isSameDestination(originalAppPath, this.opts.app));
  }

  async determineDevice() {
    this.lifecycleData.createSim = false;
    this.opts.deviceName = (0, _utils.translateDeviceName)(this.opts.platformVersion, this.opts.deviceName);

    if (this.opts.udid) {
      if (this.opts.udid.toLowerCase() === 'auto') {
        try {
          this.opts.udid = await (0, _utils.detectUdid)();
        } catch (err) {
          _logger.default.warn(`Cannot detect any connected real devices. Falling back to Simulator. Original error: ${err.message}`);

          const device = await (0, _simulatorManagement.getExistingSim)(this.opts);

          if (!device) {
            _logger.default.errorAndThrow(`Cannot detect udid for ${this.opts.deviceName} Simulator running iOS ${this.opts.platformVersion}`);
          }

          this.opts.udid = device.udid;
          return {
            device,
            realDevice: false,
            udid: device.udid
          };
        }
      } else {
        const devices = await (0, _realDeviceManagement.getConnectedDevices)();

        _logger.default.debug(`Available devices: ${devices.join(', ')}`);

        if (!devices.includes(this.opts.udid)) {
          if (await (0, _appiumIosSimulator.simExists)(this.opts.udid)) {
            const device = await (0, _appiumIosSimulator.getSimulator)(this.opts.udid);
            return {
              device,
              realDevice: false,
              udid: this.opts.udid
            };
          }

          throw new Error(`Unknown device or simulator UDID: '${this.opts.udid}'`);
        }
      }

      const device = await (0, _realDeviceManagement.getRealDeviceObj)(this.opts.udid);
      return {
        device,
        realDevice: true,
        udid: this.opts.udid
      };
    }

    let device = await (0, _simulatorManagement.getExistingSim)(this.opts);

    if (device) {
      return {
        device,
        realDevice: false,
        udid: device.udid
      };
    }

    _logger.default.info('Simulator udid not provided, using desired caps to create a new simulator');

    if (!this.opts.platformVersion && this.iosSdkVersion) {
      _logger.default.info(`No platformVersion specified. Using latest version Xcode supports: '${this.iosSdkVersion}' ` + `This may cause problems if a simulator does not exist for this platform version.`);

      this.opts.platformVersion = this.iosSdkVersion;
    }

    if (this.opts.noReset) {
      let device = await (0, _simulatorManagement.getExistingSim)(this.opts);

      if (device) {
        return {
          device,
          realDevice: false,
          udid: device.udid
        };
      }
    }

    device = await this.createSim();
    return {
      device,
      realDevice: false,
      udid: device.udid
    };
  }

  async startSim() {
    const runOpts = {
      scaleFactor: this.opts.scaleFactor,
      connectHardwareKeyboard: !!this.opts.connectHardwareKeyboard,
      isHeadless: !!this.opts.isHeadless,
      devicePreferences: {}
    };

    if (this.opts.SimulatorWindowCenter) {
      runOpts.devicePreferences.SimulatorWindowCenter = this.opts.SimulatorWindowCenter;
    }

    const orientation = _lodash.default.isString(this.opts.orientation) && this.opts.orientation.toUpperCase();

    switch (orientation) {
      case 'LANDSCAPE':
        runOpts.devicePreferences.SimulatorWindowOrientation = 'LandscapeLeft';
        runOpts.devicePreferences.SimulatorWindowRotationAngle = 90;
        break;

      case 'PORTRAIT':
        runOpts.devicePreferences.SimulatorWindowOrientation = 'Portrait';
        runOpts.devicePreferences.SimulatorWindowRotationAngle = 0;
        break;
    }

    await this.opts.device.run(runOpts);
  }

  async createSim() {
    this.lifecycleData.createSim = true;
    let sim = await (0, _simulatorManagement.createSim)(this.opts);

    _logger.default.info(`Created simulator with udid '${sim.udid}'.`);

    return sim;
  }

  async launchApp() {
    const APP_LAUNCH_TIMEOUT = 20 * 1000;
    this.logEvent('appLaunchAttempted');
    await (0, _nodeSimctl.launch)(this.opts.device.udid, this.opts.bundleId);

    let checkStatus = async () => {
      let response = await this.proxyCommand('/status', 'GET');
      let currentApp = response.currentApp.bundleID;

      if (currentApp !== this.opts.bundleId) {
        throw new Error(`${this.opts.bundleId} not in foreground. ${currentApp} is in foreground`);
      }
    };

    _logger.default.info(`Waiting for '${this.opts.bundleId}' to be in foreground`);

    let retries = parseInt(APP_LAUNCH_TIMEOUT / 200, 10);
    await (0, _asyncbox.retryInterval)(retries, 200, checkStatus);

    _logger.default.info(`${this.opts.bundleId} is in foreground`);

    this.logEvent('appLaunched');
  }

  async startWdaSession(bundleId, processArguments) {
    let args = processArguments ? processArguments.args || [] : [];

    if (!_lodash.default.isArray(args)) {
      throw new Error(`processArguments.args capability is expected to be an array. ` + `${JSON.stringify(args)} is given instead`);
    }

    let env = processArguments ? processArguments.env || {} : {};

    if (!_lodash.default.isPlainObject(env)) {
      throw new Error(`processArguments.env capability is expected to be a dictionary. ` + `${JSON.stringify(env)} is given instead`);
    }

    let shouldWaitForQuiescence = _appiumSupport.util.hasValue(this.opts.waitForQuiescence) ? this.opts.waitForQuiescence : true;
    let maxTypingFrequency = _appiumSupport.util.hasValue(this.opts.maxTypingFrequency) ? this.opts.maxTypingFrequency : 60;
    let shouldUseSingletonTestManager = _appiumSupport.util.hasValue(this.opts.shouldUseSingletonTestManager) ? this.opts.shouldUseSingletonTestManager : true;
    let shouldUseTestManagerForVisibilityDetection = false;

    if (_appiumSupport.util.hasValue(this.opts.simpleIsVisibleCheck)) {
      shouldUseTestManagerForVisibilityDetection = this.opts.simpleIsVisibleCheck;
    }

    if (!isNaN(parseFloat(this.opts.platformVersion)) && parseFloat(this.opts.platformVersion).toFixed(1) === '9.3') {
      _logger.default.info(`Forcing shouldUseSingletonTestManager capability value to true, because of known XCTest issues under 9.3 platform version`);

      shouldUseTestManagerForVisibilityDetection = true;
    }

    if (_appiumSupport.util.hasValue(this.opts.language)) {
      args.push('-AppleLanguages', `(${this.opts.language})`);
      args.push('-NSLanguages', `(${this.opts.language})`);
    }

    if (_appiumSupport.util.hasValue(this.opts.locale)) {
      args.push('-AppleLocale', this.opts.locale);
    }

    let desired = {
      desiredCapabilities: {
        bundleId,
        arguments: args,
        environment: env,
        shouldWaitForQuiescence,
        shouldUseTestManagerForVisibilityDetection,
        maxTypingFrequency,
        shouldUseSingletonTestManager
      }
    };

    if (_appiumSupport.util.hasValue(this.opts.shouldUseCompactResponses)) {
      desired.desiredCapabilities.shouldUseCompactResponses = this.opts.shouldUseCompactResponses;
    }

    if (_appiumSupport.util.hasValue(this.opts.elementResponseFields)) {
      desired.desiredCapabilities.elementResponseFields = this.opts.elementResponseFields;
    }

    if (this.opts.autoAcceptAlerts) {
      desired.desiredCapabilities.defaultAlertAction = 'accept';
    } else if (this.opts.autoDismissAlerts) {
      desired.desiredCapabilities.defaultAlertAction = 'dismiss';
    }

    await this.proxyCommand('/session', 'POST', desired);
  }

  proxyActive() {
    return this.jwpProxyActive;
  }

  getProxyAvoidList() {
    if (this.isWebview()) {
      return NO_PROXY_WEB_LIST;
    }

    return NO_PROXY_NATIVE_LIST;
  }

  canProxy() {
    return true;
  }

  isSafari() {
    return !!this.safari;
  }

  isRealDevice() {
    return this.opts.realDevice;
  }

  isSimulator() {
    return !this.opts.realDevice;
  }

  isWebview() {
    return this.isSafari() || this.isWebContext();
  }

  validateLocatorStrategy(strategy) {
    super.validateLocatorStrategy(strategy, this.isWebContext());
  }

  validateDesiredCaps(caps) {
    if (!super.validateDesiredCaps(caps)) {
      return false;
    }

    if ((caps.browserName || '').toLowerCase() !== 'safari' && !caps.app && !caps.bundleId) {
      let msg = 'The desired capabilities must include either an app or a bundleId for iOS';

      _logger.default.errorAndThrow(msg);
    }

    let verifyProcessArgument = processArguments => {
      const {
        args,
        env
      } = processArguments;

      if (!_lodash.default.isNil(args) && !_lodash.default.isArray(args)) {
        _logger.default.errorAndThrow('processArguments.args must be an array of strings');
      }

      if (!_lodash.default.isNil(env) && !_lodash.default.isPlainObject(env)) {
        _logger.default.errorAndThrow('processArguments.env must be an object <key,value> pair {a:b, c:d}');
      }
    };

    if (caps.processArguments) {
      if (_lodash.default.isString(caps.processArguments)) {
        try {
          caps.processArguments = JSON.parse(caps.processArguments);
          verifyProcessArgument(caps.processArguments);
        } catch (err) {
          _logger.default.errorAndThrow(`processArguments must be a json format or an object with format {args : [], env : {a:b, c:d}}. ` + `Both environment and argument can be null. Error: ${err}`);
        }
      } else if (_lodash.default.isPlainObject(caps.processArguments)) {
        verifyProcessArgument(caps.processArguments);
      } else {
        _logger.default.errorAndThrow(`'processArguments must be an object, or a string JSON object with format {args : [], env : {a:b, c:d}}. ` + `Both environment and argument can be null.`);
      }
    }

    if (caps.keychainPath && !caps.keychainPassword || !caps.keychainPath && caps.keychainPassword) {
      _logger.default.errorAndThrow(`If 'keychainPath' is set, 'keychainPassword' must also be set (and vice versa).`);
    }

    this.opts.resetOnSessionStartOnly = !_appiumSupport.util.hasValue(this.opts.resetOnSessionStartOnly) || this.opts.resetOnSessionStartOnly;
    this.opts.useNewWDA = _appiumSupport.util.hasValue(this.opts.useNewWDA) ? this.opts.useNewWDA : false;

    if (caps.commandTimeouts) {
      caps.commandTimeouts = (0, _utils.normalizeCommandTimeouts)(caps.commandTimeouts);
    }

    if (_lodash.default.isString(caps.webDriverAgentUrl)) {
      const {
        protocol,
        host
      } = _url.default.parse(caps.webDriverAgentUrl);

      if (_lodash.default.isEmpty(protocol) || _lodash.default.isEmpty(host)) {
        _logger.default.errorAndThrow(`'webDriverAgentUrl' capability is expected to contain a valid WebDriverAgent server URL. ` + `'${caps.webDriverAgentUrl}' is given instead`);
      }
    }

    if (caps.browserName) {
      if (caps.bundleId) {
        _logger.default.errorAndThrow(`'browserName' cannot be set together with 'bundleId' capability`);
      }

      if (caps.app) {
        _logger.default.warn(`The capabilities should generally not include both an 'app' and a 'browserName'`);
      }
    }

    if (caps.permissions) {
      try {
        for (const [bundleId, perms] of _lodash.default.toPairs(JSON.parse(caps.permissions))) {
          if (!_lodash.default.isString(bundleId)) {
            throw new Error(`'${JSON.stringify(bundleId)}' must be a string`);
          }

          if (!_lodash.default.isPlainObject(perms)) {
            throw new Error(`'${JSON.stringify(perms)}' must be a JSON object`);
          }
        }
      } catch (e) {
        _logger.default.errorAndThrow(`'${caps.permissions}' is expected to be a valid object with format ` + `{"<bundleId1>": {"<serviceName1>": "<serviceStatus1>", ...}, ...}. Original error: ${e.message}`);
      }
    }

    return true;
  }

  async installAUT() {
    if (this.isSafari()) {
      return;
    }

    if (this.opts.autoLaunch === false) {
      return;
    }

    try {
      await (0, _utils.verifyApplicationPlatform)(this.opts.app, this.isSimulator());
    } catch (err) {
      _logger.default.warn(`*********************************`);

      _logger.default.warn(`${this.isSimulator() ? 'Simulator' : 'Real device'} architecture appears to be unsupported ` + `by the '${this.opts.app}' application. ` + `Make sure the correct deployment target has been selected for its compilation in Xcode.`);

      _logger.default.warn('Don\'t be surprised if the application fails to launch.');

      _logger.default.warn(`*********************************`);
    }

    if (this.isRealDevice()) {
      await (0, _realDeviceManagement.installToRealDevice)(this.opts.device, this.opts.app, this.opts.bundleId, this.opts.noReset);
    } else {
      await (0, _simulatorManagement.installToSimulator)(this.opts.device, this.opts.app, this.opts.bundleId, this.opts.noReset);
    }

    if (_appiumSupport.util.hasValue(this.opts.iosInstallPause)) {
      let pause = parseInt(this.opts.iosInstallPause, 10);

      _logger.default.debug(`iosInstallPause set. Pausing ${pause} ms before continuing`);

      await _bluebird.default.delay(pause);
    }
  }

  async setInitialOrientation(orientation) {
    if (!_lodash.default.isString(orientation)) {
      _logger.default.info('Skipping setting of the initial display orientation. ' + 'Set the "orientation" capability to either "LANDSCAPE" or "PORTRAIT", if this is an undesired behavior.');

      return;
    }

    orientation = orientation.toUpperCase();

    if (!_lodash.default.includes(['LANDSCAPE', 'PORTRAIT'], orientation)) {
      _logger.default.debug(`Unable to set initial orientation to '${orientation}'`);

      return;
    }

    _logger.default.debug(`Setting initial orientation to '${orientation}'`);

    try {
      await this.proxyCommand('/orientation', 'POST', {
        orientation
      });
      this.opts.curOrientation = orientation;
    } catch (err) {
      _logger.default.warn(`Setting initial orientation failed with: ${err.message}`);
    }
  }

  _getCommandTimeout(cmdName) {
    if (this.opts.commandTimeouts) {
      if (cmdName && _lodash.default.has(this.opts.commandTimeouts, cmdName)) {
        return this.opts.commandTimeouts[cmdName];
      }

      return this.opts.commandTimeouts[_utils.DEFAULT_TIMEOUT_KEY];
    }
  }

  async getSession() {
    const driverSession = await super.getSession();

    if (!this.wdaCaps) {
      this.wdaCaps = await this.proxyCommand('/', 'GET');
    }

    if (!this.deviceCaps) {
      const {
        statusBarSize,
        scale
      } = await this.getScreenInfo();
      this.deviceCaps = {
        pixelRatio: scale,
        statBarHeight: statusBarSize.height,
        viewportRect: await this.getViewportRect()
      };
    }

    _logger.default.info('Merging WDA caps over Appium caps for session detail response');

    return Object.assign({
      udid: this.opts.udid
    }, driverSession, this.wdaCaps.capabilities, this.deviceCaps);
  }

  async startIWDP() {
    this.logEvent('iwdpStarting');
    this.iwdpServer = new _appiumIosDriver.IWDP(this.opts.webkitDebugProxyPort, this.opts.udid);
    await this.iwdpServer.start();
    this.logEvent('iwdpStarted');
  }

  async stopIWDP() {
    if (this.iwdpServer) {
      await this.iwdpServer.stop();
      delete this.iwdpServer;
    }
  }

  async reset() {
    if (this.opts.noReset) {
      let opts = _lodash.default.cloneDeep(this.opts);

      opts.noReset = false;
      opts.fullReset = false;
      const shutdownHandler = this.resetOnUnexpectedShutdown;

      this.resetOnUnexpectedShutdown = () => {};

      try {
        await this.runReset(opts);
      } finally {
        this.resetOnUnexpectedShutdown = shutdownHandler;
      }
    }

    await super.reset();
  }

}

exports.XCUITestDriver = XCUITestDriver;
Object.assign(XCUITestDriver.prototype, _index.default);
var _default = XCUITestDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kcml2ZXIuanMiXSwibmFtZXMiOlsiU0FGQVJJX0JVTkRMRV9JRCIsIldEQV9TSU1fU1RBUlRVUF9SRVRSSUVTIiwiV0RBX1JFQUxfREVWX1NUQVJUVVBfUkVUUklFUyIsIldEQV9SRUFMX0RFVl9UVVRPUklBTF9VUkwiLCJXREFfU1RBUlRVUF9SRVRSWV9JTlRFUlZBTCIsIkRFRkFVTFRfU0VUVElOR1MiLCJuYXRpdmVXZWJUYXAiLCJ1c2VKU09OU291cmNlIiwic2hvdWxkVXNlQ29tcGFjdFJlc3BvbnNlcyIsImVsZW1lbnRSZXNwb25zZUF0dHJpYnV0ZXMiLCJtanBlZ1NlcnZlclNjcmVlbnNob3RRdWFsaXR5IiwibWpwZWdTZXJ2ZXJGcmFtZXJhdGUiLCJzY3JlZW5zaG90UXVhbGl0eSIsIlNIQVJFRF9SRVNPVVJDRVNfR1VBUkQiLCJBc3luY0xvY2siLCJOT19QUk9YWV9OQVRJVkVfTElTVCIsIk5PX1BST1hZX1dFQl9MSVNUIiwiY29uY2F0IiwiTUVNT0laRURfRlVOQ1RJT05TIiwiWENVSVRlc3REcml2ZXIiLCJCYXNlRHJpdmVyIiwiY29uc3RydWN0b3IiLCJvcHRzIiwic2hvdWxkVmFsaWRhdGVDYXBzIiwiZGVzaXJlZENhcENvbnN0cmFpbnRzIiwibG9jYXRvclN0cmF0ZWdpZXMiLCJ3ZWJMb2NhdG9yU3RyYXRlZ2llcyIsInJlc2V0SW9zIiwic2V0dGluZ3MiLCJEZXZpY2VTZXR0aW5ncyIsIm9uU2V0dGluZ3NVcGRhdGUiLCJiaW5kIiwiZm4iLCJfIiwibWVtb2l6ZSIsImtleSIsInZhbHVlIiwicHJveHlDb21tYW5kIiwid2RhIiwiZGV2aWNlIiwiandwUHJveHlBY3RpdmUiLCJwcm94eVJlcVJlcyIsImp3cFByb3h5QXZvaWQiLCJzYWZhcmkiLCJjYWNoZWRXZGFTdGF0dXMiLCJjdXJXZWJGcmFtZXMiLCJ3ZWJFbGVtZW50SWRzIiwiX2N1cnJlbnRVcmwiLCJjdXJDb250ZXh0IiwieGNvZGVWZXJzaW9uIiwiaW9zU2RrVmVyc2lvbiIsImNvbnRleHRzIiwiaW1wbGljaXRXYWl0TXMiLCJhc3luY2xpYldhaXRNcyIsInBhZ2VMb2FkTXMiLCJsYW5kc2NhcGVXZWJDb29yZHNPZmZzZXQiLCJkcml2ZXJEYXRhIiwiZ2V0U3RhdHVzIiwiZHJpdmVySW5mbyIsInN0YXR1cyIsImJ1aWxkIiwidmVyc2lvbiIsImNyZWF0ZVNlc3Npb24iLCJhcmdzIiwibGlmZWN5Y2xlRGF0YSIsInNlc3Npb25JZCIsImNhcHMiLCJzdGFydCIsIk9iamVjdCIsImFzc2lnbiIsImRlZmF1bHRTZXJ2ZXJDYXBzIiwidWRpZCIsImhhcyIsInVwZGF0ZVNldHRpbmdzIiwid2RhU2V0dGluZ3MiLCJsb2ciLCJpbmZvIiwibWpwZWdTY3JlZW5zaG90VXJsIiwibWpwZWdTdHJlYW0iLCJtanBlZyIsIk1KcGVnU3RyZWFtIiwiZSIsImVycm9yIiwiZGVsZXRlU2Vzc2lvbiIsIm5vUmVzZXQiLCJmdWxsUmVzZXQiLCJwbGF0Zm9ybVZlcnNpb24iLCJwYXJzZUZsb2F0IiwiRXJyb3IiLCJyZWFsRGV2aWNlIiwiZGV0ZXJtaW5lRGV2aWNlIiwiaXNFbXB0eSIsIndlYkRyaXZlckFnZW50VXJsIiwidG9vbHMiLCJ0b29sc1ZlcnNpb24iLCJkZWJ1ZyIsInZlcnNpb25TdHJpbmciLCJsb2dFdmVudCIsImVuYWJsZUFzeW5jRXhlY3V0ZUZyb21IdHRwcyIsImlzUmVhbERldmljZSIsInN0YXJ0SHR0cHNBc3luY1NlcnZlciIsImlzRnVuY3Rpb24iLCJnZXRQbGF0Zm9ybVZlcnNpb24iLCJtc2ciLCJlcnJvckFuZFRocm93IiwiYnJvd3Nlck5hbWUiLCJ0b0xvd2VyQ2FzZSIsImFwcCIsInVuZGVmaW5lZCIsInByb2Nlc3NBcmd1bWVudHMiLCJidW5kbGVJZCIsInNhZmFyaUluaXRpYWxVcmwiLCJhZGRyZXNzIiwicG9ydCIsImNvbmZpZ3VyZUFwcCIsImFwcFV0aWxzIiwiZXh0cmFjdEJ1bmRsZUlkIiwicnVuUmVzZXQiLCJzdGFydExvZ0NhcHR1cmUiLCJyZXN1bHQiLCJpc0xvZ0NhcHR1cmVTdGFydGVkIiwiaXNTaW11bGF0b3IiLCJzaHV0ZG93bk90aGVyU2ltdWxhdG9ycyIsInJlbGF4ZWRTZWN1cml0eUVuYWJsZWQiLCJ1dGlsIiwiaGFzVmFsdWUiLCJyZWR1Y2VNb3Rpb24iLCJzZXRSZWR1Y2VNb3Rpb24iLCJsb2NhbENvbmZpZyIsImlvc1NldHRpbmdzIiwic2V0TG9jYWxlQW5kUHJlZmVyZW5jZXMiLCJpc1NhZmFyaSIsInNpbSIsInN0YXJ0U2ltIiwiY3VzdG9tU1NMQ2VydCIsInRydW5jYXRlIiwibGVuZ3RoIiwiaW5zdGFsbEFVVCIsImlzQXBwSW5zdGFsbGVkIiwicGVybWlzc2lvbnMiLCJwZXJtaXNzaW9uc01hcHBpbmciLCJ0b1BhaXJzIiwiSlNPTiIsInBhcnNlIiwic2V0UGVybWlzc2lvbnMiLCJ3YXJuIiwiYWNxdWlyZSIsIm5hbWUiLCJzdGFydFdkYSIsInNldEluaXRpYWxPcmllbnRhdGlvbiIsIm9yaWVudGF0aW9uIiwic3RhcnRJV0RQIiwiaXdkcFNlcnZlciIsImVuZHBvaW50IiwiZXJyIiwibWVzc2FnZSIsImF1dG9XZWJ2aWV3IiwibmF2VG9Jbml0aWFsV2VidmlldyIsImNhbGVuZGFyQWNjZXNzQXV0aG9yaXplZCIsImVuYWJsZUNhbGVuZGFyQWNjZXNzIiwiZGlzYWJsZUNhbGVuZGFyQWNjZXNzIiwiV2ViRHJpdmVyQWdlbnQiLCJjbGVhbnVwT2Jzb2xldGVQcm9jZXNzZXMiLCJ1c2VOZXdXREEiLCJxdWl0QW5kVW5pbnN0YWxsIiwic2V0dXBDYWNoaW5nIiwidXBkYXRlZFdEQUJ1bmRsZUlkIiwic3RhcnR1cFJldHJpZXMiLCJ3ZGFTdGFydHVwUmV0cmllcyIsInN0YXJ0dXBSZXRyeUludGVydmFsIiwid2RhU3RhcnR1cFJldHJ5SW50ZXJ2YWwiLCJyZXRyaWVzIiwibWFqb3IiLCJsYXVuY2giLCJlcnJvck1zZyIsInN0YXJ0V2RhU2Vzc2lvbiIsInByZXZlbnRXREFBdHRhY2htZW50cyIsImNsZWFyU3lzdGVtRmlsZXMiLCJmdWxseVN0YXJ0ZWQiLCJzZXJ2ZXIiLCJzdG9wIiwiaXNBcHBUZW1wb3JhcnkiLCJmcyIsInJpbXJhZiIsInNob3dYY29kZUxvZyIsImlzV2ViQ29udGV4dCIsInN0b3BSZW1vdGUiLCJyZXNldE9uU2Vzc2lvblN0YXJ0T25seSIsImNyZWF0ZVNpbSIsImRlbGV0ZSIsImxvZ3MiLCJzeXNsb2ciLCJzdG9wQ2FwdHVyZSIsInN0b3BJV0RQIiwic3RvcEh0dHBzQXN5bmNTZXJ2ZXIiLCJqd3Byb3h5IiwicXVpdCIsImV4ZWN1dGVDb21tYW5kIiwiY21kIiwicmVjZWl2ZUFzeW5jUmVzcG9uc2UiLCJhcHBJc1BhY2thZ2VPckJ1bmRsZSIsInRlc3QiLCJvcmlnaW5hbEFwcFBhdGgiLCJoZWxwZXJzIiwiZXhpc3RzIiwiaXNTYW1lRGVzdGluYXRpb24iLCJkZXZpY2VOYW1lIiwiZGV2aWNlcyIsImpvaW4iLCJpbmNsdWRlcyIsInJ1bk9wdHMiLCJzY2FsZUZhY3RvciIsImNvbm5lY3RIYXJkd2FyZUtleWJvYXJkIiwiaXNIZWFkbGVzcyIsImRldmljZVByZWZlcmVuY2VzIiwiU2ltdWxhdG9yV2luZG93Q2VudGVyIiwiaXNTdHJpbmciLCJ0b1VwcGVyQ2FzZSIsIlNpbXVsYXRvcldpbmRvd09yaWVudGF0aW9uIiwiU2ltdWxhdG9yV2luZG93Um90YXRpb25BbmdsZSIsInJ1biIsImxhdW5jaEFwcCIsIkFQUF9MQVVOQ0hfVElNRU9VVCIsImNoZWNrU3RhdHVzIiwicmVzcG9uc2UiLCJjdXJyZW50QXBwIiwiYnVuZGxlSUQiLCJwYXJzZUludCIsImlzQXJyYXkiLCJzdHJpbmdpZnkiLCJlbnYiLCJpc1BsYWluT2JqZWN0Iiwic2hvdWxkV2FpdEZvclF1aWVzY2VuY2UiLCJ3YWl0Rm9yUXVpZXNjZW5jZSIsIm1heFR5cGluZ0ZyZXF1ZW5jeSIsInNob3VsZFVzZVNpbmdsZXRvblRlc3RNYW5hZ2VyIiwic2hvdWxkVXNlVGVzdE1hbmFnZXJGb3JWaXNpYmlsaXR5RGV0ZWN0aW9uIiwic2ltcGxlSXNWaXNpYmxlQ2hlY2siLCJpc05hTiIsInRvRml4ZWQiLCJsYW5ndWFnZSIsInB1c2giLCJsb2NhbGUiLCJkZXNpcmVkIiwiZGVzaXJlZENhcGFiaWxpdGllcyIsImFyZ3VtZW50cyIsImVudmlyb25tZW50IiwiZWxlbWVudFJlc3BvbnNlRmllbGRzIiwiYXV0b0FjY2VwdEFsZXJ0cyIsImRlZmF1bHRBbGVydEFjdGlvbiIsImF1dG9EaXNtaXNzQWxlcnRzIiwicHJveHlBY3RpdmUiLCJnZXRQcm94eUF2b2lkTGlzdCIsImlzV2VidmlldyIsImNhblByb3h5IiwidmFsaWRhdGVMb2NhdG9yU3RyYXRlZ3kiLCJzdHJhdGVneSIsInZhbGlkYXRlRGVzaXJlZENhcHMiLCJ2ZXJpZnlQcm9jZXNzQXJndW1lbnQiLCJpc05pbCIsImtleWNoYWluUGF0aCIsImtleWNoYWluUGFzc3dvcmQiLCJjb21tYW5kVGltZW91dHMiLCJwcm90b2NvbCIsImhvc3QiLCJ1cmwiLCJwZXJtcyIsImF1dG9MYXVuY2giLCJpb3NJbnN0YWxsUGF1c2UiLCJwYXVzZSIsIkIiLCJkZWxheSIsImN1ck9yaWVudGF0aW9uIiwiX2dldENvbW1hbmRUaW1lb3V0IiwiY21kTmFtZSIsIkRFRkFVTFRfVElNRU9VVF9LRVkiLCJnZXRTZXNzaW9uIiwiZHJpdmVyU2Vzc2lvbiIsIndkYUNhcHMiLCJkZXZpY2VDYXBzIiwic3RhdHVzQmFyU2l6ZSIsInNjYWxlIiwiZ2V0U2NyZWVuSW5mbyIsInBpeGVsUmF0aW8iLCJzdGF0QmFySGVpZ2h0IiwiaGVpZ2h0Iiwidmlld3BvcnRSZWN0IiwiZ2V0Vmlld3BvcnRSZWN0IiwiY2FwYWJpbGl0aWVzIiwiSVdEUCIsIndlYmtpdERlYnVnUHJveHlQb3J0IiwicmVzZXQiLCJjbG9uZURlZXAiLCJzaHV0ZG93bkhhbmRsZXIiLCJyZXNldE9uVW5leHBlY3RlZFNodXRkb3duIiwicHJvdG90eXBlIiwiY29tbWFuZHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FB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O0FBRXJCLFVBQUk5RCxJQUFJLEdBQUdXLGdCQUFFbVEsU0FBRixDQUFZLEtBQUs5USxJQUFqQixDQUFYOztBQUNBQSxNQUFBQSxJQUFJLENBQUM4RCxPQUFMLEdBQWUsS0FBZjtBQUNBOUQsTUFBQUEsSUFBSSxDQUFDK0QsU0FBTCxHQUFpQixLQUFqQjtBQUNBLFlBQU1nTixlQUFlLEdBQUcsS0FBS0MseUJBQTdCOztBQUNBLFdBQUtBLHlCQUFMLEdBQWlDLE1BQU0sQ0FBRSxDQUF6Qzs7QUFDQSxVQUFJO0FBQ0YsY0FBTSxLQUFLakwsUUFBTCxDQUFjL0YsSUFBZCxDQUFOO0FBQ0QsT0FGRCxTQUVVO0FBQ1IsYUFBS2dSLHlCQUFMLEdBQWlDRCxlQUFqQztBQUNEO0FBQ0Y7O0FBQ0QsVUFBTSxNQUFNRixLQUFOLEVBQU47QUFDRDs7QUF0L0JxQzs7O0FBeS9CeEMvTixNQUFNLENBQUNDLE1BQVAsQ0FBY2xELGNBQWMsQ0FBQ29SLFNBQTdCLEVBQXdDQyxjQUF4QztlQUVlclIsYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VEcml2ZXIsIERldmljZVNldHRpbmdzIH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCB7IHV0aWwsIGZzLCBtanBlZyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgeyBsYXVuY2ggfSBmcm9tICdub2RlLXNpbWN0bCc7XG5pbXBvcnQgV2ViRHJpdmVyQWdlbnQgZnJvbSAnLi93ZGEvd2ViZHJpdmVyYWdlbnQnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBjcmVhdGVTaW0sIGdldEV4aXN0aW5nU2ltLCBydW5TaW11bGF0b3JSZXNldCwgaW5zdGFsbFRvU2ltdWxhdG9yLFxuICAgICAgICAgc2h1dGRvd25PdGhlclNpbXVsYXRvcnMsIHNodXRkb3duU2ltdWxhdG9yIH0gZnJvbSAnLi9zaW11bGF0b3ItbWFuYWdlbWVudCc7XG5pbXBvcnQgeyBzaW1FeGlzdHMsIGdldFNpbXVsYXRvciwgaW5zdGFsbFNTTENlcnQsIGhhc1NTTENlcnQgfSBmcm9tICdhcHBpdW0taW9zLXNpbXVsYXRvcic7XG5pbXBvcnQgeyByZXRyeUludGVydmFsLCByZXRyeSB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCB7IHNldHRpbmdzIGFzIGlvc1NldHRpbmdzLCBkZWZhdWx0U2VydmVyQ2FwcywgYXBwVXRpbHMsIElXRFAgfSBmcm9tICdhcHBpdW0taW9zLWRyaXZlcic7XG5pbXBvcnQgZGVzaXJlZENhcENvbnN0cmFpbnRzIGZyb20gJy4vZGVzaXJlZC1jYXBzJztcbmltcG9ydCBjb21tYW5kcyBmcm9tICcuL2NvbW1hbmRzL2luZGV4JztcbmltcG9ydCB7IGRldGVjdFVkaWQsIGdldEFuZENoZWNrWGNvZGVWZXJzaW9uLCBnZXRBbmRDaGVja0lvc1Nka1ZlcnNpb24sXG4gICAgICAgICBhZGp1c3RXREFBdHRhY2htZW50c1Blcm1pc3Npb25zLCBjaGVja0FwcFByZXNlbnQsIGdldERyaXZlckluZm8sXG4gICAgICAgICBjbGVhclN5c3RlbUZpbGVzLCB0cmFuc2xhdGVEZXZpY2VOYW1lLCBub3JtYWxpemVDb21tYW5kVGltZW91dHMsXG4gICAgICAgICBERUZBVUxUX1RJTUVPVVRfS0VZLCBtYXJrU3lzdGVtRmlsZXNGb3JDbGVhbnVwLFxuICAgICAgICAgcHJpbnRVc2VyLCByZW1vdmVBbGxTZXNzaW9uV2ViU29ja2V0SGFuZGxlcnMsIHZlcmlmeUFwcGxpY2F0aW9uUGxhdGZvcm0gfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGdldENvbm5lY3RlZERldmljZXMsIHJ1blJlYWxEZXZpY2VSZXNldCwgaW5zdGFsbFRvUmVhbERldmljZSxcbiAgICAgICAgIGdldFJlYWxEZXZpY2VPYmogfSBmcm9tICcuL3JlYWwtZGV2aWNlLW1hbmFnZW1lbnQnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IEFzeW5jTG9jayBmcm9tICdhc3luYy1sb2NrJztcblxuXG5jb25zdCBTQUZBUklfQlVORExFX0lEID0gJ2NvbS5hcHBsZS5tb2JpbGVzYWZhcmknO1xuY29uc3QgV0RBX1NJTV9TVEFSVFVQX1JFVFJJRVMgPSAyO1xuY29uc3QgV0RBX1JFQUxfREVWX1NUQVJUVVBfUkVUUklFUyA9IDE7XG5jb25zdCBXREFfUkVBTF9ERVZfVFVUT1JJQUxfVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9hcHBpdW0vYXBwaXVtLXhjdWl0ZXN0LWRyaXZlci9ibG9iL21hc3Rlci9kb2NzL3JlYWwtZGV2aWNlLWNvbmZpZy5tZCc7XG5jb25zdCBXREFfU1RBUlRVUF9SRVRSWV9JTlRFUlZBTCA9IDEwMDAwO1xuY29uc3QgREVGQVVMVF9TRVRUSU5HUyA9IHtcbiAgbmF0aXZlV2ViVGFwOiBmYWxzZSxcbiAgdXNlSlNPTlNvdXJjZTogZmFsc2UsXG4gIHNob3VsZFVzZUNvbXBhY3RSZXNwb25zZXM6IHRydWUsXG4gIGVsZW1lbnRSZXNwb25zZUF0dHJpYnV0ZXM6ICd0eXBlLGxhYmVsJyxcbiAgLy8gUmVhZCBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL1dlYkRyaXZlckFnZW50L2Jsb2IvbWFzdGVyL1dlYkRyaXZlckFnZW50TGliL1V0aWxpdGllcy9GQkNvbmZpZ3VyYXRpb24ubSBmb3IgZm9sbG93aW5nIHNldHRpbmdzJyB2YWx1ZXNcbiAgbWpwZWdTZXJ2ZXJTY3JlZW5zaG90UXVhbGl0eTogMjUsXG4gIG1qcGVnU2VydmVyRnJhbWVyYXRlOiAxMCxcbiAgc2NyZWVuc2hvdFF1YWxpdHk6IDEsXG59O1xuLy8gVGhpcyBsb2NrIGFzc3VyZXMsIHRoYXQgZWFjaCBkcml2ZXIgc2Vzc2lvbiBkb2VzIG5vdFxuLy8gYWZmZWN0IHNoYXJlZCByZXNvdXJjZXMgb2YgdGhlIG90aGVyIHBhcmFsbGVsIHNlc3Npb25zXG5jb25zdCBTSEFSRURfUkVTT1VSQ0VTX0dVQVJEID0gbmV3IEFzeW5jTG9jaygpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11c2VsZXNzLWVzY2FwZSAqL1xuY29uc3QgTk9fUFJPWFlfTkFUSVZFX0xJU1QgPSBbXG4gIFsnREVMRVRFJywgL3dpbmRvdy9dLFxuICBbJ0dFVCcsIC9eXFwvc2Vzc2lvblxcL1teXFwvXSskL10sXG4gIFsnR0VUJywgL2FsZXJ0X3RleHQvXSxcbiAgWydHRVQnLCAvYWxlcnRcXC9bXlxcL10rL10sXG4gIFsnR0VUJywgL2FwcGl1bS9dLFxuICBbJ0dFVCcsIC9hdHRyaWJ1dGUvXSxcbiAgWydHRVQnLCAvY29udGV4dC9dLFxuICBbJ0dFVCcsIC9sb2NhdGlvbi9dLFxuICBbJ0dFVCcsIC9sb2cvXSxcbiAgWydHRVQnLCAvc2NyZWVuc2hvdC9dLFxuICBbJ0dFVCcsIC9zaXplL10sXG4gIFsnR0VUJywgL3NvdXJjZS9dLFxuICBbJ0dFVCcsIC91cmwvXSxcbiAgWydHRVQnLCAvd2luZG93L10sXG4gIFsnUE9TVCcsIC9hY2NlcHRfYWxlcnQvXSxcbiAgWydQT1NUJywgL2FjdGlvbnMkL10sXG4gIFsnUE9TVCcsIC9hbGVydF90ZXh0L10sXG4gIFsnUE9TVCcsIC9hbGVydFxcL1teXFwvXSsvXSxcbiAgWydQT1NUJywgL2FwcGl1bS9dLFxuICBbJ1BPU1QnLCAvYXBwaXVtXFwvZGV2aWNlXFwvaXNfbG9ja2VkL10sXG4gIFsnUE9TVCcsIC9hcHBpdW1cXC9kZXZpY2VcXC9sb2NrL10sXG4gIFsnUE9TVCcsIC9hcHBpdW1cXC9kZXZpY2VcXC91bmxvY2svXSxcbiAgWydQT1NUJywgL2JhY2svXSxcbiAgWydQT1NUJywgL2NsZWFyL10sXG4gIFsnUE9TVCcsIC9jb250ZXh0L10sXG4gIFsnUE9TVCcsIC9kaXNtaXNzX2FsZXJ0L10sXG4gIFsnUE9TVCcsIC9lbGVtZW50JC9dLFxuICBbJ1BPU1QnLCAvZWxlbWVudHMkL10sXG4gIFsnUE9TVCcsIC9leGVjdXRlL10sXG4gIFsnUE9TVCcsIC9rZXlzL10sXG4gIFsnUE9TVCcsIC9sb2cvXSxcbiAgWydQT1NUJywgL21vdmV0by9dLFxuICBbJ1BPU1QnLCAvcmVjZWl2ZV9hc3luY19yZXNwb25zZS9dLCAvLyBhbHdheXMsIGluIGNhc2UgY29udGV4dCBzd2l0Y2hlcyB3aGlsZSB3YWl0aW5nXG4gIFsnUE9TVCcsIC9zZXNzaW9uXFwvW15cXC9dK1xcL2xvY2F0aW9uL10sIC8vIGdlbyBsb2NhdGlvbiwgYnV0IG5vdCBlbGVtZW50IGxvY2F0aW9uXG4gIFsnUE9TVCcsIC9zaGFrZS9dLFxuICBbJ1BPU1QnLCAvdGltZW91dHMvXSxcbiAgWydQT1NUJywgL3RvdWNoL10sXG4gIFsnUE9TVCcsIC91cmwvXSxcbiAgWydQT1NUJywgL3ZhbHVlL10sXG4gIFsnUE9TVCcsIC93aW5kb3cvXSxcbl07XG5jb25zdCBOT19QUk9YWV9XRUJfTElTVCA9IFtcbiAgWydERUxFVEUnLCAvY29va2llL10sXG4gIFsnR0VUJywgL2F0dHJpYnV0ZS9dLFxuICBbJ0dFVCcsIC9jb29raWUvXSxcbiAgWydHRVQnLCAvZWxlbWVudC9dLFxuICBbJ0dFVCcsIC90ZXh0L10sXG4gIFsnR0VUJywgL3RpdGxlL10sXG4gIFsnUE9TVCcsIC9jbGVhci9dLFxuICBbJ1BPU1QnLCAvY2xpY2svXSxcbiAgWydQT1NUJywgL2Nvb2tpZS9dLFxuICBbJ1BPU1QnLCAvZWxlbWVudC9dLFxuICBbJ1BPU1QnLCAvZm9yd2FyZC9dLFxuICBbJ1BPU1QnLCAvZnJhbWUvXSxcbiAgWydQT1NUJywgL2tleXMvXSxcbiAgWydQT1NUJywgL3JlZnJlc2gvXSxcbl0uY29uY2F0KE5PX1BST1hZX05BVElWRV9MSVNUKTtcbi8qIGVzbGludC1lbmFibGUgbm8tdXNlbGVzcy1lc2NhcGUgKi9cblxuY29uc3QgTUVNT0laRURfRlVOQ1RJT05TID0gW1xuICAnZ2V0V2luZG93U2l6ZU5hdGl2ZScsXG4gICdnZXRXaW5kb3dTaXplV2ViJyxcbiAgJ2dldFN0YXR1c0JhckhlaWdodCcsXG4gICdnZXREZXZpY2VQaXhlbFJhdGlvJyxcbiAgJ2dldFNjcmVlbkluZm8nLFxuICAnZ2V0U2FmYXJpSXNJcGhvbmUnLFxuICAnZ2V0U2FmYXJpSXNJcGhvbmVYJyxcbl07XG5cbmNsYXNzIFhDVUlUZXN0RHJpdmVyIGV4dGVuZHMgQmFzZURyaXZlciB7XG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30sIHNob3VsZFZhbGlkYXRlQ2FwcyA9IHRydWUpIHtcbiAgICBzdXBlcihvcHRzLCBzaG91bGRWYWxpZGF0ZUNhcHMpO1xuXG4gICAgdGhpcy5kZXNpcmVkQ2FwQ29uc3RyYWludHMgPSBkZXNpcmVkQ2FwQ29uc3RyYWludHM7XG5cbiAgICB0aGlzLmxvY2F0b3JTdHJhdGVnaWVzID0gW1xuICAgICAgJ3hwYXRoJyxcbiAgICAgICdpZCcsXG4gICAgICAnbmFtZScsXG4gICAgICAnY2xhc3MgbmFtZScsXG4gICAgICAnLWlvcyBwcmVkaWNhdGUgc3RyaW5nJyxcbiAgICAgICctaW9zIGNsYXNzIGNoYWluJyxcbiAgICAgICdhY2Nlc3NpYmlsaXR5IGlkJ1xuICAgIF07XG4gICAgdGhpcy53ZWJMb2NhdG9yU3RyYXRlZ2llcyA9IFtcbiAgICAgICdsaW5rIHRleHQnLFxuICAgICAgJ2NzcyBzZWxlY3RvcicsXG4gICAgICAndGFnIG5hbWUnLFxuICAgICAgJ2xpbmsgdGV4dCcsXG4gICAgICAncGFydGlhbCBsaW5rIHRleHQnXG4gICAgXTtcbiAgICB0aGlzLnJlc2V0SW9zKCk7XG4gICAgdGhpcy5zZXR0aW5ncyA9IG5ldyBEZXZpY2VTZXR0aW5ncyhERUZBVUxUX1NFVFRJTkdTLCB0aGlzLm9uU2V0dGluZ3NVcGRhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyBtZW1vaXplIGZ1bmN0aW9ucyBoZXJlLCBzbyB0aGF0IHRoZXkgYXJlIGRvbmUgb24gYSBwZXItaW5zdGFuY2UgYmFzaXNcbiAgICBmb3IgKGNvbnN0IGZuIG9mIE1FTU9JWkVEX0ZVTkNUSU9OUykge1xuICAgICAgdGhpc1tmbl0gPSBfLm1lbW9pemUodGhpc1tmbl0pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG9uU2V0dGluZ3NVcGRhdGUgKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5ICE9PSAnbmF0aXZlV2ViVGFwJykge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvYXBwaXVtL3NldHRpbmdzJywgJ1BPU1QnLCB7XG4gICAgICAgIHNldHRpbmdzOiB7W2tleV06IHZhbHVlfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMub3B0cy5uYXRpdmVXZWJUYXAgPSAhIXZhbHVlO1xuICB9XG5cbiAgcmVzZXRJb3MgKCkge1xuICAgIHRoaXMub3B0cyA9IHRoaXMub3B0cyB8fCB7fTtcbiAgICB0aGlzLndkYSA9IG51bGw7XG4gICAgdGhpcy5vcHRzLmRldmljZSA9IG51bGw7XG4gICAgdGhpcy5qd3BQcm94eUFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMucHJveHlSZXFSZXMgPSBudWxsO1xuICAgIHRoaXMuandwUHJveHlBdm9pZCA9IFtdO1xuICAgIHRoaXMuc2FmYXJpID0gZmFsc2U7XG4gICAgdGhpcy5jYWNoZWRXZGFTdGF0dXMgPSBudWxsO1xuXG4gICAgLy8gc29tZSB0aGluZ3MgdGhhdCBjb21tYW5kcyBpbXBvcnRlZCBmcm9tIGFwcGl1bS1pb3MtZHJpdmVyIG5lZWRcbiAgICB0aGlzLmN1cldlYkZyYW1lcyA9IFtdO1xuICAgIHRoaXMud2ViRWxlbWVudElkcyA9IFtdO1xuICAgIHRoaXMuX2N1cnJlbnRVcmwgPSBudWxsO1xuICAgIHRoaXMuY3VyQ29udGV4dCA9IG51bGw7XG4gICAgdGhpcy54Y29kZVZlcnNpb24gPSB7fTtcbiAgICB0aGlzLmlvc1Nka1ZlcnNpb24gPSBudWxsO1xuICAgIHRoaXMuY29udGV4dHMgPSBbXTtcbiAgICB0aGlzLmltcGxpY2l0V2FpdE1zID0gMDtcbiAgICB0aGlzLmFzeW5jbGliV2FpdE1zID0gMDtcbiAgICB0aGlzLnBhZ2VMb2FkTXMgPSA2MDAwO1xuICAgIHRoaXMubGFuZHNjYXBlV2ViQ29vcmRzT2Zmc2V0ID0gMDtcbiAgfVxuXG4gIGdldCBkcml2ZXJEYXRhICgpIHtcbiAgICAvLyBUT0RPIGZpbGwgb3V0IHJlc291cmNlIGluZm8gaGVyZVxuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGFzeW5jIGdldFN0YXR1cyAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmRyaXZlckluZm8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmRyaXZlckluZm8gPSBhd2FpdCBnZXREcml2ZXJJbmZvKCk7XG4gICAgfVxuICAgIGxldCBzdGF0dXMgPSB7YnVpbGQ6IHt2ZXJzaW9uOiB0aGlzLmRyaXZlckluZm8udmVyc2lvbn19O1xuICAgIGlmICh0aGlzLmNhY2hlZFdkYVN0YXR1cykge1xuICAgICAgc3RhdHVzLndkYSA9IHRoaXMuY2FjaGVkV2RhU3RhdHVzO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdHVzO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlU2Vzc2lvbiAoLi4uYXJncykge1xuICAgIHRoaXMubGlmZWN5Y2xlRGF0YSA9IHt9OyAvLyB0aGlzIGlzIHVzZWQgZm9yIGtlZXBpbmcgdHJhY2sgb2YgdGhlIHN0YXRlIHdlIHN0YXJ0IHNvIHdoZW4gd2UgZGVsZXRlIHRoZSBzZXNzaW9uIHdlIGNhbiBwdXQgdGhpbmdzIGJhY2tcbiAgICB0cnkge1xuICAgICAgLy8gVE9ETyBhZGQgdmFsaWRhdGlvbiBvbiBjYXBzXG4gICAgICBsZXQgW3Nlc3Npb25JZCwgY2Fwc10gPSBhd2FpdCBzdXBlci5jcmVhdGVTZXNzaW9uKC4uLmFyZ3MpO1xuICAgICAgdGhpcy5vcHRzLnNlc3Npb25JZCA9IHNlc3Npb25JZDtcblxuICAgICAgYXdhaXQgdGhpcy5zdGFydCgpO1xuXG4gICAgICAvLyBtZXJnZSBzZXJ2ZXIgY2FwYWJpbGl0aWVzICsgZGVzaXJlZCBjYXBhYmlsaXRpZXNcbiAgICAgIGNhcHMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0U2VydmVyQ2FwcywgY2Fwcyk7XG4gICAgICAvLyB1cGRhdGUgdGhlIHVkaWQgd2l0aCB3aGF0IGlzIGFjdHVhbGx5IHVzZWRcbiAgICAgIGNhcHMudWRpZCA9IHRoaXMub3B0cy51ZGlkO1xuICAgICAgLy8gZW5zdXJlIHdlIHRyYWNrIG5hdGl2ZVdlYlRhcCBjYXBhYmlsaXR5IGFzIGEgc2V0dGluZyBhcyB3ZWxsXG4gICAgICBpZiAoXy5oYXModGhpcy5vcHRzLCAnbmF0aXZlV2ViVGFwJykpIHtcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVTZXR0aW5ncyh7bmF0aXZlV2ViVGFwOiB0aGlzLm9wdHMubmF0aXZlV2ViVGFwfSk7XG4gICAgICB9XG4gICAgICAvLyBlbnN1cmUgd2UgdHJhY2sgdXNlSlNPTlNvdXJjZSBjYXBhYmlsaXR5IGFzIGEgc2V0dGluZyBhcyB3ZWxsXG4gICAgICBpZiAoXy5oYXModGhpcy5vcHRzLCAndXNlSlNPTlNvdXJjZScpKSB7XG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlU2V0dGluZ3Moe3VzZUpTT05Tb3VyY2U6IHRoaXMub3B0cy51c2VKU09OU291cmNlfSk7XG4gICAgICB9XG5cbiAgICAgIGxldCB3ZGFTZXR0aW5ncyA9IHtcbiAgICAgICAgZWxlbWVudFJlc3BvbnNlQXR0cmlidXRlczogREVGQVVMVF9TRVRUSU5HUy5lbGVtZW50UmVzcG9uc2VBdHRyaWJ1dGVzLFxuICAgICAgICBzaG91bGRVc2VDb21wYWN0UmVzcG9uc2VzOiBERUZBVUxUX1NFVFRJTkdTLnNob3VsZFVzZUNvbXBhY3RSZXNwb25zZXMsXG4gICAgICB9O1xuICAgICAgaWYgKF8uaGFzKHRoaXMub3B0cywgJ2VsZW1lbnRSZXNwb25zZUF0dHJpYnV0ZXMnKSkge1xuICAgICAgICB3ZGFTZXR0aW5ncy5lbGVtZW50UmVzcG9uc2VBdHRyaWJ1dGVzID0gdGhpcy5vcHRzLmVsZW1lbnRSZXNwb25zZUF0dHJpYnV0ZXM7XG4gICAgICB9XG4gICAgICBpZiAoXy5oYXModGhpcy5vcHRzLCAnc2hvdWxkVXNlQ29tcGFjdFJlc3BvbnNlcycpKSB7XG4gICAgICAgIHdkYVNldHRpbmdzLnNob3VsZFVzZUNvbXBhY3RSZXNwb25zZXMgPSB0aGlzLm9wdHMuc2hvdWxkVXNlQ29tcGFjdFJlc3BvbnNlcztcbiAgICAgIH1cbiAgICAgIGlmIChfLmhhcyh0aGlzLm9wdHMsICdtanBlZ1NlcnZlclNjcmVlbnNob3RRdWFsaXR5JykpIHtcbiAgICAgICAgd2RhU2V0dGluZ3MubWpwZWdTZXJ2ZXJTY3JlZW5zaG90UXVhbGl0eSA9IHRoaXMub3B0cy5tanBlZ1NlcnZlclNjcmVlbnNob3RRdWFsaXR5O1xuICAgICAgfVxuICAgICAgaWYgKF8uaGFzKHRoaXMub3B0cywgJ21qcGVnU2VydmVyRnJhbWVyYXRlJykpIHtcbiAgICAgICAgd2RhU2V0dGluZ3MubWpwZWdTZXJ2ZXJGcmFtZXJhdGUgPSB0aGlzLm9wdHMubWpwZWdTZXJ2ZXJGcmFtZXJhdGU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRzLnNjcmVlbnNob3RRdWFsaXR5KSB7XG4gICAgICAgIGxvZy5pbmZvKGBTZXR0aW5nIHRoZSBxdWFsaXR5IG9mIHBob25lIHNjcmVlbnNob3Q6ICcke3RoaXMub3B0cy5zY3JlZW5zaG90UXVhbGl0eX0nYCk7XG4gICAgICAgIHdkYVNldHRpbmdzLnNjcmVlbnNob3RRdWFsaXR5ID0gdGhpcy5vcHRzLnNjcmVlbnNob3RRdWFsaXR5O1xuICAgICAgfVxuICAgICAgLy8gZW5zdXJlIFdEQSBnZXRzIG91ciBkZWZhdWx0cyBpbnN0ZWFkIG9mIHdoYXRldmVyIGl0cyBvd24gbWlnaHQgYmVcbiAgICAgIGF3YWl0IHRoaXMudXBkYXRlU2V0dGluZ3Mod2RhU2V0dGluZ3MpO1xuXG4gICAgICAvLyB0dXJuIG9uIG1qcGVnIHN0cmVhbSByZWFkaW5nIGlmIHJlcXVlc3RlZFxuICAgICAgaWYgKHRoaXMub3B0cy5tanBlZ1NjcmVlbnNob3RVcmwpIHtcbiAgICAgICAgbG9nLmluZm8oYFN0YXJ0aW5nIE1KUEVHIHN0cmVhbSByZWFkaW5nIFVSTDogJyR7dGhpcy5vcHRzLm1qcGVnU2NyZWVuc2hvdFVybH0nYCk7XG4gICAgICAgIHRoaXMubWpwZWdTdHJlYW0gPSBuZXcgbWpwZWcuTUpwZWdTdHJlYW0odGhpcy5vcHRzLm1qcGVnU2NyZWVuc2hvdFVybCk7XG4gICAgICAgIGF3YWl0IHRoaXMubWpwZWdTdHJlYW0uc3RhcnQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbc2Vzc2lvbklkLCBjYXBzXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICBhd2FpdCB0aGlzLmRlbGV0ZVNlc3Npb24oKTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc3RhcnQgKCkge1xuICAgIHRoaXMub3B0cy5ub1Jlc2V0ID0gISF0aGlzLm9wdHMubm9SZXNldDtcbiAgICB0aGlzLm9wdHMuZnVsbFJlc2V0ID0gISF0aGlzLm9wdHMuZnVsbFJlc2V0O1xuXG4gICAgYXdhaXQgcHJpbnRVc2VyKCk7XG5cbiAgICBpZiAodGhpcy5vcHRzLnBsYXRmb3JtVmVyc2lvbiAmJiBwYXJzZUZsb2F0KHRoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb24pIDwgOS4zKSB7XG4gICAgICB0aHJvdyBFcnJvcihgUGxhdGZvcm0gdmVyc2lvbiBtdXN0IGJlIDkuMyBvciBhYm92ZS4gJyR7dGhpcy5vcHRzLnBsYXRmb3JtVmVyc2lvbn0nIGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gICAgfVxuXG4gICAgY29uc3Qge2RldmljZSwgdWRpZCwgcmVhbERldmljZX0gPSBhd2FpdCB0aGlzLmRldGVybWluZURldmljZSgpO1xuICAgIGxvZy5pbmZvKGBEZXRlcm1pbmluZyBkZXZpY2UgdG8gcnVuIHRlc3RzIG9uOiB1ZGlkOiAnJHt1ZGlkfScsIHJlYWwgZGV2aWNlOiAke3JlYWxEZXZpY2V9YCk7XG4gICAgdGhpcy5vcHRzLmRldmljZSA9IGRldmljZTtcbiAgICB0aGlzLm9wdHMudWRpZCA9IHVkaWQ7XG4gICAgdGhpcy5vcHRzLnJlYWxEZXZpY2UgPSByZWFsRGV2aWNlO1xuXG4gICAgaWYgKF8uaXNFbXB0eSh0aGlzLnhjb2RlVmVyc2lvbikgJiYgKCF0aGlzLm9wdHMud2ViRHJpdmVyQWdlbnRVcmwgfHwgIXRoaXMub3B0cy5yZWFsRGV2aWNlKSkge1xuICAgICAgLy8gbm8gYHdlYkRyaXZlckFnZW50VXJsYCwgb3Igb24gYSBzaW11bGF0b3IsIHNvIHdlIG5lZWQgYW4gWGNvZGUgdmVyc2lvblxuICAgICAgdGhpcy54Y29kZVZlcnNpb24gPSBhd2FpdCBnZXRBbmRDaGVja1hjb2RlVmVyc2lvbigpO1xuICAgICAgY29uc3QgdG9vbHMgPSAhdGhpcy54Y29kZVZlcnNpb24udG9vbHNWZXJzaW9uID8gJycgOiBgKHRvb2xzIHYke3RoaXMueGNvZGVWZXJzaW9uLnRvb2xzVmVyc2lvbn0pYDtcbiAgICAgIGxvZy5kZWJ1ZyhgWGNvZGUgdmVyc2lvbiBzZXQgdG8gJyR7dGhpcy54Y29kZVZlcnNpb24udmVyc2lvblN0cmluZ30nICR7dG9vbHN9YCk7XG5cbiAgICAgIHRoaXMuaW9zU2RrVmVyc2lvbiA9IGF3YWl0IGdldEFuZENoZWNrSW9zU2RrVmVyc2lvbigpO1xuICAgICAgbG9nLmRlYnVnKGBpT1MgU0RLIFZlcnNpb24gc2V0IHRvICcke3RoaXMuaW9zU2RrVmVyc2lvbn0nYCk7XG4gICAgfVxuICAgIHRoaXMubG9nRXZlbnQoJ3hjb2RlRGV0YWlsc1JldHJpZXZlZCcpO1xuXG4gICAgaWYgKHRoaXMub3B0cy5lbmFibGVBc3luY0V4ZWN1dGVGcm9tSHR0cHMgJiYgIXRoaXMuaXNSZWFsRGV2aWNlKCkpIHtcbiAgICAgIC8vIHNodXRkb3duIHRoZSBzaW11bGF0b3Igc28gdGhhdCB0aGUgc3NsIGNlcnQgaXMgcmVjb2duaXplZFxuICAgICAgYXdhaXQgc2h1dGRvd25TaW11bGF0b3IodGhpcy5vcHRzLmRldmljZSk7XG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0SHR0cHNBc3luY1NlcnZlcigpO1xuICAgIH1cblxuICAgIC8vIGF0IHRoaXMgcG9pbnQgaWYgdGhlcmUgaXMgbm8gcGxhdGZvcm1WZXJzaW9uLCBnZXQgaXQgZnJvbSB0aGUgZGV2aWNlXG4gICAgaWYgKCF0aGlzLm9wdHMucGxhdGZvcm1WZXJzaW9uKSB7XG4gICAgICBpZiAodGhpcy5vcHRzLmRldmljZSAmJiBfLmlzRnVuY3Rpb24odGhpcy5vcHRzLmRldmljZS5nZXRQbGF0Zm9ybVZlcnNpb24pKSB7XG4gICAgICAgIHRoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb24gPSBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLmdldFBsYXRmb3JtVmVyc2lvbigpO1xuICAgICAgICBsb2cuaW5mbyhgTm8gcGxhdGZvcm1WZXJzaW9uIHNwZWNpZmllZC4gVXNpbmcgZGV2aWNlIHZlcnNpb246ICcke3RoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb259J2ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyB3aGVuIGl0IGlzIGEgcmVhbCBkZXZpY2UuIHdoZW4gd2UgaGF2ZSBhIHJlYWwgb2JqZWN0IHdpcmUgaXQgaW5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0cy53ZWJEcml2ZXJBZ2VudFVybCAmJiB0aGlzLmlvc1Nka1ZlcnNpb24pIHtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0aGF0IHRoZSB4Y29kZSB3ZSBhcmUgdXNpbmcgY2FuIGhhbmRsZSB0aGUgcGxhdGZvcm1cbiAgICAgIGlmIChwYXJzZUZsb2F0KHRoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb24pID4gcGFyc2VGbG9hdCh0aGlzLmlvc1Nka1ZlcnNpb24pKSB7XG4gICAgICAgIGxldCBtc2cgPSBgWGNvZGUgJHt0aGlzLnhjb2RlVmVyc2lvbi52ZXJzaW9uU3RyaW5nfSBoYXMgYSBtYXhpbXVtIFNESyB2ZXJzaW9uIG9mICR7dGhpcy5pb3NTZGtWZXJzaW9ufS4gYCArXG4gICAgICAgICAgICAgICAgICBgSXQgZG9lcyBub3Qgc3VwcG9ydCBpT1MgdmVyc2lvbiAke3RoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb259YDtcbiAgICAgICAgbG9nLmVycm9yQW5kVGhyb3cobXNnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmRlYnVnKCdYY29kZSB2ZXJzaW9uIHdpbGwgbm90IGJlIHZhbGlkYXRlZCBhZ2FpbnN0IGlPUyBTREsgdmVyc2lvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMub3B0cy5icm93c2VyTmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKSA9PT0gJ3NhZmFyaScpIHtcbiAgICAgIGxvZy5pbmZvKCdTYWZhcmkgdGVzdCByZXF1ZXN0ZWQnKTtcbiAgICAgIHRoaXMuc2FmYXJpID0gdHJ1ZTtcbiAgICAgIHRoaXMub3B0cy5hcHAgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLm9wdHMucHJvY2Vzc0FyZ3VtZW50cyA9IHRoaXMub3B0cy5wcm9jZXNzQXJndW1lbnRzIHx8IHt9O1xuICAgICAgdGhpcy5vcHRzLmJ1bmRsZUlkID0gU0FGQVJJX0JVTkRMRV9JRDtcbiAgICAgIHRoaXMuX2N1cnJlbnRVcmwgPSB0aGlzLm9wdHMuc2FmYXJpSW5pdGlhbFVybCB8fCAoXG4gICAgICAgIHRoaXMuaXNSZWFsRGV2aWNlKClcbiAgICAgICAgICA/ICdodHRwOi8vYXBwaXVtLmlvJ1xuICAgICAgICAgIDogYGh0dHA6Ly8ke3RoaXMub3B0cy5hZGRyZXNzfToke3RoaXMub3B0cy5wb3J0fS93ZWxjb21lYFxuICAgICAgKTtcbiAgICAgIHRoaXMub3B0cy5wcm9jZXNzQXJndW1lbnRzLmFyZ3MgPSBbJy11JywgdGhpcy5fY3VycmVudFVybF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IHRoaXMuY29uZmlndXJlQXBwKCk7XG4gICAgfVxuICAgIHRoaXMubG9nRXZlbnQoJ2FwcENvbmZpZ3VyZWQnKTtcblxuICAgIC8vIGZhaWwgdmVyeSBlYXJseSBpZiB0aGUgYXBwIGRvZXNuJ3QgYWN0dWFsbHkgZXhpc3RcbiAgICAvLyBvciBpZiBidW5kbGUgaWQgZG9lc24ndCBwb2ludCB0byBhbiBpbnN0YWxsZWQgYXBwXG4gICAgaWYgKHRoaXMub3B0cy5hcHApIHtcbiAgICAgIGF3YWl0IGNoZWNrQXBwUHJlc2VudCh0aGlzLm9wdHMuYXBwKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0cy5idW5kbGVJZCkge1xuICAgICAgdGhpcy5vcHRzLmJ1bmRsZUlkID0gYXdhaXQgYXBwVXRpbHMuZXh0cmFjdEJ1bmRsZUlkKHRoaXMub3B0cy5hcHApO1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMucnVuUmVzZXQoKTtcblxuICAgIGNvbnN0IHN0YXJ0TG9nQ2FwdHVyZSA9IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc3RhcnRMb2dDYXB0dXJlKCk7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIHRoaXMubG9nRXZlbnQoJ2xvZ0NhcHR1cmVTdGFydGVkJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgY29uc3QgaXNMb2dDYXB0dXJlU3RhcnRlZCA9IGF3YWl0IHN0YXJ0TG9nQ2FwdHVyZSgpO1xuXG4gICAgbG9nLmluZm8oYFNldHRpbmcgdXAgJHt0aGlzLmlzUmVhbERldmljZSgpID8gJ3JlYWwgZGV2aWNlJyA6ICdzaW11bGF0b3InfWApO1xuXG4gICAgaWYgKHRoaXMuaXNTaW11bGF0b3IoKSkge1xuICAgICAgaWYgKHRoaXMub3B0cy5zaHV0ZG93bk90aGVyU2ltdWxhdG9ycykge1xuICAgICAgICBpZiAoIXRoaXMucmVsYXhlZFNlY3VyaXR5RW5hYmxlZCkge1xuICAgICAgICAgIGxvZy5lcnJvckFuZFRocm93KGBBcHBpdW0gc2VydmVyIG11c3QgaGF2ZSByZWxheGVkIHNlY3VyaXR5IGZsYWcgc2V0IGluIG9yZGVyIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBmb3IgJ3NodXRkb3duT3RoZXJTaW11bGF0b3JzJyBjYXBhYmlsaXR5IHRvIHdvcmtgKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBzaHV0ZG93bk90aGVyU2ltdWxhdG9ycyh0aGlzLm9wdHMuZGV2aWNlKTtcbiAgICAgIH1cblxuICAgICAgLy8gc2V0IHJlZHVjZU1vdGlvbiBpZiBjYXBhYmlsaXR5IGlzIHNldFxuICAgICAgaWYgKHV0aWwuaGFzVmFsdWUodGhpcy5vcHRzLnJlZHVjZU1vdGlvbikpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5vcHRzLmRldmljZS5zZXRSZWR1Y2VNb3Rpb24odGhpcy5vcHRzLnJlZHVjZU1vdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9jYWxDb25maWcgPSBhd2FpdCBpb3NTZXR0aW5ncy5zZXRMb2NhbGVBbmRQcmVmZXJlbmNlcyh0aGlzLm9wdHMuZGV2aWNlLCB0aGlzLm9wdHMsIHRoaXMuaXNTYWZhcmkoKSwgYXN5bmMgKHNpbSkgPT4ge1xuICAgICAgICBhd2FpdCBzaHV0ZG93blNpbXVsYXRvcihzaW0pO1xuXG4gICAgICAgIC8vIHdlIGRvbid0IGtub3cgaWYgdGhlcmUgbmVlZHMgdG8gYmUgY2hhbmdlcyBhIHByaW9yaSwgc28gY2hhbmdlIGZpcnN0LlxuICAgICAgICAvLyBzb21ldGltZXMgdGhlIHNodXRkb3duIHByb2Nlc3MgY2hhbmdlcyB0aGUgc2V0dGluZ3MsIHNvIHJlc2V0IHRoZW0sXG4gICAgICAgIC8vIGtub3dpbmcgdGhhdCB0aGUgc2ltIGlzIGFscmVhZHkgc2h1dFxuICAgICAgICBhd2FpdCBpb3NTZXR0aW5ncy5zZXRMb2NhbGVBbmRQcmVmZXJlbmNlcyhzaW0sIHRoaXMub3B0cywgdGhpcy5pc1NhZmFyaSgpKTtcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0U2ltKCk7XG5cbiAgICAgIGlmICh0aGlzLm9wdHMuY3VzdG9tU1NMQ2VydCkge1xuICAgICAgICBpZiAoYXdhaXQgaGFzU1NMQ2VydCh0aGlzLm9wdHMuY3VzdG9tU1NMQ2VydCwgdGhpcy5vcHRzLnVkaWQpKSB7XG4gICAgICAgICAgbG9nLmluZm8oYFNTTCBjZXJ0ICcke18udHJ1bmNhdGUodGhpcy5vcHRzLmN1c3RvbVNTTENlcnQsIHtsZW5ndGg6IDIwfSl9JyBhbHJlYWR5IGluc3RhbGxlZGApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZy5pbmZvKGBJbnN0YWxsaW5nIHNzbCBjZXJ0ICcke18udHJ1bmNhdGUodGhpcy5vcHRzLmN1c3RvbVNTTENlcnQsIHtsZW5ndGg6IDIwfSl9J2ApO1xuICAgICAgICAgIGF3YWl0IHNodXRkb3duU2ltdWxhdG9yKHRoaXMub3B0cy5kZXZpY2UpO1xuICAgICAgICAgIGF3YWl0IGluc3RhbGxTU0xDZXJ0KHRoaXMub3B0cy5jdXN0b21TU0xDZXJ0LCB0aGlzLm9wdHMudWRpZCk7XG4gICAgICAgICAgbG9nLmluZm8oYFJlc3RhcnRpbmcgU2ltdWxhdG9yIHNvIHRoYXQgU1NMIGNlcnRpZmljYXRlIGluc3RhbGxhdGlvbiB0YWtlcyBlZmZlY3RgKTtcbiAgICAgICAgICBhd2FpdCB0aGlzLnN0YXJ0U2ltKCk7XG4gICAgICAgICAgdGhpcy5sb2dFdmVudCgnY3VzdG9tQ2VydEluc3RhbGxlZCcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9nRXZlbnQoJ3NpbVN0YXJ0ZWQnKTtcbiAgICAgIGlmICghaXNMb2dDYXB0dXJlU3RhcnRlZCkge1xuICAgICAgICAvLyBSZXRyeSBsb2cgY2FwdHVyZSBpZiBTaW11bGF0b3Igd2FzIG5vdCBydW5uaW5nIGJlZm9yZVxuICAgICAgICBhd2FpdCBzdGFydExvZ0NhcHR1cmUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRzLmFwcCkge1xuICAgICAgYXdhaXQgdGhpcy5pbnN0YWxsQVVUKCk7XG4gICAgICB0aGlzLmxvZ0V2ZW50KCdhcHBJbnN0YWxsZWQnKTtcbiAgICB9XG5cbiAgICAvLyBpZiB3ZSBvbmx5IGhhdmUgYnVuZGxlIGlkZW50aWZpZXIgYW5kIG5vIGFwcCwgZmFpbCBpZiBpdCBpcyBub3QgYWxyZWFkeSBpbnN0YWxsZWRcbiAgICBpZiAoIXRoaXMub3B0cy5hcHAgJiYgdGhpcy5vcHRzLmJ1bmRsZUlkICYmICF0aGlzLnNhZmFyaSkge1xuICAgICAgaWYgKCFhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLmlzQXBwSW5zdGFsbGVkKHRoaXMub3B0cy5idW5kbGVJZCkpIHtcbiAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coYEFwcCB3aXRoIGJ1bmRsZSBpZGVudGlmaWVyICcke3RoaXMub3B0cy5idW5kbGVJZH0nIHVua25vd25gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRzLnBlcm1pc3Npb25zKSB7XG4gICAgICBpZiAodGhpcy5pc1NpbXVsYXRvcigpKSB7XG4gICAgICAgIGxvZy5kZWJ1ZygnU2V0dGluZyB0aGUgcmVxdWVzdGVkIHBlcm1pc3Npb25zIGJlZm9yZSBXREEgaXMgc3RhcnRlZCcpO1xuICAgICAgICBmb3IgKGNvbnN0IFtidW5kbGVJZCwgcGVybWlzc2lvbnNNYXBwaW5nXSBvZiBfLnRvUGFpcnMoSlNPTi5wYXJzZSh0aGlzLm9wdHMucGVybWlzc2lvbnMpKSkge1xuICAgICAgICAgIGF3YWl0IHRoaXMub3B0cy5kZXZpY2Uuc2V0UGVybWlzc2lvbnMoYnVuZGxlSWQsIHBlcm1pc3Npb25zTWFwcGluZyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy53YXJuKCdTZXR0aW5nIHBlcm1pc3Npb25zIGlzIG9ubHkgc3VwcG9ydGVkIG9uIFNpbXVsYXRvci4gJyArXG4gICAgICAgICAgJ1RoZSBcInBlcm1pc3Npb25zXCIgY2FwYWJpbGl0eSB3aWxsIGJlIGlnbm9yZWQuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXdhaXQgU0hBUkVEX1JFU09VUkNFU19HVUFSRC5hY3F1aXJlKFhDVUlUZXN0RHJpdmVyLm5hbWUsXG4gICAgICBhc3luYyAoKSA9PiBhd2FpdCB0aGlzLnN0YXJ0V2RhKHRoaXMub3B0cy5zZXNzaW9uSWQsIHJlYWxEZXZpY2UpKTtcblxuICAgIGF3YWl0IHRoaXMuc2V0SW5pdGlhbE9yaWVudGF0aW9uKHRoaXMub3B0cy5vcmllbnRhdGlvbik7XG4gICAgdGhpcy5sb2dFdmVudCgnb3JpZW50YXRpb25TZXQnKTtcblxuICAgIGlmICh0aGlzLmlzUmVhbERldmljZSgpICYmIHRoaXMub3B0cy5zdGFydElXRFApIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc3RhcnRJV0RQKCk7XG4gICAgICAgIGxvZy5kZWJ1ZyhgU3RhcnRlZCBpb3Nfd2Via2l0X2RlYnVnIHByb3h5IHNlcnZlciBhdDogJHt0aGlzLml3ZHBTZXJ2ZXIuZW5kcG9pbnR9YCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coYENvdWxkIG5vdCBzdGFydCBpb3Nfd2Via2l0X2RlYnVnX3Byb3h5IHNlcnZlcjogJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1NhZmFyaSgpIHx8IHRoaXMub3B0cy5hdXRvV2Vidmlldykge1xuICAgICAgbG9nLmRlYnVnKCdXYWl0aW5nIGZvciBpbml0aWFsIHdlYnZpZXcnKTtcbiAgICAgIGF3YWl0IHRoaXMubmF2VG9Jbml0aWFsV2VidmlldygpO1xuICAgICAgdGhpcy5sb2dFdmVudCgnaW5pdGlhbFdlYnZpZXdOYXZpZ2F0ZWQnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNSZWFsRGV2aWNlKCkpIHtcbiAgICAgIGlmICh0aGlzLm9wdHMuY2FsZW5kYXJBY2Nlc3NBdXRob3JpemVkKSB7XG4gICAgICAgIGF3YWl0IHRoaXMub3B0cy5kZXZpY2UuZW5hYmxlQ2FsZW5kYXJBY2Nlc3ModGhpcy5vcHRzLmJ1bmRsZUlkKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRzLmNhbGVuZGFyQWNjZXNzQXV0aG9yaXplZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5vcHRzLmRldmljZS5kaXNhYmxlQ2FsZW5kYXJBY2Nlc3ModGhpcy5vcHRzLmJ1bmRsZUlkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgV2ViRHJpdmVyQWdlbnRSdW5uZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlc3Npb25JZCAtIFRoZSBpZCBvZiB0aGUgdGFyZ2V0IHNlc3Npb24gdG8gbGF1bmNoIFdEQSB3aXRoLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlYWxEZXZpY2UgLSBFcXVhbHMgdG8gdHJ1ZSBpZiB0aGUgdGVzdCB0YXJnZXQgZGV2aWNlIGlzIGEgcmVhbCBkZXZpY2UuXG4gICAqL1xuICBhc3luYyBzdGFydFdkYSAoc2Vzc2lvbklkLCByZWFsRGV2aWNlKSB7XG4gICAgdGhpcy53ZGEgPSBuZXcgV2ViRHJpdmVyQWdlbnQodGhpcy54Y29kZVZlcnNpb24sIHRoaXMub3B0cyk7XG5cbiAgICBhd2FpdCB0aGlzLndkYS5jbGVhbnVwT2Jzb2xldGVQcm9jZXNzZXMoKTtcblxuICAgIGlmICh0aGlzLm9wdHMudXNlTmV3V0RBKSB7XG4gICAgICBsb2cuZGVidWcoYENhcGFiaWxpdHkgJ3VzZU5ld1dEQScgc2V0IHRvIHRydWUsIHNvIHVuaW5zdGFsbGluZyBXREEgYmVmb3JlIHByb2NlZWRpbmdgKTtcbiAgICAgIGF3YWl0IHRoaXMud2RhLnF1aXRBbmRVbmluc3RhbGwoKTtcbiAgICAgIHRoaXMubG9nRXZlbnQoJ3dkYVVuaW5zdGFsbGVkJyk7XG4gICAgfSBlbHNlIGlmICghdXRpbC5oYXNWYWx1ZSh0aGlzLndkYS53ZWJEcml2ZXJBZ2VudFVybCkpIHtcbiAgICAgIGF3YWl0IHRoaXMud2RhLnNldHVwQ2FjaGluZyh0aGlzLm9wdHMudXBkYXRlZFdEQUJ1bmRsZUlkKTtcbiAgICB9XG5cbiAgICAvLyBsb2NhbCBoZWxwZXIgZm9yIHRoZSB0d28gcGxhY2VzIHdlIG5lZWQgdG8gdW5pbnN0YWxsIHdkYSBhbmQgcmUtc3RhcnQgaXRcbiAgICBjb25zdCBxdWl0QW5kVW5pbnN0YWxsID0gYXN5bmMgKG1zZykgPT4ge1xuICAgICAgbG9nLmRlYnVnKG1zZyk7XG4gICAgICBpZiAodGhpcy5vcHRzLndlYkRyaXZlckFnZW50VXJsKSB7XG4gICAgICAgIGxvZy5kZWJ1ZygnTm90IHF1aXR0aW5nIGFuZCB1bnNpbnN0YWxsaW5nIFdlYkRyaXZlckFnZW50IGFzIHdlYkRyaXZlckFnZW50VXJsIGlzIHByb3ZpZGVkJyk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgbG9nLndhcm4oJ1F1aXR0aW5nIGFuZCB1bmluc3RhbGxpbmcgV2ViRHJpdmVyQWdlbnQsIHRoZW4gcmV0cnlpbmcnKTtcbiAgICAgIGF3YWl0IHRoaXMud2RhLnF1aXRBbmRVbmluc3RhbGwoKTtcblxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfTtcblxuICAgIGNvbnN0IHN0YXJ0dXBSZXRyaWVzID0gdGhpcy5vcHRzLndkYVN0YXJ0dXBSZXRyaWVzIHx8ICh0aGlzLmlzUmVhbERldmljZSgpID8gV0RBX1JFQUxfREVWX1NUQVJUVVBfUkVUUklFUyA6IFdEQV9TSU1fU1RBUlRVUF9SRVRSSUVTKTtcbiAgICBjb25zdCBzdGFydHVwUmV0cnlJbnRlcnZhbCA9IHRoaXMub3B0cy53ZGFTdGFydHVwUmV0cnlJbnRlcnZhbCB8fCBXREFfU1RBUlRVUF9SRVRSWV9JTlRFUlZBTDtcbiAgICBsb2cuZGVidWcoYFRyeWluZyB0byBzdGFydCBXZWJEcml2ZXJBZ2VudCAke3N0YXJ0dXBSZXRyaWVzfSB0aW1lcyB3aXRoICR7c3RhcnR1cFJldHJ5SW50ZXJ2YWx9bXMgaW50ZXJ2YWxgKTtcbiAgICBhd2FpdCByZXRyeUludGVydmFsKHN0YXJ0dXBSZXRyaWVzLCBzdGFydHVwUmV0cnlJbnRlcnZhbCwgYXN5bmMgKCkgPT4ge1xuICAgICAgdGhpcy5sb2dFdmVudCgnd2RhU3RhcnRBdHRlbXB0ZWQnKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIG9uIHhjb2RlIDEwIGluc3RhbGxkIHdpbGwgb2Z0ZW4gdHJ5IHRvIGFjY2VzcyB0aGUgYXBwIGZyb20gaXRzIHN0YWdpbmdcbiAgICAgICAgLy8gZGlyZWN0b3J5IGJlZm9yZSBmdWxseSBtb3ZpbmcgaXQgdGhlcmUsIGFuZCBmYWlsLiBSZXRyeWluZyBvbmNlXG4gICAgICAgIC8vIGltbWVkaWF0ZWx5IGhlbHBzXG4gICAgICAgIGNvbnN0IHJldHJpZXMgPSB0aGlzLnhjb2RlVmVyc2lvbi5tYWpvciA+PSAxMCA/IDIgOiAxO1xuICAgICAgICB0aGlzLmNhY2hlZFdkYVN0YXR1cyA9IGF3YWl0IHJldHJ5KHJldHJpZXMsIHRoaXMud2RhLmxhdW5jaC5iaW5kKHRoaXMud2RhKSwgc2Vzc2lvbklkLCByZWFsRGV2aWNlKTtcbiAgICAgICAgLy8gdGhpcy5jYWNoZWRXZGFTdGF0dXMgPSBhd2FpdCB0aGlzLndkYS5sYXVuY2goc2Vzc2lvbklkLCByZWFsRGV2aWNlKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aGlzLmxvZ0V2ZW50KCd3ZGFTdGFydEZhaWxlZCcpO1xuICAgICAgICBsZXQgZXJyb3JNc2cgPSBgVW5hYmxlIHRvIGxhdW5jaCBXZWJEcml2ZXJBZ2VudCBiZWNhdXNlIG9mIHhjb2RlYnVpbGQgZmFpbHVyZTogXCIke2Vyci5tZXNzYWdlfVwiLmA7XG4gICAgICAgIGlmICh0aGlzLmlzUmVhbERldmljZSgpKSB7XG4gICAgICAgICAgZXJyb3JNc2cgKz0gYCBNYWtlIHN1cmUgeW91IGZvbGxvdyB0aGUgdHV0b3JpYWwgYXQgJHtXREFfUkVBTF9ERVZfVFVUT1JJQUxfVVJMfS4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgYFRyeSB0byByZW1vdmUgdGhlIFdlYkRyaXZlckFnZW50UnVubmVyIGFwcGxpY2F0aW9uIGZyb20gdGhlIGRldmljZSBpZiBpdCBpcyBpbnN0YWxsZWQgYCArXG4gICAgICAgICAgICAgICAgICAgICAgYGFuZCByZWJvb3QgdGhlIGRldmljZS5gO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHF1aXRBbmRVbmluc3RhbGwoZXJyb3JNc2cpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnByb3h5UmVxUmVzID0gdGhpcy53ZGEucHJveHlSZXFSZXMuYmluZCh0aGlzLndkYSk7XG4gICAgICB0aGlzLmp3cFByb3h5QWN0aXZlID0gdHJ1ZTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgcmV0cnlJbnRlcnZhbCgxNSwgMTAwMCwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIHRoaXMubG9nRXZlbnQoJ3dkYVNlc3Npb25BdHRlbXB0ZWQnKTtcbiAgICAgICAgICBsb2cuZGVidWcoJ1NlbmRpbmcgY3JlYXRlU2Vzc2lvbiBjb21tYW5kIHRvIFdEQScpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlZFdkYVN0YXR1cyA9IHRoaXMuY2FjaGVkV2RhU3RhdHVzIHx8IGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvc3RhdHVzJywgJ0dFVCcpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zdGFydFdkYVNlc3Npb24odGhpcy5vcHRzLmJ1bmRsZUlkLCB0aGlzLm9wdHMucHJvY2Vzc0FyZ3VtZW50cyk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoYEZhaWxlZCB0byBjcmVhdGUgV0RBIHNlc3Npb24gKCR7ZXJyLm1lc3NhZ2V9KS4gUmV0cnlpbmcuLi5gKTtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxvZ0V2ZW50KCd3ZGFTZXNzaW9uU3RhcnRlZCcpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxldCBlcnJvck1zZyA9IGBVbmFibGUgdG8gc3RhcnQgV2ViRHJpdmVyQWdlbnQgc2Vzc2lvbiBiZWNhdXNlIG9mIHhjb2RlYnVpbGQgZmFpbHVyZTogJHtlcnIubWVzc2FnZX1gO1xuICAgICAgICBpZiAodGhpcy5pc1JlYWxEZXZpY2UoKSkge1xuICAgICAgICAgIGVycm9yTXNnICs9IGAgTWFrZSBzdXJlIHlvdSBmb2xsb3cgdGhlIHR1dG9yaWFsIGF0ICR7V0RBX1JFQUxfREVWX1RVVE9SSUFMX1VSTH0uIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGBUcnkgdG8gcmVtb3ZlIHRoZSBXZWJEcml2ZXJBZ2VudFJ1bm5lciBhcHBsaWNhdGlvbiBmcm9tIHRoZSBkZXZpY2UgaWYgaXQgaXMgaW5zdGFsbGVkIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGBhbmQgcmVib290IHRoZSBkZXZpY2UuYDtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBxdWl0QW5kVW5pbnN0YWxsKGVycm9yTXNnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF1dGlsLmhhc1ZhbHVlKHRoaXMub3B0cy5wcmV2ZW50V0RBQXR0YWNobWVudHMpKSB7XG4gICAgICAgIC8vIFhDVGVzdCBwcmlvciB0byBYY29kZSA5IFNESyBoYXMgbm8gbmF0aXZlIHdheSB0byBkaXNhYmxlIGF0dGFjaG1lbnRzXG4gICAgICAgIHRoaXMub3B0cy5wcmV2ZW50V0RBQXR0YWNobWVudHMgPSB0aGlzLnhjb2RlVmVyc2lvbi5tYWpvciA8IDk7XG4gICAgICAgIGlmICh0aGlzLm9wdHMucHJldmVudFdEQUF0dGFjaG1lbnRzKSB7XG4gICAgICAgICAgbG9nLmluZm8oJ0VuYWJsZWQgV0RBIGF0dGFjaG1lbnRzIHByZXZlbnRpb24gYnkgZGVmYXVsdCB0byBzYXZlIHRoZSBkaXNrIHNwYWNlLiAnICtcbiAgICAgICAgICAgICAgICAgICBgU2V0ICdwcmV2ZW50V0RBQXR0YWNobWVudHMnIGNhcGFiaWxpdHkgdG8gZmFsc2UgaWYgdGhpcyBpcyBhbiB1bmRlc2lyZWQgYmVoYXZpb3IuYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm9wdHMucHJldmVudFdEQUF0dGFjaG1lbnRzKSB7XG4gICAgICAgIGF3YWl0IGFkanVzdFdEQUF0dGFjaG1lbnRzUGVybWlzc2lvbnModGhpcy53ZGEsIHRoaXMub3B0cy5wcmV2ZW50V0RBQXR0YWNobWVudHMgPyAnNTU1JyA6ICc3NTUnKTtcbiAgICAgICAgdGhpcy5sb2dFdmVudCgnd2RhUGVybXNBZGp1c3RlZCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRzLmNsZWFyU3lzdGVtRmlsZXMpIHtcbiAgICAgICAgYXdhaXQgbWFya1N5c3RlbUZpbGVzRm9yQ2xlYW51cCh0aGlzLndkYSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHdlIGV4cGVjdCBjZXJ0YWluIHNvY2tldCBlcnJvcnMgdW50aWwgdGhpcyBwb2ludCwgYnV0IG5vd1xuICAgICAgLy8gbWFyayB0aGluZ3MgYXMgZnVsbHkgd29ya2luZ1xuICAgICAgdGhpcy53ZGEuZnVsbHlTdGFydGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMubG9nRXZlbnQoJ3dkYVN0YXJ0ZWQnKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHJ1blJlc2V0IChvcHRzID0gbnVsbCkge1xuICAgIHRoaXMubG9nRXZlbnQoJ3Jlc2V0U3RhcnRlZCcpO1xuICAgIGlmICh0aGlzLmlzUmVhbERldmljZSgpKSB7XG4gICAgICBhd2FpdCBydW5SZWFsRGV2aWNlUmVzZXQodGhpcy5vcHRzLmRldmljZSwgb3B0cyB8fCB0aGlzLm9wdHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCBydW5TaW11bGF0b3JSZXNldCh0aGlzLm9wdHMuZGV2aWNlLCBvcHRzIHx8IHRoaXMub3B0cyk7XG4gICAgfVxuICAgIHRoaXMubG9nRXZlbnQoJ3Jlc2V0Q29tcGxldGUnKTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVNlc3Npb24gKCkge1xuICAgIGF3YWl0IHJlbW92ZUFsbFNlc3Npb25XZWJTb2NrZXRIYW5kbGVycyh0aGlzLnNlcnZlciwgdGhpcy5zZXNzaW9uSWQpO1xuXG4gICAgYXdhaXQgU0hBUkVEX1JFU09VUkNFU19HVUFSRC5hY3F1aXJlKFhDVUlUZXN0RHJpdmVyLm5hbWUsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRoaXMuc3RvcCgpO1xuXG4gICAgICAvLyByZXNldCB0aGUgcGVybWlzc2lvbnMgb24gdGhlIGRlcml2ZWQgZGF0YSBmb2xkZXIsIGlmIG5lY2Vzc2FyeVxuICAgICAgaWYgKHRoaXMub3B0cy5wcmV2ZW50V0RBQXR0YWNobWVudHMpIHtcbiAgICAgICAgYXdhaXQgYWRqdXN0V0RBQXR0YWNobWVudHNQZXJtaXNzaW9ucyh0aGlzLndkYSwgJzc1NScpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRzLmNsZWFyU3lzdGVtRmlsZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBcHBUZW1wb3JhcnkpIHtcbiAgICAgICAgICBhd2FpdCBmcy5yaW1yYWYodGhpcy5vcHRzLmFwcCk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgY2xlYXJTeXN0ZW1GaWxlcyh0aGlzLndkYSwgISF0aGlzLm9wdHMuc2hvd1hjb2RlTG9nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy5kZWJ1ZygnTm90IGNsZWFyaW5nIGxvZyBmaWxlcy4gVXNlIGBjbGVhclN5c3RlbUZpbGVzYCBjYXBhYmlsaXR5IHRvIHR1cm4gb24uJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgICAgbG9nLmRlYnVnKCdJbiBhIHdlYiBzZXNzaW9uLiBSZW1vdmluZyByZW1vdGUgZGVidWdnZXInKTtcbiAgICAgIGF3YWl0IHRoaXMuc3RvcFJlbW90ZSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdHMucmVzZXRPblNlc3Npb25TdGFydE9ubHkgPT09IGZhbHNlKSB7XG4gICAgICBhd2FpdCB0aGlzLnJ1blJlc2V0KCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNTaW11bGF0b3IoKSAmJiAhdGhpcy5vcHRzLm5vUmVzZXQgJiYgISF0aGlzLm9wdHMuZGV2aWNlKSB7XG4gICAgICBpZiAodGhpcy5saWZlY3ljbGVEYXRhLmNyZWF0ZVNpbSkge1xuICAgICAgICBsb2cuZGVidWcoYERlbGV0aW5nIHNpbXVsYXRvciBjcmVhdGVkIGZvciB0aGlzIHJ1biAodWRpZDogJyR7dGhpcy5vcHRzLnVkaWR9JylgKTtcbiAgICAgICAgYXdhaXQgc2h1dGRvd25TaW11bGF0b3IodGhpcy5vcHRzLmRldmljZSk7XG4gICAgICAgIGF3YWl0IHRoaXMub3B0cy5kZXZpY2UuZGVsZXRlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFfLmlzRW1wdHkodGhpcy5sb2dzKSkge1xuICAgICAgYXdhaXQgdGhpcy5sb2dzLnN5c2xvZy5zdG9wQ2FwdHVyZSgpO1xuICAgICAgdGhpcy5sb2dzID0ge307XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXdkcFNlcnZlcikge1xuICAgICAgYXdhaXQgdGhpcy5zdG9wSVdEUCgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdHMuZW5hYmxlQXN5bmNFeGVjdXRlRnJvbUh0dHBzICYmICF0aGlzLmlzUmVhbERldmljZSgpKSB7XG4gICAgICBhd2FpdCB0aGlzLnN0b3BIdHRwc0FzeW5jU2VydmVyKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubWpwZWdTdHJlYW0pIHtcbiAgICAgIGxvZy5pbmZvKCdDbG9zaW5nIE1KUEVHIHN0cmVhbScpO1xuICAgICAgdGhpcy5tanBlZ1N0cmVhbS5zdG9wKCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZXNldElvcygpO1xuXG4gICAgYXdhaXQgc3VwZXIuZGVsZXRlU2Vzc2lvbigpO1xuICB9XG5cbiAgYXN5bmMgc3RvcCAoKSB7XG4gICAgdGhpcy5qd3BQcm94eUFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMucHJveHlSZXFSZXMgPSBudWxsO1xuXG4gICAgaWYgKHRoaXMud2RhICYmIHRoaXMud2RhLmZ1bGx5U3RhcnRlZCkge1xuICAgICAgaWYgKHRoaXMud2RhLmp3cHJveHkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChgL3Nlc3Npb24vJHt0aGlzLnNlc3Npb25JZH1gLCAnREVMRVRFJyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIC8vIGFuIGVycm9yIGhlcmUgc2hvdWxkIG5vdCBzaG9ydC1jaXJjdWl0IHRoZSByZXN0IG9mIGNsZWFuIHVwXG4gICAgICAgICAgbG9nLmRlYnVnKGBVbmFibGUgdG8gREVMRVRFIHNlc3Npb24gb24gV0RBOiAnJHtlcnIubWVzc2FnZX0nLiBDb250aW51aW5nIHNodXRkb3duLmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy53ZGEgJiYgIXRoaXMud2RhLndlYkRyaXZlckFnZW50VXJsICYmIHRoaXMub3B0cy51c2VOZXdXREEpIHtcbiAgICAgICAgYXdhaXQgdGhpcy53ZGEucXVpdCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGV4ZWN1dGVDb21tYW5kIChjbWQsIC4uLmFyZ3MpIHtcbiAgICBsb2cuZGVidWcoYEV4ZWN1dGluZyBjb21tYW5kICcke2NtZH0nYCk7XG5cbiAgICBpZiAoY21kID09PSAncmVjZWl2ZUFzeW5jUmVzcG9uc2UnKSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZWNlaXZlQXN5bmNSZXNwb25zZSguLi5hcmdzKTtcbiAgICB9XG4gICAgLy8gVE9ETzogb25jZSB0aGlzIGZpeCBnZXRzIGludG8gYmFzZSBkcml2ZXIgcmVtb3ZlIGZyb20gaGVyZVxuICAgIGlmIChjbWQgPT09ICdnZXRTdGF0dXMnKSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRTdGF0dXMoKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKGNtZCwgLi4uYXJncyk7XG4gIH1cblxuICBhc3luYyBjb25maWd1cmVBcHAgKCkge1xuICAgIGZ1bmN0aW9uIGFwcElzUGFja2FnZU9yQnVuZGxlIChhcHApIHtcbiAgICAgIHJldHVybiAoL14oW2EtekEtWjAtOVxcLV9dK1xcLlthLXpBLVowLTlcXC1fXSspKyQvKS50ZXN0KGFwcCk7XG4gICAgfVxuXG4gICAgLy8gdGhlIGFwcCBuYW1lIGlzIGEgYnVuZGxlSWQgYXNzaWduIGl0IHRvIHRoZSBidW5kbGVJZCBwcm9wZXJ0eVxuICAgIGlmICghdGhpcy5vcHRzLmJ1bmRsZUlkICYmIGFwcElzUGFja2FnZU9yQnVuZGxlKHRoaXMub3B0cy5hcHApKSB7XG4gICAgICB0aGlzLm9wdHMuYnVuZGxlSWQgPSB0aGlzLm9wdHMuYXBwO1xuICAgICAgdGhpcy5vcHRzLmFwcCA9ICcnO1xuICAgIH1cbiAgICAvLyB3ZSBoYXZlIGEgYnVuZGxlIElELCBidXQgbm8gYXBwLCBvciBhcHAgaXMgYWxzbyBhIGJ1bmRsZVxuICAgIGlmICgodGhpcy5vcHRzLmJ1bmRsZUlkICYmIGFwcElzUGFja2FnZU9yQnVuZGxlKHRoaXMub3B0cy5idW5kbGVJZCkpICYmXG4gICAgICAgICh0aGlzLm9wdHMuYXBwID09PSAnJyB8fCBhcHBJc1BhY2thZ2VPckJ1bmRsZSh0aGlzLm9wdHMuYXBwKSkpIHtcbiAgICAgIGxvZy5kZWJ1ZygnQXBwIGlzIGFuIGlPUyBidW5kbGUsIHdpbGwgYXR0ZW1wdCB0byBydW4gYXMgcHJlLWV4aXN0aW5nJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgZm9yIHN1cHBvcnRlZCBidWlsZC1pbiBhcHBzXG4gICAgaWYgKHRoaXMub3B0cy5hcHAgJiYgdGhpcy5vcHRzLmFwcC50b0xvd2VyQ2FzZSgpID09PSAnc2V0dGluZ3MnKSB7XG4gICAgICB0aGlzLm9wdHMuYnVuZGxlSWQgPSAnY29tLmFwcGxlLlByZWZlcmVuY2VzJztcbiAgICAgIHRoaXMub3B0cy5hcHAgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRzLmFwcCAmJiB0aGlzLm9wdHMuYXBwLnRvTG93ZXJDYXNlKCkgPT09ICdjYWxlbmRhcicpIHtcbiAgICAgIHRoaXMub3B0cy5idW5kbGVJZCA9ICdjb20uYXBwbGUubW9iaWxlY2FsJztcbiAgICAgIHRoaXMub3B0cy5hcHAgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG9yaWdpbmFsQXBwUGF0aCA9IHRoaXMub3B0cy5hcHA7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGRvd25sb2FkIGlmIG5lY2Vzc2FyeVxuICAgICAgdGhpcy5vcHRzLmFwcCA9IGF3YWl0IHRoaXMuaGVscGVycy5jb25maWd1cmVBcHAodGhpcy5vcHRzLmFwcCwgJy5hcHAnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy5lcnJvcihlcnIpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBCYWQgYXBwOiAke3RoaXMub3B0cy5hcHB9LiBBcHAgcGF0aHMgbmVlZCB0byBiZSBhYnNvbHV0ZSBvciBhbiBVUkwgdG8gYSBjb21wcmVzc2VkIGZpbGVgKTtcbiAgICB9XG4gICAgdGhpcy5pc0FwcFRlbXBvcmFyeSA9IHRoaXMub3B0cy5hcHAgJiYgYXdhaXQgZnMuZXhpc3RzKHRoaXMub3B0cy5hcHApXG4gICAgICAmJiAhYXdhaXQgdXRpbC5pc1NhbWVEZXN0aW5hdGlvbihvcmlnaW5hbEFwcFBhdGgsIHRoaXMub3B0cy5hcHApO1xuICB9XG5cbiAgYXN5bmMgZGV0ZXJtaW5lRGV2aWNlICgpIHtcbiAgICAvLyBpbiB0aGUgb25lIGNhc2Ugd2hlcmUgd2UgY3JlYXRlIGEgc2ltLCB3ZSB3aWxsIHNldCB0aGlzIHN0YXRlXG4gICAgdGhpcy5saWZlY3ljbGVEYXRhLmNyZWF0ZVNpbSA9IGZhbHNlO1xuXG4gICAgLy8gaWYgd2UgZ2V0IGdlbmVyaWMgbmFtZXMsIHRyYW5zbGF0ZSB0aGVtXG4gICAgdGhpcy5vcHRzLmRldmljZU5hbWUgPSB0cmFuc2xhdGVEZXZpY2VOYW1lKHRoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb24sIHRoaXMub3B0cy5kZXZpY2VOYW1lKTtcblxuICAgIGlmICh0aGlzLm9wdHMudWRpZCkge1xuICAgICAgaWYgKHRoaXMub3B0cy51ZGlkLnRvTG93ZXJDYXNlKCkgPT09ICdhdXRvJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMub3B0cy51ZGlkID0gYXdhaXQgZGV0ZWN0VWRpZCgpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAvLyBUcnlpbmcgdG8gZmluZCBtYXRjaGluZyBVRElEIGZvciBTaW11bGF0b3JcbiAgICAgICAgICBsb2cud2FybihgQ2Fubm90IGRldGVjdCBhbnkgY29ubmVjdGVkIHJlYWwgZGV2aWNlcy4gRmFsbGluZyBiYWNrIHRvIFNpbXVsYXRvci4gT3JpZ2luYWwgZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgY29uc3QgZGV2aWNlID0gYXdhaXQgZ2V0RXhpc3RpbmdTaW0odGhpcy5vcHRzKTtcbiAgICAgICAgICBpZiAoIWRldmljZSkge1xuICAgICAgICAgICAgLy8gTm8gbWF0Y2hpbmcgU2ltdWxhdG9yIGlzIGZvdW5kLiBUaHJvdyBhbiBlcnJvclxuICAgICAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coYENhbm5vdCBkZXRlY3QgdWRpZCBmb3IgJHt0aGlzLm9wdHMuZGV2aWNlTmFtZX0gU2ltdWxhdG9yIHJ1bm5pbmcgaU9TICR7dGhpcy5vcHRzLnBsYXRmb3JtVmVyc2lvbn1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gTWF0Y2hpbmcgU2ltdWxhdG9yIGV4aXN0cyBhbmQgaXMgZm91bmQuIFVzZSBpdFxuICAgICAgICAgIHRoaXMub3B0cy51ZGlkID0gZGV2aWNlLnVkaWQ7XG4gICAgICAgICAgcmV0dXJuIHtkZXZpY2UsIHJlYWxEZXZpY2U6IGZhbHNlLCB1ZGlkOiBkZXZpY2UudWRpZH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG1ha2Ugc3VyZSBpdCBpcyBhIGNvbm5lY3RlZCBkZXZpY2UuIElmIG5vdCwgdGhlIHVkaWQgcGFzc2VkIGluIGlzIGludmFsaWRcbiAgICAgICAgY29uc3QgZGV2aWNlcyA9IGF3YWl0IGdldENvbm5lY3RlZERldmljZXMoKTtcbiAgICAgICAgbG9nLmRlYnVnKGBBdmFpbGFibGUgZGV2aWNlczogJHtkZXZpY2VzLmpvaW4oJywgJyl9YCk7XG4gICAgICAgIGlmICghZGV2aWNlcy5pbmNsdWRlcyh0aGlzLm9wdHMudWRpZCkpIHtcbiAgICAgICAgICAvLyBjaGVjayBmb3IgYSBwYXJ0aWN1bGFyIHNpbXVsYXRvclxuICAgICAgICAgIGlmIChhd2FpdCBzaW1FeGlzdHModGhpcy5vcHRzLnVkaWQpKSB7XG4gICAgICAgICAgICBjb25zdCBkZXZpY2UgPSBhd2FpdCBnZXRTaW11bGF0b3IodGhpcy5vcHRzLnVkaWQpO1xuICAgICAgICAgICAgcmV0dXJuIHtkZXZpY2UsIHJlYWxEZXZpY2U6IGZhbHNlLCB1ZGlkOiB0aGlzLm9wdHMudWRpZH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGRldmljZSBvciBzaW11bGF0b3IgVURJRDogJyR7dGhpcy5vcHRzLnVkaWR9J2ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRldmljZSA9IGF3YWl0IGdldFJlYWxEZXZpY2VPYmoodGhpcy5vcHRzLnVkaWQpO1xuICAgICAgcmV0dXJuIHtkZXZpY2UsIHJlYWxEZXZpY2U6IHRydWUsIHVkaWQ6IHRoaXMub3B0cy51ZGlkfTtcbiAgICB9XG5cbiAgICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IHNpbXVsYXRvciB0byB1c2UsIGdpdmVuIHRoZSBkZXNpcmVkIGNhcGFiaWxpdGllc1xuICAgIGxldCBkZXZpY2UgPSBhd2FpdCBnZXRFeGlzdGluZ1NpbSh0aGlzLm9wdHMpO1xuXG4gICAgLy8gY2hlY2sgZm9yIGFuIGV4aXN0aW5nIHNpbXVsYXRvclxuICAgIGlmIChkZXZpY2UpIHtcbiAgICAgIHJldHVybiB7ZGV2aWNlLCByZWFsRGV2aWNlOiBmYWxzZSwgdWRpZDogZGV2aWNlLnVkaWR9O1xuICAgIH1cblxuICAgIC8vIG5vIGRldmljZSBvZiB0aGlzIHR5cGUgZXhpc3RzLCBzbyBjcmVhdGUgb25lXG4gICAgbG9nLmluZm8oJ1NpbXVsYXRvciB1ZGlkIG5vdCBwcm92aWRlZCwgdXNpbmcgZGVzaXJlZCBjYXBzIHRvIGNyZWF0ZSBhIG5ldyBzaW11bGF0b3InKTtcbiAgICBpZiAoIXRoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb24gJiYgdGhpcy5pb3NTZGtWZXJzaW9uKSB7XG4gICAgICBsb2cuaW5mbyhgTm8gcGxhdGZvcm1WZXJzaW9uIHNwZWNpZmllZC4gVXNpbmcgbGF0ZXN0IHZlcnNpb24gWGNvZGUgc3VwcG9ydHM6ICcke3RoaXMuaW9zU2RrVmVyc2lvbn0nIGAgK1xuICAgICAgICAgICAgICAgYFRoaXMgbWF5IGNhdXNlIHByb2JsZW1zIGlmIGEgc2ltdWxhdG9yIGRvZXMgbm90IGV4aXN0IGZvciB0aGlzIHBsYXRmb3JtIHZlcnNpb24uYCk7XG4gICAgICB0aGlzLm9wdHMucGxhdGZvcm1WZXJzaW9uID0gdGhpcy5pb3NTZGtWZXJzaW9uO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdHMubm9SZXNldCkge1xuICAgICAgLy8gQ2hlY2sgZm9yIGV4aXN0aW5nIHNpbXVsYXRvciBqdXN0IHdpdGggY29ycmVjdCBjYXBhYmlsaXRpZXNcbiAgICAgIGxldCBkZXZpY2UgPSBhd2FpdCBnZXRFeGlzdGluZ1NpbSh0aGlzLm9wdHMpO1xuICAgICAgaWYgKGRldmljZSkge1xuICAgICAgICByZXR1cm4ge2RldmljZSwgcmVhbERldmljZTogZmFsc2UsIHVkaWQ6IGRldmljZS51ZGlkfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZXZpY2UgPSBhd2FpdCB0aGlzLmNyZWF0ZVNpbSgpO1xuICAgIHJldHVybiB7ZGV2aWNlLCByZWFsRGV2aWNlOiBmYWxzZSwgdWRpZDogZGV2aWNlLnVkaWR9O1xuICB9XG5cbiAgYXN5bmMgc3RhcnRTaW0gKCkge1xuICAgIGNvbnN0IHJ1bk9wdHMgPSB7XG4gICAgICBzY2FsZUZhY3RvcjogdGhpcy5vcHRzLnNjYWxlRmFjdG9yLFxuICAgICAgY29ubmVjdEhhcmR3YXJlS2V5Ym9hcmQ6ICEhdGhpcy5vcHRzLmNvbm5lY3RIYXJkd2FyZUtleWJvYXJkLFxuICAgICAgaXNIZWFkbGVzczogISF0aGlzLm9wdHMuaXNIZWFkbGVzcyxcbiAgICAgIGRldmljZVByZWZlcmVuY2VzOiB7fSxcbiAgICB9O1xuXG4gICAgLy8gYWRkIHRoZSB3aW5kb3cgY2VudGVyLCBpZiBpdCBpcyBzcGVjaWZpZWRcbiAgICBpZiAodGhpcy5vcHRzLlNpbXVsYXRvcldpbmRvd0NlbnRlcikge1xuICAgICAgcnVuT3B0cy5kZXZpY2VQcmVmZXJlbmNlcy5TaW11bGF0b3JXaW5kb3dDZW50ZXIgPSB0aGlzLm9wdHMuU2ltdWxhdG9yV2luZG93Q2VudGVyO1xuICAgIH1cblxuICAgIC8vIFRoaXMgaXMgdG8gd29ya2Fyb3VuZCBYQ1Rlc3QgYnVnIGFib3V0IGNoYW5naW5nIFNpbXVsYXRvclxuICAgIC8vIG9yaWVudGF0aW9uIGlzIG5vdCBzeW5jaHJvbml6ZWQgdG8gdGhlIGFjdHVhbCB3aW5kb3cgb3JpZW50YXRpb25cbiAgICBjb25zdCBvcmllbnRhdGlvbiA9IF8uaXNTdHJpbmcodGhpcy5vcHRzLm9yaWVudGF0aW9uKSAmJiB0aGlzLm9wdHMub3JpZW50YXRpb24udG9VcHBlckNhc2UoKTtcbiAgICBzd2l0Y2ggKG9yaWVudGF0aW9uKSB7XG4gICAgICBjYXNlICdMQU5EU0NBUEUnOlxuICAgICAgICBydW5PcHRzLmRldmljZVByZWZlcmVuY2VzLlNpbXVsYXRvcldpbmRvd09yaWVudGF0aW9uID0gJ0xhbmRzY2FwZUxlZnQnO1xuICAgICAgICBydW5PcHRzLmRldmljZVByZWZlcmVuY2VzLlNpbXVsYXRvcldpbmRvd1JvdGF0aW9uQW5nbGUgPSA5MDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdQT1JUUkFJVCc6XG4gICAgICAgIHJ1bk9wdHMuZGV2aWNlUHJlZmVyZW5jZXMuU2ltdWxhdG9yV2luZG93T3JpZW50YXRpb24gPSAnUG9ydHJhaXQnO1xuICAgICAgICBydW5PcHRzLmRldmljZVByZWZlcmVuY2VzLlNpbXVsYXRvcldpbmRvd1JvdGF0aW9uQW5nbGUgPSAwO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLm9wdHMuZGV2aWNlLnJ1bihydW5PcHRzKTtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVNpbSAoKSB7XG4gICAgdGhpcy5saWZlY3ljbGVEYXRhLmNyZWF0ZVNpbSA9IHRydWU7XG5cbiAgICAvLyBjcmVhdGUgc2ltIGZvciBjYXBzXG4gICAgbGV0IHNpbSA9IGF3YWl0IGNyZWF0ZVNpbSh0aGlzLm9wdHMpO1xuICAgIGxvZy5pbmZvKGBDcmVhdGVkIHNpbXVsYXRvciB3aXRoIHVkaWQgJyR7c2ltLnVkaWR9Jy5gKTtcblxuICAgIHJldHVybiBzaW07XG4gIH1cblxuICBhc3luYyBsYXVuY2hBcHAgKCkge1xuICAgIGNvbnN0IEFQUF9MQVVOQ0hfVElNRU9VVCA9IDIwICogMTAwMDtcblxuICAgIHRoaXMubG9nRXZlbnQoJ2FwcExhdW5jaEF0dGVtcHRlZCcpO1xuICAgIGF3YWl0IGxhdW5jaCh0aGlzLm9wdHMuZGV2aWNlLnVkaWQsIHRoaXMub3B0cy5idW5kbGVJZCk7XG5cbiAgICBsZXQgY2hlY2tTdGF0dXMgPSBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3N0YXR1cycsICdHRVQnKTtcbiAgICAgIGxldCBjdXJyZW50QXBwID0gcmVzcG9uc2UuY3VycmVudEFwcC5idW5kbGVJRDtcbiAgICAgIGlmIChjdXJyZW50QXBwICE9PSB0aGlzLm9wdHMuYnVuZGxlSWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3RoaXMub3B0cy5idW5kbGVJZH0gbm90IGluIGZvcmVncm91bmQuICR7Y3VycmVudEFwcH0gaXMgaW4gZm9yZWdyb3VuZGApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsb2cuaW5mbyhgV2FpdGluZyBmb3IgJyR7dGhpcy5vcHRzLmJ1bmRsZUlkfScgdG8gYmUgaW4gZm9yZWdyb3VuZGApO1xuICAgIGxldCByZXRyaWVzID0gcGFyc2VJbnQoQVBQX0xBVU5DSF9USU1FT1VUIC8gMjAwLCAxMCk7XG4gICAgYXdhaXQgcmV0cnlJbnRlcnZhbChyZXRyaWVzLCAyMDAsIGNoZWNrU3RhdHVzKTtcbiAgICBsb2cuaW5mbyhgJHt0aGlzLm9wdHMuYnVuZGxlSWR9IGlzIGluIGZvcmVncm91bmRgKTtcbiAgICB0aGlzLmxvZ0V2ZW50KCdhcHBMYXVuY2hlZCcpO1xuICB9XG5cbiAgYXN5bmMgc3RhcnRXZGFTZXNzaW9uIChidW5kbGVJZCwgcHJvY2Vzc0FyZ3VtZW50cykge1xuICAgIGxldCBhcmdzID0gcHJvY2Vzc0FyZ3VtZW50cyA/IChwcm9jZXNzQXJndW1lbnRzLmFyZ3MgfHwgW10pIDogW107XG4gICAgaWYgKCFfLmlzQXJyYXkoYXJncykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgcHJvY2Vzc0FyZ3VtZW50cy5hcmdzIGNhcGFiaWxpdHkgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXkuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGAke0pTT04uc3RyaW5naWZ5KGFyZ3MpfSBpcyBnaXZlbiBpbnN0ZWFkYCk7XG4gICAgfVxuICAgIGxldCBlbnYgPSBwcm9jZXNzQXJndW1lbnRzID8gKHByb2Nlc3NBcmd1bWVudHMuZW52IHx8IHt9KSA6IHt9O1xuICAgIGlmICghXy5pc1BsYWluT2JqZWN0KGVudikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgcHJvY2Vzc0FyZ3VtZW50cy5lbnYgY2FwYWJpbGl0eSBpcyBleHBlY3RlZCB0byBiZSBhIGRpY3Rpb25hcnkuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGAke0pTT04uc3RyaW5naWZ5KGVudil9IGlzIGdpdmVuIGluc3RlYWRgKTtcbiAgICB9XG5cbiAgICBsZXQgc2hvdWxkV2FpdEZvclF1aWVzY2VuY2UgPSB1dGlsLmhhc1ZhbHVlKHRoaXMub3B0cy53YWl0Rm9yUXVpZXNjZW5jZSkgPyB0aGlzLm9wdHMud2FpdEZvclF1aWVzY2VuY2UgOiB0cnVlO1xuICAgIGxldCBtYXhUeXBpbmdGcmVxdWVuY3kgPSB1dGlsLmhhc1ZhbHVlKHRoaXMub3B0cy5tYXhUeXBpbmdGcmVxdWVuY3kpID8gdGhpcy5vcHRzLm1heFR5cGluZ0ZyZXF1ZW5jeSA6IDYwO1xuICAgIGxldCBzaG91bGRVc2VTaW5nbGV0b25UZXN0TWFuYWdlciA9IHV0aWwuaGFzVmFsdWUodGhpcy5vcHRzLnNob3VsZFVzZVNpbmdsZXRvblRlc3RNYW5hZ2VyKSA/IHRoaXMub3B0cy5zaG91bGRVc2VTaW5nbGV0b25UZXN0TWFuYWdlciA6IHRydWU7XG4gICAgbGV0IHNob3VsZFVzZVRlc3RNYW5hZ2VyRm9yVmlzaWJpbGl0eURldGVjdGlvbiA9IGZhbHNlO1xuICAgIGlmICh1dGlsLmhhc1ZhbHVlKHRoaXMub3B0cy5zaW1wbGVJc1Zpc2libGVDaGVjaykpIHtcbiAgICAgIHNob3VsZFVzZVRlc3RNYW5hZ2VyRm9yVmlzaWJpbGl0eURldGVjdGlvbiA9IHRoaXMub3B0cy5zaW1wbGVJc1Zpc2libGVDaGVjaztcbiAgICB9XG4gICAgaWYgKCFpc05hTihwYXJzZUZsb2F0KHRoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb24pKSAmJiBwYXJzZUZsb2F0KHRoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb24pLnRvRml4ZWQoMSkgPT09ICc5LjMnKSB7XG4gICAgICBsb2cuaW5mbyhgRm9yY2luZyBzaG91bGRVc2VTaW5nbGV0b25UZXN0TWFuYWdlciBjYXBhYmlsaXR5IHZhbHVlIHRvIHRydWUsIGJlY2F1c2Ugb2Yga25vd24gWENUZXN0IGlzc3VlcyB1bmRlciA5LjMgcGxhdGZvcm0gdmVyc2lvbmApO1xuICAgICAgc2hvdWxkVXNlVGVzdE1hbmFnZXJGb3JWaXNpYmlsaXR5RGV0ZWN0aW9uID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHV0aWwuaGFzVmFsdWUodGhpcy5vcHRzLmxhbmd1YWdlKSkge1xuICAgICAgYXJncy5wdXNoKCctQXBwbGVMYW5ndWFnZXMnLCBgKCR7dGhpcy5vcHRzLmxhbmd1YWdlfSlgKTtcbiAgICAgIGFyZ3MucHVzaCgnLU5TTGFuZ3VhZ2VzJywgYCgke3RoaXMub3B0cy5sYW5ndWFnZX0pYCk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWwuaGFzVmFsdWUodGhpcy5vcHRzLmxvY2FsZSkpIHtcbiAgICAgIGFyZ3MucHVzaCgnLUFwcGxlTG9jYWxlJywgdGhpcy5vcHRzLmxvY2FsZSk7XG4gICAgfVxuXG4gICAgbGV0IGRlc2lyZWQgPSB7XG4gICAgICBkZXNpcmVkQ2FwYWJpbGl0aWVzOiB7XG4gICAgICAgIGJ1bmRsZUlkLFxuICAgICAgICBhcmd1bWVudHM6IGFyZ3MsXG4gICAgICAgIGVudmlyb25tZW50OiBlbnYsXG4gICAgICAgIHNob3VsZFdhaXRGb3JRdWllc2NlbmNlLFxuICAgICAgICBzaG91bGRVc2VUZXN0TWFuYWdlckZvclZpc2liaWxpdHlEZXRlY3Rpb24sXG4gICAgICAgIG1heFR5cGluZ0ZyZXF1ZW5jeSxcbiAgICAgICAgc2hvdWxkVXNlU2luZ2xldG9uVGVzdE1hbmFnZXIsXG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAodXRpbC5oYXNWYWx1ZSh0aGlzLm9wdHMuc2hvdWxkVXNlQ29tcGFjdFJlc3BvbnNlcykpIHtcbiAgICAgIGRlc2lyZWQuZGVzaXJlZENhcGFiaWxpdGllcy5zaG91bGRVc2VDb21wYWN0UmVzcG9uc2VzID0gdGhpcy5vcHRzLnNob3VsZFVzZUNvbXBhY3RSZXNwb25zZXM7XG4gICAgfVxuICAgIGlmICh1dGlsLmhhc1ZhbHVlKHRoaXMub3B0cy5lbGVtZW50UmVzcG9uc2VGaWVsZHMpKSB7XG4gICAgICBkZXNpcmVkLmRlc2lyZWRDYXBhYmlsaXRpZXMuZWxlbWVudFJlc3BvbnNlRmllbGRzID0gdGhpcy5vcHRzLmVsZW1lbnRSZXNwb25zZUZpZWxkcztcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0cy5hdXRvQWNjZXB0QWxlcnRzKSB7XG4gICAgICBkZXNpcmVkLmRlc2lyZWRDYXBhYmlsaXRpZXMuZGVmYXVsdEFsZXJ0QWN0aW9uID0gJ2FjY2VwdCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdHMuYXV0b0Rpc21pc3NBbGVydHMpIHtcbiAgICAgIGRlc2lyZWQuZGVzaXJlZENhcGFiaWxpdGllcy5kZWZhdWx0QWxlcnRBY3Rpb24gPSAnZGlzbWlzcyc7XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy9zZXNzaW9uJywgJ1BPU1QnLCBkZXNpcmVkKTtcbiAgfVxuXG4gIC8vIE92ZXJyaWRlIFByb3h5IG1ldGhvZHMgZnJvbSBCYXNlRHJpdmVyXG4gIHByb3h5QWN0aXZlICgpIHtcbiAgICByZXR1cm4gdGhpcy5qd3BQcm94eUFjdGl2ZTtcbiAgfVxuXG4gIGdldFByb3h5QXZvaWRMaXN0ICgpIHtcbiAgICBpZiAodGhpcy5pc1dlYnZpZXcoKSkge1xuICAgICAgcmV0dXJuIE5PX1BST1hZX1dFQl9MSVNUO1xuICAgIH1cbiAgICByZXR1cm4gTk9fUFJPWFlfTkFUSVZFX0xJU1Q7XG4gIH1cblxuICBjYW5Qcm94eSAoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpc1NhZmFyaSAoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5zYWZhcmk7XG4gIH1cblxuICBpc1JlYWxEZXZpY2UgKCkge1xuICAgIHJldHVybiB0aGlzLm9wdHMucmVhbERldmljZTtcbiAgfVxuXG4gIGlzU2ltdWxhdG9yICgpIHtcbiAgICByZXR1cm4gIXRoaXMub3B0cy5yZWFsRGV2aWNlO1xuICB9XG5cbiAgaXNXZWJ2aWV3ICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1NhZmFyaSgpIHx8IHRoaXMuaXNXZWJDb250ZXh0KCk7XG4gIH1cblxuICB2YWxpZGF0ZUxvY2F0b3JTdHJhdGVneSAoc3RyYXRlZ3kpIHtcbiAgICBzdXBlci52YWxpZGF0ZUxvY2F0b3JTdHJhdGVneShzdHJhdGVneSwgdGhpcy5pc1dlYkNvbnRleHQoKSk7XG4gIH1cblxuICB2YWxpZGF0ZURlc2lyZWRDYXBzIChjYXBzKSB7XG4gICAgaWYgKCFzdXBlci52YWxpZGF0ZURlc2lyZWRDYXBzKGNhcHMpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIGNhcGFiaWxpdGllcyBoYXZlIG9uZSBvZiBgYXBwYCBvciBgYnVuZGxlSWRgXG4gICAgaWYgKChjYXBzLmJyb3dzZXJOYW1lIHx8ICcnKS50b0xvd2VyQ2FzZSgpICE9PSAnc2FmYXJpJyAmJiAhY2Fwcy5hcHAgJiYgIWNhcHMuYnVuZGxlSWQpIHtcbiAgICAgIGxldCBtc2cgPSAnVGhlIGRlc2lyZWQgY2FwYWJpbGl0aWVzIG11c3QgaW5jbHVkZSBlaXRoZXIgYW4gYXBwIG9yIGEgYnVuZGxlSWQgZm9yIGlPUyc7XG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhtc2cpO1xuICAgIH1cblxuICAgIGxldCB2ZXJpZnlQcm9jZXNzQXJndW1lbnQgPSAocHJvY2Vzc0FyZ3VtZW50cykgPT4ge1xuICAgICAgY29uc3Qge2FyZ3MsIGVudn0gPSBwcm9jZXNzQXJndW1lbnRzO1xuICAgICAgaWYgKCFfLmlzTmlsKGFyZ3MpICYmICFfLmlzQXJyYXkoYXJncykpIHtcbiAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coJ3Byb2Nlc3NBcmd1bWVudHMuYXJncyBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ3MnKTtcbiAgICAgIH1cbiAgICAgIGlmICghXy5pc05pbChlbnYpICYmICFfLmlzUGxhaW5PYmplY3QoZW52KSkge1xuICAgICAgICBsb2cuZXJyb3JBbmRUaHJvdygncHJvY2Vzc0FyZ3VtZW50cy5lbnYgbXVzdCBiZSBhbiBvYmplY3QgPGtleSx2YWx1ZT4gcGFpciB7YTpiLCBjOmR9Jyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIGBwcm9jZXNzQXJndW1lbnRzYCBzaG91bGQgYmUgSlNPTiBzdHJpbmcgb3IgYW4gb2JqZWN0IHdpdGggYXJndW1lbnRzIGFuZC8gZW52aXJvbm1lbnQgZGV0YWlsc1xuICAgIGlmIChjYXBzLnByb2Nlc3NBcmd1bWVudHMpIHtcbiAgICAgIGlmIChfLmlzU3RyaW5nKGNhcHMucHJvY2Vzc0FyZ3VtZW50cykpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyB0cnkgdG8gcGFyc2UgdGhlIHN0cmluZyBhcyBKU09OXG4gICAgICAgICAgY2Fwcy5wcm9jZXNzQXJndW1lbnRzID0gSlNPTi5wYXJzZShjYXBzLnByb2Nlc3NBcmd1bWVudHMpO1xuICAgICAgICAgIHZlcmlmeVByb2Nlc3NBcmd1bWVudChjYXBzLnByb2Nlc3NBcmd1bWVudHMpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgcHJvY2Vzc0FyZ3VtZW50cyBtdXN0IGJlIGEganNvbiBmb3JtYXQgb3IgYW4gb2JqZWN0IHdpdGggZm9ybWF0IHthcmdzIDogW10sIGVudiA6IHthOmIsIGM6ZH19LiBgICtcbiAgICAgICAgICAgIGBCb3RoIGVudmlyb25tZW50IGFuZCBhcmd1bWVudCBjYW4gYmUgbnVsbC4gRXJyb3I6ICR7ZXJyfWApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKF8uaXNQbGFpbk9iamVjdChjYXBzLnByb2Nlc3NBcmd1bWVudHMpKSB7XG4gICAgICAgIHZlcmlmeVByb2Nlc3NBcmd1bWVudChjYXBzLnByb2Nlc3NBcmd1bWVudHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coYCdwcm9jZXNzQXJndW1lbnRzIG11c3QgYmUgYW4gb2JqZWN0LCBvciBhIHN0cmluZyBKU09OIG9iamVjdCB3aXRoIGZvcm1hdCB7YXJncyA6IFtdLCBlbnYgOiB7YTpiLCBjOmR9fS4gYCArXG4gICAgICAgICAgYEJvdGggZW52aXJvbm1lbnQgYW5kIGFyZ3VtZW50IGNhbiBiZSBudWxsLmApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHRoZXJlIGlzIG5vIHBvaW50IGluIGhhdmluZyBga2V5Y2hhaW5QYXRoYCB3aXRob3V0IGBrZXljaGFpblBhc3N3b3JkYFxuICAgIGlmICgoY2Fwcy5rZXljaGFpblBhdGggJiYgIWNhcHMua2V5Y2hhaW5QYXNzd29yZCkgfHwgKCFjYXBzLmtleWNoYWluUGF0aCAmJiBjYXBzLmtleWNoYWluUGFzc3dvcmQpKSB7XG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgSWYgJ2tleWNoYWluUGF0aCcgaXMgc2V0LCAna2V5Y2hhaW5QYXNzd29yZCcgbXVzdCBhbHNvIGJlIHNldCAoYW5kIHZpY2UgdmVyc2EpLmApO1xuICAgIH1cblxuICAgIC8vIGByZXNldE9uU2Vzc2lvblN0YXJ0T25seWAgc2hvdWxkIGJlIHNldCB0byB0cnVlIGJ5IGRlZmF1bHRcbiAgICB0aGlzLm9wdHMucmVzZXRPblNlc3Npb25TdGFydE9ubHkgPSAhdXRpbC5oYXNWYWx1ZSh0aGlzLm9wdHMucmVzZXRPblNlc3Npb25TdGFydE9ubHkpIHx8IHRoaXMub3B0cy5yZXNldE9uU2Vzc2lvblN0YXJ0T25seTtcbiAgICB0aGlzLm9wdHMudXNlTmV3V0RBID0gdXRpbC5oYXNWYWx1ZSh0aGlzLm9wdHMudXNlTmV3V0RBKSA/IHRoaXMub3B0cy51c2VOZXdXREEgOiBmYWxzZTtcblxuICAgIGlmIChjYXBzLmNvbW1hbmRUaW1lb3V0cykge1xuICAgICAgY2Fwcy5jb21tYW5kVGltZW91dHMgPSBub3JtYWxpemVDb21tYW5kVGltZW91dHMoY2Fwcy5jb21tYW5kVGltZW91dHMpO1xuICAgIH1cblxuICAgIGlmIChfLmlzU3RyaW5nKGNhcHMud2ViRHJpdmVyQWdlbnRVcmwpKSB7XG4gICAgICBjb25zdCB7cHJvdG9jb2wsIGhvc3R9ID0gdXJsLnBhcnNlKGNhcHMud2ViRHJpdmVyQWdlbnRVcmwpO1xuICAgICAgaWYgKF8uaXNFbXB0eShwcm90b2NvbCkgfHwgXy5pc0VtcHR5KGhvc3QpKSB7XG4gICAgICAgIGxvZy5lcnJvckFuZFRocm93KGAnd2ViRHJpdmVyQWdlbnRVcmwnIGNhcGFiaWxpdHkgaXMgZXhwZWN0ZWQgdG8gY29udGFpbiBhIHZhbGlkIFdlYkRyaXZlckFnZW50IHNlcnZlciBVUkwuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBgJyR7Y2Fwcy53ZWJEcml2ZXJBZ2VudFVybH0nIGlzIGdpdmVuIGluc3RlYWRgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2Fwcy5icm93c2VyTmFtZSkge1xuICAgICAgaWYgKGNhcHMuYnVuZGxlSWQpIHtcbiAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coYCdicm93c2VyTmFtZScgY2Fubm90IGJlIHNldCB0b2dldGhlciB3aXRoICdidW5kbGVJZCcgY2FwYWJpbGl0eWApO1xuICAgICAgfVxuICAgICAgLy8gd2FybiBpZiB0aGUgY2FwYWJpbGl0aWVzIGhhdmUgYm90aCBgYXBwYCBhbmQgYGJyb3dzZXIsIGFsdGhvdWdoIHRoaXNcbiAgICAgIC8vIGlzIGNvbW1vbiB3aXRoIHNlbGVuaXVtIGdyaWRcbiAgICAgIGlmIChjYXBzLmFwcCkge1xuICAgICAgICBsb2cud2FybihgVGhlIGNhcGFiaWxpdGllcyBzaG91bGQgZ2VuZXJhbGx5IG5vdCBpbmNsdWRlIGJvdGggYW4gJ2FwcCcgYW5kIGEgJ2Jyb3dzZXJOYW1lJ2ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjYXBzLnBlcm1pc3Npb25zKSB7XG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKGNvbnN0IFtidW5kbGVJZCwgcGVybXNdIG9mIF8udG9QYWlycyhKU09OLnBhcnNlKGNhcHMucGVybWlzc2lvbnMpKSkge1xuICAgICAgICAgIGlmICghXy5pc1N0cmluZyhidW5kbGVJZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7SlNPTi5zdHJpbmdpZnkoYnVuZGxlSWQpfScgbXVzdCBiZSBhIHN0cmluZ2ApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIV8uaXNQbGFpbk9iamVjdChwZXJtcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7SlNPTi5zdHJpbmdpZnkocGVybXMpfScgbXVzdCBiZSBhIEpTT04gb2JqZWN0YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy5lcnJvckFuZFRocm93KGAnJHtjYXBzLnBlcm1pc3Npb25zfScgaXMgZXhwZWN0ZWQgdG8gYmUgYSB2YWxpZCBvYmplY3Qgd2l0aCBmb3JtYXQgYCArXG4gICAgICAgICAgYHtcIjxidW5kbGVJZDE+XCI6IHtcIjxzZXJ2aWNlTmFtZTE+XCI6IFwiPHNlcnZpY2VTdGF0dXMxPlwiLCAuLi59LCAuLi59LiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZmluYWxseSwgcmV0dXJuIHRydWUgc2luY2UgdGhlIHN1cGVyY2xhc3MgY2hlY2sgcGFzc2VkLCBhcyBkaWQgdGhpc1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgaW5zdGFsbEFVVCAoKSB7XG4gICAgaWYgKHRoaXMuaXNTYWZhcmkoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBpZiB1c2VyIGhhcyBwYXNzZWQgaW4gZGVzaXJlZENhcHMuYXV0b0xhdW5jaCA9IGZhbHNlXG4gICAgLy8gbWVhbmluZyB0aGV5IHdpbGwgbWFuYWdlIGFwcCBpbnN0YWxsIC8gbGF1bmNoaW5nXG4gICAgaWYgKHRoaXMub3B0cy5hdXRvTGF1bmNoID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB2ZXJpZnlBcHBsaWNhdGlvblBsYXRmb3JtKHRoaXMub3B0cy5hcHAsIHRoaXMuaXNTaW11bGF0b3IoKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBUT0RPOiBMZXQgaXQgdGhyb3cgYWZ0ZXIgd2UgY29uZmlybSB0aGUgYXJjaGl0ZWN0dXJlIHZlcmlmaWNhdGlvbiBhbGdvcml0aG0gaXMgc3RhYmxlXG4gICAgICBsb2cud2FybihgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqYCk7XG4gICAgICBsb2cud2FybihgJHt0aGlzLmlzU2ltdWxhdG9yKCkgPyAnU2ltdWxhdG9yJyA6ICdSZWFsIGRldmljZSd9IGFyY2hpdGVjdHVyZSBhcHBlYXJzIHRvIGJlIHVuc3VwcG9ydGVkIGAgK1xuICAgICAgICAgICAgICAgYGJ5IHRoZSAnJHt0aGlzLm9wdHMuYXBwfScgYXBwbGljYXRpb24uIGAgK1xuICAgICAgICAgICAgICAgYE1ha2Ugc3VyZSB0aGUgY29ycmVjdCBkZXBsb3ltZW50IHRhcmdldCBoYXMgYmVlbiBzZWxlY3RlZCBmb3IgaXRzIGNvbXBpbGF0aW9uIGluIFhjb2RlLmApO1xuICAgICAgbG9nLndhcm4oJ0RvblxcJ3QgYmUgc3VycHJpc2VkIGlmIHRoZSBhcHBsaWNhdGlvbiBmYWlscyB0byBsYXVuY2guJyk7XG4gICAgICBsb2cud2FybihgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqYCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNSZWFsRGV2aWNlKCkpIHtcbiAgICAgIGF3YWl0IGluc3RhbGxUb1JlYWxEZXZpY2UodGhpcy5vcHRzLmRldmljZSwgdGhpcy5vcHRzLmFwcCwgdGhpcy5vcHRzLmJ1bmRsZUlkLCB0aGlzLm9wdHMubm9SZXNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IGluc3RhbGxUb1NpbXVsYXRvcih0aGlzLm9wdHMuZGV2aWNlLCB0aGlzLm9wdHMuYXBwLCB0aGlzLm9wdHMuYnVuZGxlSWQsIHRoaXMub3B0cy5ub1Jlc2V0KTtcbiAgICB9XG5cbiAgICBpZiAodXRpbC5oYXNWYWx1ZSh0aGlzLm9wdHMuaW9zSW5zdGFsbFBhdXNlKSkge1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0vaXNzdWVzLzY4ODlcbiAgICAgIGxldCBwYXVzZSA9IHBhcnNlSW50KHRoaXMub3B0cy5pb3NJbnN0YWxsUGF1c2UsIDEwKTtcbiAgICAgIGxvZy5kZWJ1ZyhgaW9zSW5zdGFsbFBhdXNlIHNldC4gUGF1c2luZyAke3BhdXNlfSBtcyBiZWZvcmUgY29udGludWluZ2ApO1xuICAgICAgYXdhaXQgQi5kZWxheShwYXVzZSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc2V0SW5pdGlhbE9yaWVudGF0aW9uIChvcmllbnRhdGlvbikge1xuICAgIGlmICghXy5pc1N0cmluZyhvcmllbnRhdGlvbikpIHtcbiAgICAgIGxvZy5pbmZvKCdTa2lwcGluZyBzZXR0aW5nIG9mIHRoZSBpbml0aWFsIGRpc3BsYXkgb3JpZW50YXRpb24uICcgK1xuICAgICAgICAnU2V0IHRoZSBcIm9yaWVudGF0aW9uXCIgY2FwYWJpbGl0eSB0byBlaXRoZXIgXCJMQU5EU0NBUEVcIiBvciBcIlBPUlRSQUlUXCIsIGlmIHRoaXMgaXMgYW4gdW5kZXNpcmVkIGJlaGF2aW9yLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uLnRvVXBwZXJDYXNlKCk7XG4gICAgaWYgKCFfLmluY2x1ZGVzKFsnTEFORFNDQVBFJywgJ1BPUlRSQUlUJ10sIG9yaWVudGF0aW9uKSkge1xuICAgICAgbG9nLmRlYnVnKGBVbmFibGUgdG8gc2V0IGluaXRpYWwgb3JpZW50YXRpb24gdG8gJyR7b3JpZW50YXRpb259J2ApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsb2cuZGVidWcoYFNldHRpbmcgaW5pdGlhbCBvcmllbnRhdGlvbiB0byAnJHtvcmllbnRhdGlvbn0nYCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvb3JpZW50YXRpb24nLCAnUE9TVCcsIHtvcmllbnRhdGlvbn0pO1xuICAgICAgdGhpcy5vcHRzLmN1ck9yaWVudGF0aW9uID0gb3JpZW50YXRpb247XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2cud2FybihgU2V0dGluZyBpbml0aWFsIG9yaWVudGF0aW9uIGZhaWxlZCB3aXRoOiAke2Vyci5tZXNzYWdlfWApO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRDb21tYW5kVGltZW91dCAoY21kTmFtZSkge1xuICAgIGlmICh0aGlzLm9wdHMuY29tbWFuZFRpbWVvdXRzKSB7XG4gICAgICBpZiAoY21kTmFtZSAmJiBfLmhhcyh0aGlzLm9wdHMuY29tbWFuZFRpbWVvdXRzLCBjbWROYW1lKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRzLmNvbW1hbmRUaW1lb3V0c1tjbWROYW1lXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm9wdHMuY29tbWFuZFRpbWVvdXRzW0RFRkFVTFRfVElNRU9VVF9LRVldO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc2Vzc2lvbiBjYXBhYmlsaXRpZXMgbWVyZ2VkIHdpdGggd2hhdCBXREEgcmVwb3J0c1xuICAgKiBUaGlzIGlzIGEgbGlicmFyeSBjb21tYW5kIGJ1dCBuZWVkcyB0byBjYWxsICdzdXBlcicgc28gY2FuJ3QgYmUgb25cbiAgICogYSBoZWxwZXIgb2JqZWN0XG4gICAqL1xuICBhc3luYyBnZXRTZXNzaW9uICgpIHtcbiAgICAvLyBjYWxsIHN1cGVyIHRvIGdldCBldmVudCB0aW1pbmdzLCBldGMuLi5cbiAgICBjb25zdCBkcml2ZXJTZXNzaW9uID0gYXdhaXQgc3VwZXIuZ2V0U2Vzc2lvbigpO1xuICAgIGlmICghdGhpcy53ZGFDYXBzKSB7XG4gICAgICB0aGlzLndkYUNhcHMgPSBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnLycsICdHRVQnKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmRldmljZUNhcHMpIHtcbiAgICAgIGNvbnN0IHtzdGF0dXNCYXJTaXplLCBzY2FsZX0gPSBhd2FpdCB0aGlzLmdldFNjcmVlbkluZm8oKTtcbiAgICAgIHRoaXMuZGV2aWNlQ2FwcyA9IHtcbiAgICAgICAgcGl4ZWxSYXRpbzogc2NhbGUsXG4gICAgICAgIHN0YXRCYXJIZWlnaHQ6IHN0YXR1c0JhclNpemUuaGVpZ2h0LFxuICAgICAgICB2aWV3cG9ydFJlY3Q6IGF3YWl0IHRoaXMuZ2V0Vmlld3BvcnRSZWN0KCksXG4gICAgICB9O1xuICAgIH1cbiAgICBsb2cuaW5mbygnTWVyZ2luZyBXREEgY2FwcyBvdmVyIEFwcGl1bSBjYXBzIGZvciBzZXNzaW9uIGRldGFpbCByZXNwb25zZScpO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt1ZGlkOiB0aGlzLm9wdHMudWRpZH0sIGRyaXZlclNlc3Npb24sXG4gICAgICB0aGlzLndkYUNhcHMuY2FwYWJpbGl0aWVzLCB0aGlzLmRldmljZUNhcHMpO1xuICB9XG5cbiAgYXN5bmMgc3RhcnRJV0RQICgpIHtcbiAgICB0aGlzLmxvZ0V2ZW50KCdpd2RwU3RhcnRpbmcnKTtcbiAgICB0aGlzLml3ZHBTZXJ2ZXIgPSBuZXcgSVdEUCh0aGlzLm9wdHMud2Via2l0RGVidWdQcm94eVBvcnQsIHRoaXMub3B0cy51ZGlkKTtcbiAgICBhd2FpdCB0aGlzLml3ZHBTZXJ2ZXIuc3RhcnQoKTtcbiAgICB0aGlzLmxvZ0V2ZW50KCdpd2RwU3RhcnRlZCcpO1xuICB9XG5cbiAgYXN5bmMgc3RvcElXRFAgKCkge1xuICAgIGlmICh0aGlzLml3ZHBTZXJ2ZXIpIHtcbiAgICAgIGF3YWl0IHRoaXMuaXdkcFNlcnZlci5zdG9wKCk7XG4gICAgICBkZWxldGUgdGhpcy5pd2RwU2VydmVyO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHJlc2V0ICgpIHtcbiAgICBpZiAodGhpcy5vcHRzLm5vUmVzZXQpIHtcbiAgICAgIC8vIFRoaXMgaXMgdG8gbWFrZSBzdXJlIHJlc2V0IGhhcHBlbnMgZXZlbiBpZiBub1Jlc2V0IGlzIHNldCB0byB0cnVlXG4gICAgICBsZXQgb3B0cyA9IF8uY2xvbmVEZWVwKHRoaXMub3B0cyk7XG4gICAgICBvcHRzLm5vUmVzZXQgPSBmYWxzZTtcbiAgICAgIG9wdHMuZnVsbFJlc2V0ID0gZmFsc2U7XG4gICAgICBjb25zdCBzaHV0ZG93bkhhbmRsZXIgPSB0aGlzLnJlc2V0T25VbmV4cGVjdGVkU2h1dGRvd247XG4gICAgICB0aGlzLnJlc2V0T25VbmV4cGVjdGVkU2h1dGRvd24gPSAoKSA9PiB7fTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRoaXMucnVuUmVzZXQob3B0cyk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLnJlc2V0T25VbmV4cGVjdGVkU2h1dGRvd24gPSBzaHV0ZG93bkhhbmRsZXI7XG4gICAgICB9XG4gICAgfVxuICAgIGF3YWl0IHN1cGVyLnJlc2V0KCk7XG4gIH1cbn1cblxuT2JqZWN0LmFzc2lnbihYQ1VJVGVzdERyaXZlci5wcm90b3R5cGUsIGNvbW1hbmRzKTtcblxuZXhwb3J0IGRlZmF1bHQgWENVSVRlc3REcml2ZXI7XG5leHBvcnQgeyBYQ1VJVGVzdERyaXZlciB9O1xuIl0sImZpbGUiOiJsaWIvZHJpdmVyLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
