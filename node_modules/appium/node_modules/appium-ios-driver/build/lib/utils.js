"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeInstrumentsSocket = removeInstrumentsSocket;
exports.getAndCheckXcodeVersion = getAndCheckXcodeVersion;
exports.prepareIosOpts = prepareIosOpts;
exports.appIsPackageOrBundle = appIsPackageOrBundle;
exports.getAndCheckIosSdkVersion = getAndCheckIosSdkVersion;
exports.detectUdid = detectUdid;
exports.parseLocalizableStrings = parseLocalizableStrings;
exports.setBundleIdFromApp = setBundleIdFromApp;
exports.shouldPrelaunchSimulator = shouldPrelaunchSimulator;
exports.setDeviceTypeInInfoPlist = setDeviceTypeInInfoPlist;
exports.getSimForDeviceString = getSimForDeviceString;
exports.unwrapEl = unwrapEl;
exports.clearLogs = clearLogs;
exports.rootDir = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _appiumXcode = _interopRequireDefault(require("appium-xcode"));

var _appUtils = require("./app-utils");

var _logger = _interopRequireDefault(require("./logger"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _safari = require("./commands/safari");

var _safariLauncher = require("./safari-launcher");

const rootDir = _path.default.resolve(__dirname, '..', '..');

exports.rootDir = rootDir;
const STRINGSDICT_RESOURCE = '.stringsdict';
const STRINGS_RESOURCE = '.strings';

async function prepareIosOpts(opts) {
  opts.backendRetries = 4;
  opts.withoutDelay = !opts.nativeInstrumentsLib;
  opts.reset = !opts.noReset;
  opts.initialOrientation = opts.deviceOrientation || opts.orientation || 'PORTRAIT';
  opts.useRobot = opts.robotPort > 0;
  opts.robotUrl = opts.useRobot ? `http://${opts.robotAddress}:${opts.robotPort}` : null;

  if (opts.locationServicesAuthorized && !opts.bundleId) {
    throw new Error('You must set the bundleId cap if using locationServicesEnabled');
  }

  opts.platformVersion = opts.platformVersion || (await _appiumXcode.default.getMaxIOSSDK());
  let pv = parseFloat(opts.platformVersion);

  if (pv < 8) {
    _logger.default.warn(`iOS version ${opts.platformVersion} support has been ` + `deprecated and will be removed in a future version of ` + `Appium.`);
  }

  opts.localizableStringsDir = opts.localizableStringsDir || 'en.lproj';
  opts.autoAcceptAlerts = _lodash.default.isNull(opts.autoAcceptAlerts) || _lodash.default.isUndefined(opts.autoAcceptAlerts) ? false : opts.autoAcceptAlerts;
  opts.autoDismissAlerts = _lodash.default.isNull(opts.autoDismissAlerts) || _lodash.default.isUndefined(opts.autoDismissAlerts) ? false : opts.autoDismissAlerts;

  if ((opts.browserName || '').toLowerCase() === 'safari' || (opts.app || '').toLowerCase() === 'safari' || (opts.bundleId || '').toLowerCase() === _safari.SAFARI_BUNDLE) {
    if (opts.udid) {
      opts.app = opts.app || _safariLauncher.SAFARI_LAUNCHER_APP_FILE;
      opts.bundleId = opts.bundleId || _safariLauncher.SAFARI_LAUNCHER_BUNDLE;
    } else {
      if (parseFloat(opts.platformVersion) <= 8) {
        opts.app = 'safari';
        opts.bundleId = null;
      } else {
        opts.app = null;
        opts.bundleId = _safari.SAFARI_BUNDLE;
      }
    }

    opts.safari = true;
  }
}

function appIsPackageOrBundle(app) {
  return /^([a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+)+$/.test(app);
}

async function removeInstrumentsSocket(sock) {
  _logger.default.debug('Removing any remaining instruments sockets');

  await _appiumSupport.fs.rimraf(sock);

  _logger.default.debug(`Cleaned up instruments socket ${sock}`);
}

async function getAndCheckXcodeVersion(caps) {
  let version;

  try {
    version = await _appiumXcode.default.getVersion(true);
  } catch (err) {
    _logger.default.debug(err);

    _logger.default.error(`Could not determine Xcode version: ${err.message}`);

    throw err;
  }

  let minorVersion = version.versionFloat;
  let pv = parseFloat(caps.platformVersion);

  if (minorVersion < 6.3 && !(minorVersion === 6.0 && pv === 8.0)) {
    _logger.default.warn(`Xcode version '${version.versionString}'. Support for Xcode ` + `${version.versionString} has been deprecated and will be removed ` + `in a future version. Please upgrade to version 6.3 or ` + `higher (or version 6.0.1 for iOS 8.0)`);
  }

  return version;
}

async function getAndCheckIosSdkVersion() {
  let versionNumber;

  try {
    versionNumber = await _appiumXcode.default.getMaxIOSSDK();
  } catch (err) {
    _logger.default.error('Could not determine iOS SDK version');

    throw err;
  }

  return versionNumber;
}

function getSimForDeviceString(dString, availDevices) {
  let matchedDevice = null;
  let matchedUdid = null;

  _lodash.default.each(availDevices, function (device) {
    if (device.indexOf(dString) !== -1) {
      matchedDevice = device;

      try {
        matchedUdid = /.+\[([^\]]+)\]/.exec(device)[1];
      } catch (e) {
        matchedUdid = null;
      }
    }
  });

  return [matchedDevice, matchedUdid];
}

async function detectUdid(caps) {
  if (caps.udid !== null && caps.udid === 'auto') {
    _logger.default.debug('Auto-detecting iOS udid...');

    let cmd,
        args = [];

    try {
      cmd = await _appiumSupport.fs.which('idevice_id');
      args.push('-l');
    } catch (err) {
      cmd = require.resolve('udidetect');
    }

    let udid;

    try {
      let {
        stdout
      } = await (0, _teen_process.exec)(cmd, args, {
        timeout: 3000
      });
      udid = stdout.split('\n')[0];
    } catch (err) {
      _logger.default.error('Error detecting udid');

      throw err;
    }

    if (udid && udid.length > 2) {
      caps.udid = udid;

      _logger.default.debug(`Detected udid as '${caps.udid}'`);
    } else {
      throw new Error('Could not detect udid.');
    }
  } else {
    _logger.default.debug('Not auto-detecting udid.');
  }
}

async function readResource(resourcePath) {
  const data = await _appiumSupport.plist.parsePlistFile(resourcePath);
  const result = {};

  for (const [key, value] of _lodash.default.toPairs(data)) {
    result[key] = _lodash.default.isString(value) ? value : JSON.stringify(value);
  }

  return result;
}

async function parseLocalizableStrings(opts) {
  const {
    app,
    language = 'en',
    localizableStringsDir,
    stringFile,
    strictMode
  } = opts;

  if (!app) {
    const message = "Strings extraction is not supported if 'app' capability is not set";

    if (strictMode) {
      throw new Error(message);
    }

    _logger.default.info(message);

    return {};
  }

  let lprojRoot;

  for (const subfolder of [`${language}.lproj`, localizableStringsDir, '']) {
    lprojRoot = _path.default.resolve(app, subfolder);

    if (await _appiumSupport.fs.exists(lprojRoot)) {
      break;
    }

    const message = `No '${lprojRoot}' resources folder has been found`;

    if (strictMode) {
      throw new Error(message);
    }

    _logger.default.debug(message);
  }

  _logger.default.info(`Will extract resource strings from '${lprojRoot}'`);

  const resourcePaths = [];

  if (stringFile) {
    const dstPath = _path.default.resolve(lprojRoot, stringFile);

    if (await _appiumSupport.fs.exists(dstPath)) {
      resourcePaths.push(dstPath);
    } else {
      const message = `No '${dstPath}' resource file has been found for '${app}'`;

      if (strictMode) {
        throw new Error(message);
      }

      _logger.default.info(message);

      _logger.default.info(`Getting all the available strings from '${lprojRoot}'`);
    }
  }

  if (_lodash.default.isEmpty(resourcePaths) && (await _appiumSupport.fs.exists(lprojRoot))) {
    const resourceFiles = (await _appiumSupport.fs.readdir(lprojRoot)).filter(name => _lodash.default.some([STRINGS_RESOURCE, STRINGSDICT_RESOURCE], x => name.endsWith(x))).map(name => _path.default.resolve(lprojRoot, name));
    resourcePaths.push(...resourceFiles);
  }

  _logger.default.info(`Got ${resourcePaths.length} resource file(s) in '${lprojRoot}'`);

  if (_lodash.default.isEmpty(resourcePaths)) {
    return {};
  }

  const resultStrings = {};

  const toAbsolutePath = function (p) {
    return _path.default.isAbsolute(p) ? p : _path.default.resolve(process.cwd(), p);
  };

  for (const resourcePath of resourcePaths) {
    if (!_appiumSupport.util.isSubPath(toAbsolutePath(resourcePath), toAbsolutePath(app))) {
      throw new Error(`'${resourcePath}' is expected to be located under '${app}'`);
    }

    try {
      const data = await readResource(resourcePath);

      _logger.default.debug(`Parsed ${_lodash.default.keys(data).length} string(s) from '${resourcePath}'`);

      _lodash.default.merge(resultStrings, data);
    } catch (e) {
      _logger.default.warn(`Cannot parse '${resourcePath}' resource. Original error: ${e.message}`);
    }
  }

  _logger.default.info(`Got ${_lodash.default.keys(resultStrings).length} string(s) from '${lprojRoot}'`);

  return resultStrings;
}

async function setBundleIdFromApp(caps) {
  if (!caps.bundleId) {
    try {
      caps.bundleId = await (0, _appUtils.extractBundleId)(caps.app);

      _logger.default.info(`Extracted bundleID: ${caps.bundleId} from app: ${caps.app}`);
    } catch (err) {
      _logger.default.error('Could not set the bundleId from app.');

      throw err;
    }
  }
}

function shouldPrelaunchSimulator(caps, iosSdkVersion) {
  let shouldPrelaunch = false;

  if (caps.defaultDevice || iosSdkVersion >= 7.1) {
    if (this.iosSdkVersion >= 7.1) {
      _logger.default.debug("We're on iOS7.1+ so forcing defaultDevice on");
    } else {
      _logger.default.debug('User specified default device, letting instruments launch it');
    }
  } else {
    shouldPrelaunch = true;
  }

  return shouldPrelaunch;
}

async function setDeviceTypeInInfoPlist(app, deviceString) {
  if (_lodash.default.isNull(app) || _lodash.default.isUndefined(app)) {
    return;
  }

  let plistFile = _path.default.resolve(app, 'Info.plist');

  let isiPhone = deviceString.toLowerCase().indexOf('ipad') === -1;
  let deviceTypeCode = isiPhone ? 1 : 2;
  await _appiumSupport.plist.updatePlistFile(plistFile, {
    UIDeviceFamily: [deviceTypeCode]
  });
}

function unwrapEl(el) {
  if (typeof el === 'object' && el.ELEMENT) {
    return el.ELEMENT;
  }

  return el;
}

async function clearLogs(locations) {
  _logger.default.debug('Clearing log files');

  for (let location of locations) {
    if (await _appiumSupport.fs.exists(location)) {
      let size;

      try {
        let {
          stdout
        } = await (0, _teen_process.exec)('du', ['-sh', location]);
        size = stdout.trim().split(/\s+/)[0];
      } catch (ign) {}

      try {
        _logger.default.debug(`Deleting '${location}'. ${size ? `Freeing ${size}.` : ''}`);

        await _appiumSupport.fs.rimraf(location);
      } catch (err) {
        _logger.default.warn(`Unable to delete '${location}': ${err.message}`);
      }
    }
  }

  _logger.default.debug('Finished clearing log files');
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
