"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumIosDriver = require("appium-ios-driver");

var _appiumBaseDriver = require("appium-base-driver");

let extensions = {};
Object.assign(extensions, _appiumIosDriver.iosCommands.execute);
const iosExecute = extensions.execute;

extensions.execute = async function (script, args) {
  if (!script.match(/^mobile:/) && !this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  return await iosExecute.call(this, script, args);
};

const iosExecuteAsync = extensions.executeAsync;

extensions.executeAsync = async function (script, args, sessionId) {
  if (!this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotImplementedError();
  }

  return await iosExecuteAsync.call(this, script, args, sessionId);
};

extensions.executeMobile = async function (mobileCommand, opts = {}) {
  const commandMap = {
    scroll: 'mobileScroll',
    swipe: 'mobileSwipe',
    pinch: 'mobilePinch',
    doubleTap: 'mobileDoubleTap',
    twoFingerTap: 'mobileTwoFingerTap',
    touchAndHold: 'mobileTouchAndHold',
    tap: 'mobileTap',
    dragFromToForDuration: 'mobileDragFromToForDuration',
    selectPickerWheelValue: 'mobileSelectPickerWheelValue',
    alert: 'mobileHandleAlert',
    setPasteboard: 'mobileSetPasteboard',
    getPasteboard: 'mobileGetPasteboard',
    source: 'mobileGetSource',
    getContexts: 'mobileGetContexts',
    installApp: 'mobileInstallApp',
    isAppInstalled: 'mobileIsAppInstalled',
    removeApp: 'mobileRemoveApp',
    launchApp: 'mobileLaunchApp',
    terminateApp: 'mobileTerminateApp',
    queryAppState: 'mobileQueryAppState',
    activateApp: 'mobileActivateApp',
    viewportScreenshot: 'getViewportScreenshot',
    startPerfRecord: 'mobileStartPerfRecord',
    stopPerfRecord: 'mobileStopPerfRecord',
    installCertificate: 'mobileInstallCertificate',
    startLogsBroadcast: 'mobileStartLogsBroadcast',
    stopLogsBroadcast: 'mobileStopLogsBroadcast',
    batteryInfo: 'mobileGetBatteryInfo',
    pressButton: 'mobilePressButton',
    enrollBiometric: 'mobileEnrollBiometric',
    sendBiometricMatch: 'mobileSendBiometricMatch',
    isBiometricEnrolled: 'mobileIsBiometricEnrolled',
    clearKeychains: 'mobileClearKeychains',
    getPermission: 'mobileGetPermission',
    siriCommand: 'mobileSiriCommand'
  };

  if (!_lodash.default.has(commandMap, mobileCommand)) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(`Unknown mobile command '${mobileCommand}'. Only ${_lodash.default.keys(commandMap).join(', ')} commands are supported.`);
  }

  return await this[commandMap[mobileCommand]](opts);
};

var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbImV4dGVuc2lvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJpb3NDb21tYW5kcyIsImV4ZWN1dGUiLCJpb3NFeGVjdXRlIiwic2NyaXB0IiwiYXJncyIsIm1hdGNoIiwiaXNXZWJDb250ZXh0IiwiZXJyb3JzIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsImNhbGwiLCJpb3NFeGVjdXRlQXN5bmMiLCJleGVjdXRlQXN5bmMiLCJzZXNzaW9uSWQiLCJleGVjdXRlTW9iaWxlIiwibW9iaWxlQ29tbWFuZCIsIm9wdHMiLCJjb21tYW5kTWFwIiwic2Nyb2xsIiwic3dpcGUiLCJwaW5jaCIsImRvdWJsZVRhcCIsInR3b0ZpbmdlclRhcCIsInRvdWNoQW5kSG9sZCIsInRhcCIsImRyYWdGcm9tVG9Gb3JEdXJhdGlvbiIsInNlbGVjdFBpY2tlcldoZWVsVmFsdWUiLCJhbGVydCIsInNldFBhc3RlYm9hcmQiLCJnZXRQYXN0ZWJvYXJkIiwic291cmNlIiwiZ2V0Q29udGV4dHMiLCJpbnN0YWxsQXBwIiwiaXNBcHBJbnN0YWxsZWQiLCJyZW1vdmVBcHAiLCJsYXVuY2hBcHAiLCJ0ZXJtaW5hdGVBcHAiLCJxdWVyeUFwcFN0YXRlIiwiYWN0aXZhdGVBcHAiLCJ2aWV3cG9ydFNjcmVlbnNob3QiLCJzdGFydFBlcmZSZWNvcmQiLCJzdG9wUGVyZlJlY29yZCIsImluc3RhbGxDZXJ0aWZpY2F0ZSIsInN0YXJ0TG9nc0Jyb2FkY2FzdCIsInN0b3BMb2dzQnJvYWRjYXN0IiwiYmF0dGVyeUluZm8iLCJwcmVzc0J1dHRvbiIsImVucm9sbEJpb21ldHJpYyIsInNlbmRCaW9tZXRyaWNNYXRjaCIsImlzQmlvbWV0cmljRW5yb2xsZWQiLCJjbGVhcktleWNoYWlucyIsImdldFBlcm1pc3Npb24iLCJzaXJpQ29tbWFuZCIsIl8iLCJoYXMiLCJVbmtub3duQ29tbWFuZEVycm9yIiwia2V5cyIsImpvaW4iXSwibWFwcGluZ3MiOiI7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LGNBQWMsRUFBRSxzQkFqREM7QUFtRGpCQyxJQUFBQSxhQUFhLEVBQUUscUJBbkRFO0FBcURqQkMsSUFBQUEsV0FBVyxFQUFFO0FBckRJLEdBQW5COztBQXdEQSxNQUFJLENBQUNDLGdCQUFFQyxHQUFGLENBQU1yQyxVQUFOLEVBQWtCRixhQUFsQixDQUFMLEVBQXVDO0FBQ3JDLFVBQU0sSUFBSVAseUJBQU8rQyxtQkFBWCxDQUFnQywyQkFBMEJ4QyxhQUFjLFdBQVVzQyxnQkFBRUcsSUFBRixDQUFPdkMsVUFBUCxFQUFtQndDLElBQW5CLENBQXdCLElBQXhCLENBQThCLDBCQUFoSCxDQUFOO0FBQ0Q7O0FBQ0QsU0FBTyxNQUFNLEtBQUt4QyxVQUFVLENBQUNGLGFBQUQsQ0FBZixFQUFnQ0MsSUFBaEMsQ0FBYjtBQUNELENBN0REOztlQStEZWxCLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgaW9zQ29tbWFuZHMgfSBmcm9tICdhcHBpdW0taW9zLWRyaXZlcic7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuXG5cbmxldCBleHRlbnNpb25zID0ge307XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgaW9zQ29tbWFuZHMuZXhlY3V0ZSk7XG5cbmNvbnN0IGlvc0V4ZWN1dGUgPSBleHRlbnNpb25zLmV4ZWN1dGU7XG5leHRlbnNpb25zLmV4ZWN1dGUgPSBhc3luYyBmdW5jdGlvbiAoc2NyaXB0LCBhcmdzKSB7XG4gIGlmICghc2NyaXB0Lm1hdGNoKC9ebW9iaWxlOi8pICYmICF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCk7XG4gIH1cblxuICByZXR1cm4gYXdhaXQgaW9zRXhlY3V0ZS5jYWxsKHRoaXMsIHNjcmlwdCwgYXJncyk7XG59O1xuXG5jb25zdCBpb3NFeGVjdXRlQXN5bmMgPSBleHRlbnNpb25zLmV4ZWN1dGVBc3luYztcbmV4dGVuc2lvbnMuZXhlY3V0ZUFzeW5jID0gYXN5bmMgZnVuY3Rpb24gKHNjcmlwdCwgYXJncywgc2Vzc2lvbklkKSB7XG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcigpO1xuICB9XG5cbiAgcmV0dXJuIGF3YWl0IGlvc0V4ZWN1dGVBc3luYy5jYWxsKHRoaXMsIHNjcmlwdCwgYXJncywgc2Vzc2lvbklkKTtcbn07XG5cbi8vIE92ZXJyaWRlcyB0aGUgJ2V4ZWN1dGVNb2JpbGUnIGZ1bmN0aW9uIGRlZmluZWQgaW4gYXBwaXVtLWlvcy1kcml2ZXJcbmV4dGVuc2lvbnMuZXhlY3V0ZU1vYmlsZSA9IGFzeW5jIGZ1bmN0aW9uIChtb2JpbGVDb21tYW5kLCBvcHRzID0ge30pIHtcbiAgY29uc3QgY29tbWFuZE1hcCA9IHtcbiAgICAvL3JlZ2lvbiBnZXN0dXJlcyBzdXBwb3J0XG4gICAgc2Nyb2xsOiAnbW9iaWxlU2Nyb2xsJyxcbiAgICBzd2lwZTogJ21vYmlsZVN3aXBlJyxcbiAgICBwaW5jaDogJ21vYmlsZVBpbmNoJyxcbiAgICBkb3VibGVUYXA6ICdtb2JpbGVEb3VibGVUYXAnLFxuICAgIHR3b0ZpbmdlclRhcDogJ21vYmlsZVR3b0ZpbmdlclRhcCcsXG4gICAgdG91Y2hBbmRIb2xkOiAnbW9iaWxlVG91Y2hBbmRIb2xkJyxcbiAgICB0YXA6ICdtb2JpbGVUYXAnLFxuICAgIGRyYWdGcm9tVG9Gb3JEdXJhdGlvbjogJ21vYmlsZURyYWdGcm9tVG9Gb3JEdXJhdGlvbicsXG4gICAgc2VsZWN0UGlja2VyV2hlZWxWYWx1ZTogJ21vYmlsZVNlbGVjdFBpY2tlcldoZWVsVmFsdWUnLFxuXG4gICAgLy9lbmRyZWdpb24gZ2VzdHVyZXMgc3VwcG9ydFxuICAgIGFsZXJ0OiAnbW9iaWxlSGFuZGxlQWxlcnQnLFxuXG4gICAgc2V0UGFzdGVib2FyZDogJ21vYmlsZVNldFBhc3RlYm9hcmQnLFxuICAgIGdldFBhc3RlYm9hcmQ6ICdtb2JpbGVHZXRQYXN0ZWJvYXJkJyxcblxuICAgIHNvdXJjZTogJ21vYmlsZUdldFNvdXJjZScsXG4gICAgZ2V0Q29udGV4dHM6ICdtb2JpbGVHZXRDb250ZXh0cycsXG5cbiAgICAvL3JlZ2lvbiBtdWx0aXBsZSBhcHBzIG1hbmFnZW1lbnRcbiAgICBpbnN0YWxsQXBwOiAnbW9iaWxlSW5zdGFsbEFwcCcsXG4gICAgaXNBcHBJbnN0YWxsZWQ6ICdtb2JpbGVJc0FwcEluc3RhbGxlZCcsXG4gICAgcmVtb3ZlQXBwOiAnbW9iaWxlUmVtb3ZlQXBwJyxcbiAgICBsYXVuY2hBcHA6ICdtb2JpbGVMYXVuY2hBcHAnLFxuICAgIHRlcm1pbmF0ZUFwcDogJ21vYmlsZVRlcm1pbmF0ZUFwcCcsXG4gICAgcXVlcnlBcHBTdGF0ZTogJ21vYmlsZVF1ZXJ5QXBwU3RhdGUnLFxuICAgIGFjdGl2YXRlQXBwOiAnbW9iaWxlQWN0aXZhdGVBcHAnLFxuICAgIC8vZW5kcmVnaW9uIG11bHRpcGxlIGFwcHMgbWFuYWdlbWVudFxuXG4gICAgdmlld3BvcnRTY3JlZW5zaG90OiAnZ2V0Vmlld3BvcnRTY3JlZW5zaG90JyxcblxuICAgIHN0YXJ0UGVyZlJlY29yZDogJ21vYmlsZVN0YXJ0UGVyZlJlY29yZCcsXG4gICAgc3RvcFBlcmZSZWNvcmQ6ICdtb2JpbGVTdG9wUGVyZlJlY29yZCcsXG5cbiAgICBpbnN0YWxsQ2VydGlmaWNhdGU6ICdtb2JpbGVJbnN0YWxsQ2VydGlmaWNhdGUnLFxuXG4gICAgc3RhcnRMb2dzQnJvYWRjYXN0OiAnbW9iaWxlU3RhcnRMb2dzQnJvYWRjYXN0JyxcbiAgICBzdG9wTG9nc0Jyb2FkY2FzdDogJ21vYmlsZVN0b3BMb2dzQnJvYWRjYXN0JyxcblxuICAgIGJhdHRlcnlJbmZvOiAnbW9iaWxlR2V0QmF0dGVyeUluZm8nLFxuXG4gICAgcHJlc3NCdXR0b246ICdtb2JpbGVQcmVzc0J1dHRvbicsXG5cbiAgICBlbnJvbGxCaW9tZXRyaWM6ICdtb2JpbGVFbnJvbGxCaW9tZXRyaWMnLFxuICAgIHNlbmRCaW9tZXRyaWNNYXRjaDogJ21vYmlsZVNlbmRCaW9tZXRyaWNNYXRjaCcsXG4gICAgaXNCaW9tZXRyaWNFbnJvbGxlZDogJ21vYmlsZUlzQmlvbWV0cmljRW5yb2xsZWQnLFxuXG4gICAgY2xlYXJLZXljaGFpbnM6ICdtb2JpbGVDbGVhcktleWNoYWlucycsXG5cbiAgICBnZXRQZXJtaXNzaW9uOiAnbW9iaWxlR2V0UGVybWlzc2lvbicsXG5cbiAgICBzaXJpQ29tbWFuZDogJ21vYmlsZVNpcmlDb21tYW5kJyxcbiAgfTtcblxuICBpZiAoIV8uaGFzKGNvbW1hbmRNYXAsIG1vYmlsZUNvbW1hbmQpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duQ29tbWFuZEVycm9yKGBVbmtub3duIG1vYmlsZSBjb21tYW5kICcke21vYmlsZUNvbW1hbmR9Jy4gT25seSAke18ua2V5cyhjb21tYW5kTWFwKS5qb2luKCcsICcpfSBjb21tYW5kcyBhcmUgc3VwcG9ydGVkLmApO1xuICB9XG4gIHJldHVybiBhd2FpdCB0aGlzW2NvbW1hbmRNYXBbbW9iaWxlQ29tbWFuZF1dKG9wdHMpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2V4ZWN1dGUuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
